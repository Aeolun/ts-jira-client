/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/rest/api/3/announcementBanner": {
    /**
     * Get announcement banner configuration
     * @description Returns the current announcement banner configuration.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getBanner"];
    /**
     * Update announcement banner configuration
     * @description Updates the announcement banner configuration.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setBanner"];
  };
  "/rest/api/3/app/field/value": {
    /**
     * Update custom fields
     * @description Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.
     *
     * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
     *
     * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     */
    post: operations["updateMultipleCustomFieldValues"];
  };
  "/rest/api/3/app/field/{fieldIdOrKey}/context/configuration": {
    /**
     * Get custom field configurations
     * @description Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
     *
     * The result can be filtered by one of these criteria:
     *
     *  *  `id`.
     *  *  `fieldContextId`.
     *  *  `issueId`.
     *  *  `projectKeyOrId` and `issueTypeId`.
     *
     * Otherwise, all configurations are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.
     */
    get: operations["getCustomFieldConfiguration"];
    /**
     * Update custom field configurations
     * @description Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.
     */
    put: operations["updateCustomFieldConfiguration"];
  };
  "/rest/api/3/app/field/{fieldIdOrKey}/value": {
    /**
     * Update custom field value
     * @description Updates the value of a custom field on one or more issues.
     *
     * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
     *
     * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
     */
    put: operations["updateCustomFieldValue"];
  };
  "/rest/api/3/application-properties": {
    /**
     * Get application property
     * @description Returns all application properties or an application property.
     *
     * If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getApplicationProperty"];
  };
  "/rest/api/3/application-properties/advanced-settings": {
    /**
     * Get advanced settings
     * @description Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAdvancedSettings"];
  };
  "/rest/api/3/application-properties/{id}": {
    /**
     * Set application property
     * @description Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
     *
     * #### Advanced settings ####
     *
     * The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |
     * | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |
     * | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |
     * | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |
     * | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |
     * | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |
     * | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |
     * | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |
     * | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |
     *
     *
     * #### Look and feel ####
     *
     * The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |
     * | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |
     * | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |
     * | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |
     * | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |
     * | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |
     * | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |
     * | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |
     * | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |
     * | `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |
     * | `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |
     * | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |
     * | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |
     * | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |
     * | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |
     *
     *
     * #### Other settings ####
     *
     * | Key | Description | Default value |
     * | -- | -- | -- |
     * | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |
     *
     *
     * *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setApplicationProperty"];
  };
  "/rest/api/3/applicationrole": {
    /**
     * Get all application roles
     * @description Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllApplicationRoles"];
  };
  "/rest/api/3/applicationrole/{key}": {
    /**
     * Get application role
     * @description Returns an application role.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getApplicationRole"];
  };
  "/rest/api/3/attachment/content/{id}": {
    /**
     * Get attachment content
     * @description Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.
     *
     * To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getAttachmentContent"];
  };
  "/rest/api/3/attachment/meta": {
    /**
     * Get Jira attachment settings
     * @description Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
     *
     * Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAttachmentMeta"];
  };
  "/rest/api/3/attachment/thumbnail/{id}": {
    /**
     * Get attachment thumbnail
     * @description Returns the thumbnail of an attachment.
     *
     * To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getAttachmentThumbnail"];
  };
  "/rest/api/3/attachment/{id}": {
    /**
     * Get attachment metadata
     * @description Returns the metadata for an attachment. Note that the attachment itself is not returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getAttachment"];
    /**
     * Delete attachment
     * @description Deletes an attachment from an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
     *
     *  *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
     *  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
     */
    delete: operations["removeAttachment"];
  };
  "/rest/api/3/attachment/{id}/expand/human": {
    /**
     * Get all metadata for an expanded attachment
     * @description Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
     *
     * Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["expandAttachmentForHumans"];
  };
  "/rest/api/3/attachment/{id}/expand/raw": {
    /**
     * Get contents metadata for an expanded attachment
     * @description Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
     *
     * Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** For the issue containing the attachment:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["expandAttachmentForMachines"];
  };
  "/rest/api/3/auditing/record": {
    /**
     * Get audit records
     * @description Returns a list of audit records. The list can be filtered to include items:
     *
     *  *  where each item in `filter` has at least one match in any of these fields:
     *
     *      *  `summary`
     *      *  `category`
     *      *  `eventSource`
     *      *  `objectItem.name` If the object is a user, account ID is available to filter.
     *      *  `objectItem.parentName`
     *      *  `objectItem.typeName`
     *      *  `changedValues.changedFrom`
     *      *  `changedValues.changedTo`
     *      *  `remoteAddress`
     *
     *     For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
     *  *  created on or after a date and time.
     *  *  created or or before a date and time.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAuditRecords"];
  };
  "/rest/api/3/avatar/{type}/system": {
    /**
     * Get system avatars by type
     * @description Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllSystemAvatars"];
  };
  "/rest/api/3/bulk/issues/fields": {
    /**
     * Get bulk editable fields
     * @description Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
     *
     * This method is experimental and may change.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
     *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
     */
    get: operations["getBulkEditableFields"];
    /**
     * Bulk edit issues
     * @description Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
     *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
     */
    post: operations["submitBulkEdit"];
  };
  "/rest/api/3/bulk/issues/move": {
    /**
     * Bulk move issues
     * @description Use this API to submit a bulk issue move request. You can move multiple issues, but they must all be moved to and from a single project, issue type, and parent. You can't move more than 1000 issues (including subtasks) at once.
     *
     * #### Scenarios: ####
     *
     * This is an early version of the API and it doesn't have full feature parity with the Bulk Move UI experience.
     *
     *  *  Moving issue of type A to issue of type B in the same project or a different project: `SUPPORTED`
     *  *  Moving multiple issues of type A in one project to multiple issues of type B in the same project or a different project: **`SUPPORTED`**
     *  *  Moving a standard parent issue of type A with its multiple subtask issue types in one project to standard issue of type B and multiple subtask issue types in the same project or a different project: `SUPPORTED`
     *  *  Moving an epic issue with its child issues to a different project without losing their relation: `NOT SUPPORTED`
     *     (Workaround: Move them individually and stitch the relationship back with the Bulk Edit API)
     *
     * #### Limits applied to bulk issue moves: ####
     *
     * When using the bulk move, keep in mind that there are limits on the number of issues and fields you can include.
     *
     *  *  You can move up to 1,000 issues in a single operation, including any subtasks.
     *  *  All issues must originate from the same project and share the same issue type and parent.
     *  *  The total combined number of fields across all issues must not exceed 1,500,000. For example, if each issue includes 15,000 fields, then the maximum number of issues that can be moved is 100.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
     *  *  Move [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in source projects.
     *  *  Create [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects.
     *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects, if moving subtasks only.
     */
    post: operations["submitBulkMove"];
  };
  "/rest/api/3/bulk/queue/{taskId}": {
    /**
     * Get bulk issue operation progress
     * @description Use this to get the progress state for the specified bulk operation `taskId`.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
     *  *  Administer Jira [global permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/), or be the creator of the task.
     *
     * If the task is running, this resource will return:
     *
     *     {"taskId":"10779","status":"RUNNING","progressPercent":65,"submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"created":1690180055963,"started":1690180056206,"updated":169018005829}
     *
     * If the task has completed, then this resource will return:
     *
     *     {"processedAccessibleIssues":[10001,10002],"created":1709189449954,"progressPercent":100,"started":1709189450154,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"invalidOrInaccessibleIssueCount":0,"taskId":"10000","totalIssueCount":2,"updated":1709189450354}
     *
     * **Note:** You can view task progress for up to 14 days from creation.
     */
    get: operations["getBulkOperationProgress"];
  };
  "/rest/api/3/classification-levels": {
    /**
     * Get all classification levels
     * @description Returns all classification levels.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllUserDataClassificationLevels"];
  };
  "/rest/api/3/comment/list": {
    /**
     * Get comments by IDs
     * @description Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Comments are returned where the user:
     *
     *  *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    post: operations["getCommentsByIds"];
  };
  "/rest/api/3/comment/{commentId}/properties": {
    /**
     * Get comment property keys
     * @description Returns the keys of all the properties of a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getCommentPropertyKeys"];
  };
  "/rest/api/3/comment/{commentId}/properties/{propertyKey}": {
    /**
     * Get comment property
     * @description Returns the value of a comment property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getCommentProperty"];
    /**
     * Set comment property
     * @description Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
     *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
     *
     * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     */
    put: operations["setCommentProperty"];
    /**
     * Delete comment property
     * @description Deletes a comment property.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
     *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
     *
     * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     */
    delete: operations["deleteCommentProperty"];
  };
  "/rest/api/3/component": {
    /**
     * Find components for projects
     * @description Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["findComponentsForProjects"];
    /**
     * Create component
     * @description Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createComponent"];
  };
  "/rest/api/3/component/{id}": {
    /**
     * Get component
     * @description Returns a component.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
     */
    get: operations["getComponent"];
    /**
     * Update component
     * @description Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateComponent"];
    /**
     * Delete component
     * @description Deletes a component.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteComponent"];
  };
  "/rest/api/3/component/{id}/relatedIssueCounts": {
    /**
     * Get component issues count
     * @description Returns the counts of issues assigned to the component.
     *
     * This operation can be accessed anonymously.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     *  *  **Classic**: `read:jira-work`
     *  *  **Granular**: `read:field:jira`, `read:project.component:jira`
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getComponentRelatedIssues"];
  };
  "/rest/api/3/configuration": {
    /**
     * Get global settings
     * @description Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getConfiguration"];
  };
  "/rest/api/3/configuration/timetracking": {
    /**
     * Get selected time tracking provider
     * @description Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getSelectedTimeTrackingImplementation"];
    /**
     * Select time tracking provider
     * @description Selects a time tracking provider.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["selectTimeTrackingImplementation"];
  };
  "/rest/api/3/configuration/timetracking/list": {
    /**
     * Get all time tracking providers
     * @description Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAvailableTimeTrackingImplementations"];
  };
  "/rest/api/3/configuration/timetracking/options": {
    /**
     * Get time tracking settings
     * @description Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getSharedTimeTrackingConfiguration"];
    /**
     * Set time tracking settings
     * @description Sets the time tracking settings.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setSharedTimeTrackingConfiguration"];
  };
  "/rest/api/3/customFieldOption/{id}": {
    /**
     * Get custom field option
     * @description Returns a custom field option. For example, an option in a select list.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The custom field option is returned as follows:
     *
     *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
     */
    get: operations["getCustomFieldOption"];
  };
  "/rest/api/3/dashboard": {
    /**
     * Get all dashboards
     * @description Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllDashboards"];
    /**
     * Create dashboard
     * @description Creates a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     */
    post: operations["createDashboard"];
  };
  "/rest/api/3/dashboard/bulk/edit": {
    /**
     * Bulk edit dashboards
     * @description Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboards to be updated must be owned by the user, or the user must be an administrator.
     */
    put: operations["bulkEditDashboards"];
  };
  "/rest/api/3/dashboard/gadgets": {
    /**
     * Get available gadgets
     * @description Gets a list of all available gadgets that can be added to all dashboards.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllAvailableDashboardGadgets"];
  };
  "/rest/api/3/dashboard/search": {
    /**
     * Search for dashboards
     * @description Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
     *
     *  *  Dashboards owned by the user. Not returned for anonymous users.
     *  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
     *  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
     *  *  Dashboards shared with a public project.
     *  *  Dashboards shared with the public.
     */
    get: operations["getDashboardsPaginated"];
  };
  "/rest/api/3/dashboard/{dashboardId}/gadget": {
    /**
     * Get gadgets
     * @description Returns a list of dashboard gadgets on a dashboard.
     *
     * This operation returns:
     *
     *  *  Gadgets from a list of IDs, when `id` is set.
     *  *  Gadgets with a module key, when `moduleKey` is set.
     *  *  Gadgets from a list of URIs, when `uri` is set.
     *  *  All gadgets, when no other parameters are set.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllGadgets"];
    /**
     * Add gadget to dashboard
     * @description Adds a gadget to a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     */
    post: operations["addGadget"];
  };
  "/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}": {
    /**
     * Update gadget on dashboard
     * @description Changes the title, position, and color of the gadget on a dashboard.
     *
     * **[Permissions](#permissions) required:** None.
     */
    put: operations["updateGadget"];
    /**
     * Remove gadget from dashboard
     * @description Removes a dashboard gadget from a dashboard.
     *
     * When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.
     *
     * **[Permissions](#permissions) required:** None.
     */
    delete: operations["removeGadget"];
  };
  "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties": {
    /**
     * Get dashboard item property keys
     * @description Returns the keys of all properties for a dashboard item.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
     */
    get: operations["getDashboardItemPropertyKeys"];
  };
  "/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}": {
    /**
     * Get dashboard item property
     * @description Returns the key and value of a dashboard item property.
     *
     * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
     *
     * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
     *
     * There is no resource to set or get dashboard items.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
     */
    get: operations["getDashboardItemProperty"];
    /**
     * Set dashboard item property
     * @description Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
     *
     * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
     *
     * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
     *
     * There is no resource to set or get dashboard items.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     */
    put: operations["setDashboardItemProperty"];
    /**
     * Delete dashboard item property
     * @description Deletes a dashboard item property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     */
    delete: operations["deleteDashboardItemProperty"];
  };
  "/rest/api/3/dashboard/{id}": {
    /**
     * Get dashboard
     * @description Returns a dashboard.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     *
     * However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     */
    get: operations["getDashboard"];
    /**
     * Update dashboard
     * @description Updates a dashboard, replacing all the dashboard details with those provided.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be updated must be owned by the user.
     */
    put: operations["updateDashboard"];
    /**
     * Delete dashboard
     * @description Deletes a dashboard.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be deleted must be owned by the user.
     */
    delete: operations["deleteDashboard"];
  };
  "/rest/api/3/dashboard/{id}/copy": {
    /**
     * Copy dashboard
     * @description Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.
     *
     * **[Permissions](#permissions) required:** None
     *
     * The dashboard to be copied must be owned by or shared with the user.
     */
    post: operations["copyDashboard"];
  };
  "/rest/api/3/data-policy": {
    /**
     * Get data policy for the workspace
     * @description Returns data policy for the workspace.
     */
    get: operations["getPolicy"];
  };
  "/rest/api/3/data-policy/project": {
    /**
     * Get data policy for projects
     * @description Returns data policies for the projects specified in the request.
     */
    get: operations["getPolicies"];
  };
  "/rest/api/3/events": {
    /**
     * Get events
     * @description Returns all issue events.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getEvents"];
  };
  "/rest/api/3/expression/analyse": {
    /**
     * Analyse Jira expression
     * @description Analyses and validates Jira expressions.
     *
     * As an experimental feature, this operation can also attempt to type-check the expressions.
     *
     * Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
     *
     * **[Permissions](#permissions) required**: None.
     */
    post: operations["analyseExpression"];
  };
  "/rest/api/3/expression/eval": {
    /**
     * Evaluate Jira expression
     * @description Evaluates a Jira expression and returns its value.
     *
     * This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
     *
     * #### Context variables ####
     *
     * The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
     *
     *  *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
     *  *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
     *  *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
     *  *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
     *  *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
     *  *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
     *  *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
     *  *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
     *  *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
     *
     * Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:
     *
     *  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
     *  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
     *  *  `json`: A JSON object containing custom content.
     *  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.
     * Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
     */
    post: operations["evaluateJiraExpression"];
  };
  "/rest/api/3/field": {
    /**
     * Get fields
     * @description Returns system and custom issue fields according to the following rules:
     *
     *  *  Fields that cannot be added to the issue navigator are always returned.
     *  *  Fields that cannot be placed on an issue screen are always returned.
     *  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
     *  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getFields"];
    /**
     * Create custom field
     * @description Creates a custom field.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createCustomField"];
  };
  "/rest/api/3/field/search": {
    /**
     * Get fields paginated
     * @description Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:
     *
     *  *  all fields
     *  *  specific fields, by defining `id`
     *  *  fields that contain a string in the field name or description, by defining `query`
     *  *  specific fields that contain a string in the field name or description, by defining `id` and `query`
     *
     * Only custom fields can be queried, `type` must be set to `custom`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getFieldsPaginated"];
  };
  "/rest/api/3/field/search/trashed": {
    /**
     * Get fields in trash paginated
     * @description Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.
     *
     * Only custom fields can be queried, `type` must be set to `custom`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getTrashedFieldsPaginated"];
  };
  "/rest/api/3/field/{fieldId}": {
    /**
     * Update custom field
     * @description Updates a custom field.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateCustomField"];
  };
  "/rest/api/3/field/{fieldId}/context": {
    /**
     * Get custom field contexts
     * @description Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
     *
     *  *  With no other parameters set, all contexts.
     *  *  By defining `id` only, all contexts from the list of IDs.
     *  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
     *  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getContextsForField"];
    /**
     * Create custom field context
     * @description Creates a custom field context.
     *
     * If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createCustomFieldContext"];
  };
  "/rest/api/3/field/{fieldId}/context/defaultValue": {
    /**
     * Get custom field contexts default values
     * @description Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.
     * The returned object depends on type of the custom field:
     *
     *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
     *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
     *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
     *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
     *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
     *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
     *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
     *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
     *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
     *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
     *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
     *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
     *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
     *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
     *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
     *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
     *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
     *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
     *
     * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
     *
     *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
     *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
     *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
     *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
     *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
     *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getDefaultValues"];
    /**
     * Set custom field contexts default values
     * @description Sets default for contexts of a custom field. Default are defined using these objects:
     *
     *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
     *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
     *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
     *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
     *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
     *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
     *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
     *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
     *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
     *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
     *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
     *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
     *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
     *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
     *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
     *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
     *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
     *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
     *
     * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
     *
     *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
     *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
     *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
     *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
     *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
     *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
     *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
     *
     * Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setDefaultValues"];
  };
  "/rest/api/3/field/{fieldId}/context/issuetypemapping": {
    /**
     * Get issue types for custom field context
     * @description Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeMappingsForContexts"];
  };
  "/rest/api/3/field/{fieldId}/context/mapping": {
    /**
     * Get custom field contexts for projects and issue types
     * @description Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
     *
     * If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
     *
     * Duplicate project and issue type mappings cannot be provided in the request.
     *
     * The order of the returned values is the same as provided in the request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["getCustomFieldContextsForProjectsAndIssueTypes"];
  };
  "/rest/api/3/field/{fieldId}/context/projectmapping": {
    /**
     * Get project mappings for custom field context
     * @description Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectContextMapping"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}": {
    /**
     * Update custom field context
     * @description Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateCustomFieldContext"];
    /**
     * Delete custom field context
     * @description Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteCustomFieldContext"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype": {
    /**
     * Add issue types to context
     * @description Adds issue types to a custom field context, appending the issue types to the issue types list.
     *
     * A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.
     *
     * If any of the issue types exists in the custom field context, the operation fails and no issue types are added.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["addIssueTypesToContext"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove": {
    /**
     * Remove issue types from context
     * @description Removes issue types from a custom field context.
     *
     * A custom field context without any issue types applies to all issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["removeIssueTypesFromContext"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/option": {
    /**
     * Get custom field options (context)
     * @description Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getOptionsForContext"];
    /**
     * Update custom field options (context)
     * @description Updates the options of a custom field.
     *
     * If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateCustomFieldOption"];
    /**
     * Create custom field options (context)
     * @description Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.
     *
     * The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createCustomFieldOption"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/option/move": {
    /**
     * Reorder custom field options (context)
     * @description Changes the order of custom field options or cascading options in a context.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["reorderCustomFieldOptions"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}": {
    /**
     * Delete custom field options (context)
     * @description Deletes a custom field option.
     *
     * Options with cascading options cannot be deleted without deleting the cascading options first.
     *
     * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteCustomFieldOption"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}/issue": {
    /**
     * Replace custom field options
     * @description Replaces the options of a custom field.
     *
     * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["replaceCustomFieldOption"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/project": {
    /**
     * Assign custom field context to projects
     * @description Assigns a custom field context to projects.
     *
     * If any project in the request is assigned to any context of the custom field, the operation fails.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["assignProjectsToCustomFieldContext"];
  };
  "/rest/api/3/field/{fieldId}/context/{contextId}/project/remove": {
    /**
     * Remove custom field context from projects
     * @description Removes a custom field context from projects.
     *
     * A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.
     *
     * If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["removeCustomFieldContextFromProjects"];
  };
  "/rest/api/3/field/{fieldId}/contexts": {
    /**
     * Get contexts for a field
     * @deprecated
     * @description Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getContextsForFieldDeprecated"];
  };
  "/rest/api/3/field/{fieldId}/screens": {
    /**
     * Get screens for a field
     * @description Returns a [paginated](#pagination) list of the screens a field is used in.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getScreensForField"];
  };
  "/rest/api/3/field/{fieldKey}/option": {
    /**
     * Get all issue field options
     * @description Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    get: operations["getAllIssueFieldOptions"];
    /**
     * Create issue field option
     * @description Creates an option for a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    post: operations["createIssueFieldOption"];
  };
  "/rest/api/3/field/{fieldKey}/option/suggestions/edit": {
    /**
     * Get selectable issue field options
     * @description Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getSelectableIssueFieldOptions"];
  };
  "/rest/api/3/field/{fieldKey}/option/suggestions/search": {
    /**
     * Get visible issue field options
     * @description Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getVisibleIssueFieldOptions"];
  };
  "/rest/api/3/field/{fieldKey}/option/{optionId}": {
    /**
     * Get issue field option
     * @description Returns an option from a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    get: operations["getIssueFieldOption"];
    /**
     * Update issue field option
     * @description Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    put: operations["updateIssueFieldOption"];
    /**
     * Delete issue field option
     * @description Deletes an option from a select list issue field.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    delete: operations["deleteIssueFieldOption"];
  };
  "/rest/api/3/field/{fieldKey}/option/{optionId}/issue": {
    /**
     * Replace issue field option
     * @description Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
     *
     * Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
     *
     * This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
     *
     * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     */
    delete: operations["replaceIssueFieldOption"];
  };
  "/rest/api/3/field/{id}": {
    /**
     * Delete custom field
     * @description Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteCustomField"];
  };
  "/rest/api/3/field/{id}/restore": {
    /**
     * Restore custom field from trash
     * @description Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["restoreCustomField"];
  };
  "/rest/api/3/field/{id}/trash": {
    /**
     * Move custom field to trash
     * @description Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["trashCustomField"];
  };
  "/rest/api/3/fieldconfiguration": {
    /**
     * Get all field configurations
     * @description Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:
     *
     *  *  a list of field configuration item IDs.
     *  *  whether the field configuration is a default.
     *  *  whether the field configuration name or description contains a query string.
     *
     * Only field configurations used in company-managed (classic) projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllFieldConfigurations"];
    /**
     * Create field configuration
     * @description Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.
     *
     * This operation can only create configurations for use in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createFieldConfiguration"];
  };
  "/rest/api/3/fieldconfiguration/{id}": {
    /**
     * Update field configuration
     * @description Updates a field configuration. The name and the description provided in the request override the existing values.
     *
     * This operation can only update configurations used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateFieldConfiguration"];
    /**
     * Delete field configuration
     * @description Deletes a field configuration.
     *
     * This operation can only delete configurations used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteFieldConfiguration"];
  };
  "/rest/api/3/fieldconfiguration/{id}/fields": {
    /**
     * Get field configuration items
     * @description Returns a [paginated](#pagination) list of all fields for a configuration.
     *
     * Only the fields from configurations used in company-managed (classic) projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getFieldConfigurationItems"];
    /**
     * Update field configuration items
     * @description Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.
     *
     * This operation can only update field configurations used in company-managed (classic) projects.
     *
     * The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateFieldConfigurationItems"];
  };
  "/rest/api/3/fieldconfigurationscheme": {
    /**
     * Get all field configuration schemes
     * @description Returns a [paginated](#pagination) list of field configuration schemes.
     *
     * Only field configuration schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllFieldConfigurationSchemes"];
    /**
     * Create field configuration scheme
     * @description Creates a field configuration scheme.
     *
     * This operation can only create field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createFieldConfigurationScheme"];
  };
  "/rest/api/3/fieldconfigurationscheme/mapping": {
    /**
     * Get field configuration issue type items
     * @description Returns a [paginated](#pagination) list of field configuration issue type items.
     *
     * Only items used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getFieldConfigurationSchemeMappings"];
  };
  "/rest/api/3/fieldconfigurationscheme/project": {
    /**
     * Get field configuration schemes for projects
     * @description Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.
     *
     * The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.
     *
     * Only field configuration schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getFieldConfigurationSchemeProjectMapping"];
    /**
     * Assign field configuration scheme to project
     * @description Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
     *
     * Field configuration schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["assignFieldConfigurationSchemeToProject"];
  };
  "/rest/api/3/fieldconfigurationscheme/{id}": {
    /**
     * Update field configuration scheme
     * @description Updates a field configuration scheme.
     *
     * This operation can only update field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateFieldConfigurationScheme"];
    /**
     * Delete field configuration scheme
     * @description Deletes a field configuration scheme.
     *
     * This operation can only delete field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteFieldConfigurationScheme"];
  };
  "/rest/api/3/fieldconfigurationscheme/{id}/mapping": {
    /**
     * Assign issue types to field configurations
     * @description Assigns issue types to field configurations on field configuration scheme.
     *
     * This operation can only modify field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setFieldConfigurationSchemeMapping"];
  };
  "/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete": {
    /**
     * Remove issue types from field configuration scheme
     * @description Removes issue types from the field configuration scheme.
     *
     * This operation can only modify field configuration schemes used in company-managed (classic) projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["removeIssueTypesFromGlobalFieldConfigurationScheme"];
  };
  "/rest/api/3/filter": {
    /**
     * Create filter
     * @description Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    post: operations["createFilter"];
  };
  "/rest/api/3/filter/defaultShareScope": {
    /**
     * Get default share scope
     * @description Returns the default sharing settings for new filters and dashboards for a user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getDefaultShareScope"];
    /**
     * Set default share scope
     * @description Sets the default sharing for new filters and dashboards for a user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    put: operations["setDefaultShareScope"];
  };
  "/rest/api/3/filter/favourite": {
    /**
     * Get favorite filters
     * @description Returns the visible favorite filters of the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
     *
     *  *  owned by the user.
     *  *  shared with a group that the user is a member of.
     *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  shared with a public project.
     *  *  shared with the public.
     *
     * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     */
    get: operations["getFavouriteFilters"];
  };
  "/rest/api/3/filter/my": {
    /**
     * Get my filters
     * @description Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
     *
     *  *  owned by the user.
     *  *  shared with a group that the user is a member of.
     *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  shared with a public project.
     *  *  shared with the public.
     *
     * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
     */
    get: operations["getMyFilters"];
  };
  "/rest/api/3/filter/search": {
    /**
     * Search for filters
     * @description Returns a [paginated](#pagination) list of filters. Use this operation to get:
     *
     *  *  specific filters, by defining `id` only.
     *  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    get: operations["getFiltersPaginated"];
  };
  "/rest/api/3/filter/{id}": {
    /**
     * Get filter
     * @description Returns a filter.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
     *
     *  *  owned by the user.
     *  *  shared with a group that the user is a member of.
     *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  shared with a public project.
     *  *  shared with the public.
     */
    get: operations["getFilter"];
    /**
     * Update filter
     * @description Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
     */
    put: operations["updateFilter"];
    /**
     * Delete filter
     * @description Delete a filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteFilter"];
  };
  "/rest/api/3/filter/{id}/columns": {
    /**
     * Get columns
     * @description Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, column details are only returned for:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    get: operations["getColumns"];
    /**
     * Set columns
     * @description Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
     *
     * The parameters for this resource are expressed as HTML form data. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    put: operations["setColumns"];
    /**
     * Reset columns
     * @description Reset the user's column configuration for the filter to the default.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    delete: operations["resetColumns"];
  };
  "/rest/api/3/filter/{id}/favourite": {
    /**
     * Add filter as favorite
     * @description Add a filter as a favorite for the user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    put: operations["setFavouriteForFilter"];
    /**
     * Remove filter as favorite
     * @description Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    delete: operations["deleteFavouriteForFilter"];
  };
  "/rest/api/3/filter/{id}/owner": {
    /**
     * Change filter owner
     * @description Changes the owner of the filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["changeFilterOwner"];
  };
  "/rest/api/3/filter/{id}/permission": {
    /**
     * Get share permissions
     * @description Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, share permissions are only returned for:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    get: operations["getSharePermissions"];
    /**
     * Add share permission
     * @description Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
     *
     * Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
     *
     * **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     */
    post: operations["addSharePermission"];
  };
  "/rest/api/3/filter/{id}/permission/{permissionId}": {
    /**
     * Get share permission
     * @description Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None, however, a share permission is only returned for:
     *
     *  *  filters owned by the user.
     *  *  filters shared with a group that the user is a member of.
     *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
     *  *  filters shared with a public project.
     *  *  filters shared with the public.
     */
    get: operations["getSharePermission"];
    /**
     * Delete share permission
     * @description Deletes a share permission from a filter.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
     */
    delete: operations["deleteSharePermission"];
  };
  "/rest/api/3/group": {
    /**
     * Get group
     * @deprecated
     * @description This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
     *
     * Returns all users in a group.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getGroup"];
    /**
     * Create group
     * @description Creates a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     */
    post: operations["createGroup"];
    /**
     * Remove group
     * @description Deletes a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
     */
    delete: operations["removeGroup"];
  };
  "/rest/api/3/group/bulk": {
    /**
     * Bulk get groups
     * @description Returns a [paginated](#pagination) list of groups.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["bulkGetGroups"];
  };
  "/rest/api/3/group/member": {
    /**
     * Get users from group
     * @description Returns a [paginated](#pagination) list of all users in a group.
     *
     * Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getUsersFromGroup"];
  };
  "/rest/api/3/group/user": {
    /**
     * Add user to group
     * @description Adds a user to a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     */
    post: operations["addUserToGroup"];
    /**
     * Remove user from group
     * @description Removes a user from a group.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     */
    delete: operations["removeUserFromGroup"];
  };
  "/rest/api/3/groups/picker": {
    /**
     * Find groups
     * @description Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
     *
     * The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
     *
     * The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
     *
     * *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
     */
    get: operations["findGroups"];
  };
  "/rest/api/3/groupuserpicker": {
    /**
     * Find users and groups
     * @description Returns a list of users and groups matching a string. The string is used:
     *
     *  *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
     *  *  for groups, to find a case-sensitive match with group name.
     *
     * For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
     *
     * Optionally, the search can be refined to:
     *
     *  *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
     *
     *      *  projects.
     *      *  issue types.
     *
     *     If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
     *  *  not return Connect app users and groups.
     *  *  return groups that have a case-insensitive match with the query.
     *
     * The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
     */
    get: operations["findUsersAndGroups"];
  };
  "/rest/api/3/instance/license": {
    /**
     * Get license
     * @description Returns licensing information about the Jira instance.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getLicense"];
  };
  "/rest/api/3/issue": {
    /**
     * Create issue
     * @description Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
     *
     * The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Creating a subtask differs from creating an issue as follows:
     *
     *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     *  *  `parent` must contain the ID or key of the parent issue.
     *
     * In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
     *
     * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
     */
    post: operations["createIssue"];
  };
  "/rest/api/3/issue/archive": {
    /**
     * Archive issue(s) by issue ID/key
     * @description Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.
     *
     * **Note that:**
     *
     *  *  you can't archive subtasks directly, only through their parent issues
     *  *  you can only archive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     */
    put: operations["archiveIssues"];
    /**
     * Archive issue(s) by JQL
     * @description Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.
     *
     * You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.
     *
     * **Note that:**
     *
     *  *  you can't archive subtasks directly, only through their parent issues
     *  *  you can only archive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     * **Rate limiting:** Only a single request per jira instance can be active at any given time.
     */
    post: operations["archiveIssuesAsync"];
  };
  "/rest/api/3/issue/bulk": {
    /**
     * Bulk create issue
     * @description Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
     *
     * The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Creating a subtask differs from creating an issue as follows:
     *
     *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
     *  *  `parent` the must contain the ID or key of the parent issue.
     *
     * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
     */
    post: operations["createIssues"];
  };
  "/rest/api/3/issue/createmeta": {
    /**
     * Get create issue metadata
     * @deprecated
     * @description Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).
     *
     * The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     */
    get: operations["getCreateIssueMeta"];
  };
  "/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes": {
    /**
     * Get create metadata issue types for a project
     * @description Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     */
    get: operations["getCreateIssueMetaIssueTypes"];
  };
  "/rest/api/3/issue/createmeta/{projectIdOrKey}/issuetypes/{issueTypeId}": {
    /**
     * Get create field metadata for a project and issue type id
     * @description Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
     */
    get: operations["getCreateIssueMetaIssueTypeId"];
  };
  "/rest/api/3/issue/limit/report": {
    /**
     * Get issue limit report
     * @description Returns all issues breaching and approaching per-issue limits.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueLimitReport"];
  };
  "/rest/api/3/issue/picker": {
    /**
     * Get issue picker suggestions
     * @description Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
     *
     * This operation returns two lists:
     *
     *  *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
     *  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getIssuePickerResource"];
  };
  "/rest/api/3/issue/properties": {
    /**
     * Bulk set issues properties by list
     * @description Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
     *
     * This operation is:
     *
     *  *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
     *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["bulkSetIssuesPropertiesList"];
  };
  "/rest/api/3/issue/properties/multi": {
    /**
     * Bulk set issue properties by issue
     * @description Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.
     *
     * This operation is:
     *
     *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *  *  non-transactional. Updating some entities may fail. Such information will available in the task result.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["bulkSetIssuePropertiesByIssue"];
  };
  "/rest/api/3/issue/properties/{propertyKey}": {
    /**
     * Bulk set issue property
     * @description Sets a property value on multiple issues.
     *
     * The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.
     *
     * The issues to be updated can be specified by a filter.
     *
     * The filter identifies issues eligible for update using these criteria:
     *
     *  *  `entityIds` Only issues from this list are eligible.
     *  *  `currentValue` Only issues with the property set to this value are eligible.
     *  *  `hasProperty`:
     *
     *      *  If *true*, only issues with the property are eligible.
     *      *  If *false*, only issues without the property are eligible.
     *
     * If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
     *
     * If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
     *
     * The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
     *
     * This operation is:
     *
     *  *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
     *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     */
    put: operations["bulkSetIssueProperty"];
    /**
     * Bulk delete issue property
     * @description Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
     *
     * The criteria the filter used to identify eligible issues are:
     *
     *  *  `entityIds` Only issues from this list are eligible.
     *  *  `currentValue` Only issues with the property set to this value are eligible.
     *
     * If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
     *
     * If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
     *
     * This operation is:
     *
     *  *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
     *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     */
    delete: operations["bulkDeleteIssueProperty"];
  };
  "/rest/api/3/issue/unarchive": {
    /**
     * Unarchive issue(s) by issue keys/ID
     * @description Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.
     *
     * **Note that:**
     *
     *  *  you can't unarchive subtasks directly, only through their parent issues
     *  *  you can only unarchive issues from software, service management, and business projects
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     */
    put: operations["unarchiveIssues"];
  };
  "/rest/api/3/issue/watching": {
    /**
     * Get is watching issue bulk
     * @description Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["getIsWatchingIssueBulk"];
  };
  "/rest/api/3/issue/{issueIdOrKey}": {
    /**
     * Get issue
     * @description Returns the details for an issue.
     *
     * The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getIssue"];
    /**
     * Edit issue
     * @description Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.
     *
     * The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
     *
     * The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
     *
     * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    put: operations["editIssue"];
    /**
     * Delete issue
     * @description Deletes an issue.
     *
     * An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    delete: operations["deleteIssue"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/assignee": {
    /**
     * Assign issue
     * @description Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
     *
     * If `name` or `accountId` is set to:
     *
     *  *  `"-1"`, the issue is assigned to the default assignee for the project.
     *  *  `null`, the issue is set to unassigned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    put: operations["assignIssue"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/attachments": {
    /**
     * Add attachment
     * @description Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
     *
     * Note that:
     *
     *  *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
     *  *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
     *
     * The following examples upload a file called *myfile.txt* to the issue *TEST-123*:
     *
     * #### curl ####
     *
     *     curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
     *      -u 'email@example.com:<api_token>'
     *      -H 'X-Atlassian-Token: no-check'
     *      --form 'file=@"myfile.txt"'
     *
     * #### Node.js ####
     *
     *     // This code sample uses the 'node-fetch' and 'form-data' libraries:
     *      // https://www.npmjs.com/package/node-fetch
     *      // https://www.npmjs.com/package/form-data
     *      const fetch = require('node-fetch');
     *      const FormData = require('form-data');
     *      const fs = require('fs');
     *
     *      const filePath = 'myfile.txt';
     *      const form = new FormData();
     *      const stats = fs.statSync(filePath);
     *      const fileSizeInBytes = stats.size;
     *      const fileStream = fs.createReadStream(filePath);
     *
     *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
     *
     *      fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
     *          method: 'POST',
     *          body: form,
     *          headers: {
     *              'Authorization': `Basic ${Buffer.from(
     *                  'email@example.com:'
     *              ).toString('base64')}`,
     *              'Accept': 'application/json',
     *              'X-Atlassian-Token': 'no-check'
     *          }
     *      })
     *          .then(response => {
     *              console.log(
     *                  `Response: ${response.status} ${response.statusText}`
     *              );
     *              return response.text();
     *          })
     *          .then(text => console.log(text))
     *          .catch(err => console.error(err));
     *
     * #### Java ####
     *
     *     // This code sample uses the  'Unirest' library:
     *      // http://unirest.io/java.html
     *      HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
     *              .basicAuth("email@example.com", "")
     *              .header("Accept", "application/json")
     *              .header("X-Atlassian-Token", "no-check")
     *              .field("file", new File("myfile.txt"))
     *              .asJson();
     *
     *              System.out.println(response.getBody());
     *
     * #### Python ####
     *
     *     # This code sample uses the 'requests' library:
     *      # http://docs.python-requests.org
     *      import requests
     *      from requests.auth import HTTPBasicAuth
     *      import json
     *
     *      url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
     *
     *      auth = HTTPBasicAuth("email@example.com", "")
     *
     *      headers = {
     *         "Accept": "application/json",
     *         "X-Atlassian-Token": "no-check"
     *      }
     *
     *      response = requests.request(
     *         "POST",
     *         url,
     *         headers = headers,
     *         auth = auth,
     *         files = {
     *              "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
     *         }
     *      )
     *
     *      print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))
     *
     * #### PHP ####
     *
     *     // This code sample uses the 'Unirest' library:
     *      // http://unirest.io/php.html
     *      Unirest\Request::auth('email@example.com', '');
     *
     *      $headers = array(
     *        'Accept' => 'application/json',
     *        'X-Atlassian-Token' => 'no-check'
     *      );
     *
     *      $parameters = array(
     *        'file' => File::add('myfile.txt')
     *      );
     *
     *      $response = Unirest\Request::post(
     *        'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
     *        $headers,
     *        $parameters
     *      );
     *
     *      var_dump($response)
     *
     * #### Forge ####
     *
     *     // This sample uses Atlassian Forge and the `form-data` library.
     *      // https://developer.atlassian.com/platform/forge/
     *      // https://www.npmjs.com/package/form-data
     *      import api from "@forge/api";
     *      import FormData from "form-data";
     *
     *      const form = new FormData();
     *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
     *
     *      const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
     *          method: 'POST',
     *          body: form,
     *          headers: {
     *              'Accept': 'application/json',
     *              'X-Atlassian-Token': 'no-check'
     *          }
     *      });
     *
     *      console.log(`Response: ${response.status} ${response.statusText}`);
     *      console.log(await response.json());
     *
     * Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["addAttachment"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/changelog": {
    /**
     * Get changelogs
     * @description Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getChangeLogs"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/changelog/list": {
    /**
     * Get changelogs by IDs
     * @description Returns changelogs for an issue specified by a list of changelog IDs.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["getChangeLogsByIds"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/comment": {
    /**
     * Get comments
     * @description Returns all comments for an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Comments are included in the response where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
     */
    get: operations["getComments"];
    /**
     * Add comment
     * @description Adds a comment to an issue.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["addComment"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/comment/{id}": {
    /**
     * Get comment
     * @description Returns a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getComment"];
    /**
     * Update comment
     * @description Updates a comment.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
     *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     */
    put: operations["updateComment"];
    /**
     * Delete comment
     * @description Deletes a comment.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
     *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
     */
    delete: operations["deleteComment"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/editmeta": {
    /**
     * Get edit issue metadata
     * @description Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
     *
     * This endpoint will check for these conditions:
     *
     * 1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
     * 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
     * 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
     * 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
     * 5.  Issue has a project, issue type, and status defined.
     * 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
     * 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
     * 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
     * 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.
     *
     * Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.
     *
     * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:
     *
     *  *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
     *  *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     */
    get: operations["getEditIssueMeta"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/notify": {
    /**
     * Send notification for issue
     * @description Creates an email notification for an issue and adds it to the mail queue.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["notify"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/properties": {
    /**
     * Get issue property keys
     * @description Returns the URLs and keys of an issue's properties.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Property details are only returned where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getIssuePropertyKeys"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}": {
    /**
     * Get issue property
     * @description Returns the key and value of an issue's property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getIssueProperty"];
    /**
     * Set issue property
     * @description Sets the value of an issue's property. Use this resource to store custom data against an issue.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    put: operations["setIssueProperty"];
    /**
     * Delete issue property
     * @description Deletes an issue's property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    delete: operations["deleteIssueProperty"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/remotelink": {
    /**
     * Get remote issue links
     * @description Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getRemoteIssueLinks"];
    /**
     * Create or update remote issue link
     * @description Creates or updates a remote issue link for an issue.
     *
     * If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["createOrUpdateRemoteIssueLink"];
    /**
     * Delete remote issue link by global ID
     * @description Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
     */
    delete: operations["deleteRemoteIssueLinkByGlobalId"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}": {
    /**
     * Get remote issue link by ID
     * @description Returns a remote issue link for an issue.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["getRemoteIssueLinkById"];
    /**
     * Update remote issue link by ID
     * @description Updates a remote issue link for an issue.
     *
     * Note: Fields without values in the request are set to null.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    put: operations["updateRemoteIssueLink"];
    /**
     * Delete remote issue link by ID
     * @description Deletes a remote issue link from an issue.
     *
     * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    delete: operations["deleteRemoteIssueLinkById"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/transitions": {
    /**
     * Get transitions
     * @description Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
     *
     * Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
     */
    get: operations["getTransitions"];
    /**
     * Transition issue
     * @description Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
     *
     * sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["doTransition"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/votes": {
    /**
     * Get votes
     * @description Returns details about the votes on an issue.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
     */
    get: operations["getVotes"];
    /**
     * Add vote
     * @description Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["addVote"];
    /**
     * Delete vote
     * @description Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
     *
     * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    delete: operations["removeVote"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/watchers": {
    /**
     * Get issue watchers
     * @description Returns the watchers for an issue.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     */
    get: operations["getIssueWatchers"];
    /**
     * Add watcher
     * @description Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     */
    post: operations["addWatcher"];
    /**
     * Delete watcher
     * @description Deletes a user as a watcher of an issue.
     *
     * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     */
    delete: operations["removeWatcher"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/worklog": {
    /**
     * Get issue worklogs
     * @description Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Workloads are only returned where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getIssueWorklog"];
    /**
     * Add worklog
     * @description Adds a worklog to an issue.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["addWorklog"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{id}": {
    /**
     * Get worklog
     * @description Returns a worklog.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getWorklog"];
    /**
     * Update worklog
     * @description Updates a worklog.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    put: operations["updateWorklog"];
    /**
     * Delete worklog
     * @description Deletes a worklog from an issue.
     *
     * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    delete: operations["deleteWorklog"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties": {
    /**
     * Get worklog property keys
     * @description Returns the keys of all properties for a worklog.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getWorklogPropertyKeys"];
  };
  "/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}": {
    /**
     * Get worklog property
     * @description Returns the value of a worklog property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    get: operations["getWorklogProperty"];
    /**
     * Set worklog property
     * @description Sets the value of a worklog property. Use this operation to store custom data against the worklog.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    put: operations["setWorklogProperty"];
    /**
     * Delete worklog property
     * @description Deletes a worklog property.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    delete: operations["deleteWorklogProperty"];
  };
  "/rest/api/3/issueLink": {
    /**
     * Create issue link
     * @description Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
     *
     * If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
     *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
     */
    post: operations["linkIssues"];
  };
  "/rest/api/3/issueLink/{linkId}": {
    /**
     * Get issue link
     * @description Returns an issue link.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     */
    get: operations["getIssueLink"];
    /**
     * Delete issue link
     * @description Deletes an issue link.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
     *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
     */
    delete: operations["deleteIssueLink"];
  };
  "/rest/api/3/issueLinkType": {
    /**
     * Get issue link types
     * @description Returns a list of all issue link types.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     */
    get: operations["getIssueLinkTypes"];
    /**
     * Create issue link type
     * @description Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueLinkType"];
  };
  "/rest/api/3/issueLinkType/{issueLinkTypeId}": {
    /**
     * Get issue link type
     * @description Returns an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     */
    get: operations["getIssueLinkType"];
    /**
     * Update issue link type
     * @description Updates an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateIssueLinkType"];
    /**
     * Delete issue link type
     * @description Deletes an issue link type.
     *
     * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteIssueLinkType"];
  };
  "/rest/api/3/issues/archive/export": {
    /**
     * Export archived issue(s)
     * @description Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.
     *
     * Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.
     *
     * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
     *
     * **License required:** Premium or Enterprise
     *
     * **Signed-in users only:** This API can't be accessed anonymously.
     *
     * **Rate limiting:** Only a single request can be active at any given time.
     */
    put: operations["exportArchivedIssues"];
  };
  "/rest/api/3/issuesecurityschemes": {
    /**
     * Get issue security schemes
     * @description Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueSecuritySchemes"];
    /**
     * Create issue security scheme
     * @description Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueSecurityScheme"];
  };
  "/rest/api/3/issuesecurityschemes/level": {
    /**
     * Get issue security levels
     * @description Returns a [paginated](#pagination) list of issue security levels.
     *
     * Only issue security levels in the context of classic projects are returned.
     *
     * Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getSecurityLevels"];
  };
  "/rest/api/3/issuesecurityschemes/level/default": {
    /**
     * Set default issue security levels
     * @description Sets default issue security levels for schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setDefaultLevels"];
  };
  "/rest/api/3/issuesecurityschemes/level/member": {
    /**
     * Get issue security level members
     * @description Returns a [paginated](#pagination) list of issue security level members.
     *
     * Only issue security level members in the context of classic projects are returned.
     *
     * Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getSecurityLevelMembers"];
  };
  "/rest/api/3/issuesecurityschemes/project": {
    /**
     * Get projects using issue security schemes
     * @description Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["searchProjectsUsingSecuritySchemes"];
    /**
     * Associate security scheme to project
     * @description Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["associateSchemesToProjects"];
  };
  "/rest/api/3/issuesecurityschemes/search": {
    /**
     * Search issue security schemes
     * @description Returns a [paginated](#pagination) list of issue security schemes.
     * If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.
     *
     * Only issue security schemes in the context of classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["searchSecuritySchemes"];
  };
  "/rest/api/3/issuesecurityschemes/{id}": {
    /**
     * Get issue security scheme
     * @description Returns an issue security scheme along with its security levels.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     */
    get: operations["getIssueSecurityScheme"];
    /**
     * Update issue security scheme
     * @description Updates the issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateIssueSecurityScheme"];
  };
  "/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members": {
    /**
     * Get issue security level members by issue security scheme
     * @description Returns issue security level members.
     *
     * Only issue security level members in context of classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueSecurityLevelMembers"];
  };
  "/rest/api/3/issuesecurityschemes/{schemeId}": {
    /**
     * Delete issue security scheme
     * @description Deletes an issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteSecurityScheme"];
  };
  "/rest/api/3/issuesecurityschemes/{schemeId}/level": {
    /**
     * Add issue security levels
     * @description Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["addSecurityLevel"];
  };
  "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}": {
    /**
     * Update issue security level
     * @description Updates the issue security level.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateSecurityLevel"];
    /**
     * Remove issue security level
     * @description Deletes an issue security level.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeLevel"];
  };
  "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member": {
    /**
     * Add issue security level members
     * @description Adds members to the issue security level. You can add up to 100 members per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["addSecurityLevelMembers"];
  };
  "/rest/api/3/issuesecurityschemes/{schemeId}/level/{levelId}/member/{memberId}": {
    /**
     * Remove member from issue security level
     * @description Removes an issue security level member from an issue security scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeMemberFromSecurityLevel"];
  };
  "/rest/api/3/issuetype": {
    /**
     * Get all issue types for user
     * @description Returns all issue types.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issue types are only returned as follows:
     *
     *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
     *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     */
    get: operations["getIssueAllTypes"];
    /**
     * Create issue type
     * @description Creates an issue type and adds it to the default issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueType"];
  };
  "/rest/api/3/issuetype/project": {
    /**
     * Get issue types for project
     * @description Returns issue types for a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypesForProject"];
  };
  "/rest/api/3/issuetype/{id}": {
    /**
     * Get issue type
     * @description Returns an issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueType"];
    /**
     * Update issue type
     * @description Updates the issue type.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateIssueType"];
    /**
     * Delete issue type
     * @description Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteIssueType"];
  };
  "/rest/api/3/issuetype/{id}/alternatives": {
    /**
     * Get alternative issue types
     * @description Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAlternativeIssueTypes"];
  };
  "/rest/api/3/issuetype/{id}/avatar2": {
    /**
     * Load issue type avatar
     * @description Loads an avatar for the issue type.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueTypeAvatar"];
  };
  "/rest/api/3/issuetype/{issueTypeId}/properties": {
    /**
     * Get issue type property keys
     * @description Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     */
    get: operations["getIssueTypePropertyKeys"];
  };
  "/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}": {
    /**
     * Get issue type property
     * @description Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     */
    get: operations["getIssueTypeProperty"];
    /**
     * Set issue type property
     * @description Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setIssueTypeProperty"];
    /**
     * Delete issue type property
     * @description Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteIssueTypeProperty"];
  };
  "/rest/api/3/issuetypescheme": {
    /**
     * Get all issue type schemes
     * @description Returns a [paginated](#pagination) list of issue type schemes.
     *
     * Only issue type schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllIssueTypeSchemes"];
    /**
     * Create issue type scheme
     * @description Creates an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueTypeScheme"];
  };
  "/rest/api/3/issuetypescheme/mapping": {
    /**
     * Get issue type scheme items
     * @description Returns a [paginated](#pagination) list of issue type scheme items.
     *
     * Only issue type scheme items used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeSchemesMapping"];
  };
  "/rest/api/3/issuetypescheme/project": {
    /**
     * Get issue type schemes for projects
     * @description Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.
     *
     * Only issue type schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeSchemeForProjects"];
    /**
     * Assign issue type scheme to project
     * @description Assigns an issue type scheme to a project.
     *
     * If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.
     *
     * Issue type schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["assignIssueTypeSchemeToProject"];
  };
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}": {
    /**
     * Update issue type scheme
     * @description Updates an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateIssueTypeScheme"];
    /**
     * Delete issue type scheme
     * @description Deletes an issue type scheme.
     *
     * Only issue type schemes used in classic projects can be deleted.
     *
     * Any projects assigned to the scheme are reassigned to the default issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteIssueTypeScheme"];
  };
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype": {
    /**
     * Add issue types to issue type scheme
     * @description Adds issue types to an issue type scheme.
     *
     * The added issue types are appended to the issue types list.
     *
     * If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["addIssueTypesToIssueTypeScheme"];
  };
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move": {
    /**
     * Change order of issue types
     * @description Changes the order of issue types in an issue type scheme.
     *
     * The request body parameters must meet the following requirements:
     *
     *  *  all of the issue types must belong to the issue type scheme.
     *  *  either `after` or `position` must be provided.
     *  *  the issue type in `after` must not be in the issue type list.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["reorderIssueTypesInIssueTypeScheme"];
  };
  "/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}": {
    /**
     * Remove issue type from issue type scheme
     * @description Removes an issue type from an issue type scheme.
     *
     * This operation cannot remove:
     *
     *  *  any issue type used by issues.
     *  *  any issue types from the default issue type scheme.
     *  *  the last standard issue type from an issue type scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeIssueTypeFromIssueTypeScheme"];
  };
  "/rest/api/3/issuetypescreenscheme": {
    /**
     * Get issue type screen schemes
     * @description Returns a [paginated](#pagination) list of issue type screen schemes.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeScreenSchemes"];
    /**
     * Create issue type screen scheme
     * @description Creates an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createIssueTypeScreenScheme"];
  };
  "/rest/api/3/issuetypescreenscheme/mapping": {
    /**
     * Get issue type screen scheme items
     * @description Returns a [paginated](#pagination) list of issue type screen scheme items.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeScreenSchemeMappings"];
  };
  "/rest/api/3/issuetypescreenscheme/project": {
    /**
     * Get issue type screen schemes for projects
     * @description Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.
     *
     * Only issue type screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueTypeScreenSchemeProjectAssociations"];
    /**
     * Assign issue type screen scheme to project
     * @description Assigns an issue type screen scheme to a project.
     *
     * Issue type screen schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["assignIssueTypeScreenSchemeToProject"];
  };
  "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}": {
    /**
     * Update issue type screen scheme
     * @description Updates an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateIssueTypeScreenScheme"];
    /**
     * Delete issue type screen scheme
     * @description Deletes an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteIssueTypeScreenScheme"];
  };
  "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping": {
    /**
     * Append mappings to issue type screen scheme
     * @description Appends issue type to screen scheme mappings to an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["appendMappingsForIssueTypeScreenScheme"];
  };
  "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default": {
    /**
     * Update issue type screen scheme default screen scheme
     * @description Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateDefaultScreenScheme"];
  };
  "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove": {
    /**
     * Remove mappings from issue type screen scheme
     * @description Removes issue type to screen scheme mappings from an issue type screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["removeMappingsFromIssueTypeScreenScheme"];
  };
  "/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project": {
    /**
     * Get issue type screen scheme projects
     * @description Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.
     *
     * Only company-managed projects associated with an issue type screen scheme are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectsForIssueTypeScreenScheme"];
  };
  "/rest/api/3/jql/autocompletedata": {
    /**
     * Get field reference data (GET)
     * @description Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
     *
     * To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAutoComplete"];
    /**
     * Get field reference data (POST)
     * @description Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
     *
     * This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
     *
     * It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    post: operations["getAutoCompletePost"];
  };
  "/rest/api/3/jql/autocompletedata/suggestions": {
    /**
     * Get field auto complete suggestions
     * @description Returns the JQL search auto complete suggestions for a field.
     *
     * Suggestions can be obtained by providing:
     *
     *  *  `fieldName` to get a list of all values for the field.
     *  *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
     *  *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
     *  *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getFieldAutoCompleteForQueryString"];
  };
  "/rest/api/3/jql/function/computation": {
    /**
     * Get precomputations (apps)
     * @description Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.
     *
     * **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
     */
    get: operations["getPrecomputations"];
    /**
     * Update precomputations (apps)
     * @description Update the precomputation value of a function created by a Forge/Connect app.
     *
     * **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
     */
    post: operations["updatePrecomputations"];
  };
  "/rest/api/3/jql/match": {
    /**
     * Check issues against JQL
     * @description Checks whether one or more issues would be returned by one or more JQL queries.
     *
     * **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["matchIssues"];
  };
  "/rest/api/3/jql/parse": {
    /**
     * Parse JQL query
     * @description Parses and validates JQL queries.
     *
     * Validation is performed in context of the current user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    post: operations["parseJqlQueries"];
  };
  "/rest/api/3/jql/pdcleaner": {
    /**
     * Convert user identifiers to account IDs in JQL queries
     * @description Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
     *
     * You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    post: operations["migrateQueries"];
  };
  "/rest/api/3/jql/sanitize": {
    /**
     * Sanitize JQL queries
     * @description Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.
     *
     * For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.
     *
     * Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).
     *
     * Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["sanitiseJqlQueries"];
  };
  "/rest/api/3/label": {
    /**
     * Get all labels
     * @description Returns a [paginated](#pagination) list of labels.
     */
    get: operations["getAllLabels"];
  };
  "/rest/api/3/license/approximateLicenseCount": {
    /**
     * Get approximate license count
     * @description Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getApproximateLicenseCount"];
  };
  "/rest/api/3/license/approximateLicenseCount/product/{applicationKey}": {
    /**
     * Get approximate application license count
     * @description Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getApproximateApplicationLicenseCount"];
  };
  "/rest/api/3/mypermissions": {
    /**
     * Get my permissions
     * @description Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.
     *
     * The user is reported as having a project permission:
     *
     *  *  in the global context, if the user has the project permission in any project.
     *  *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
     *  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
     *  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.
     *
     * This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.
     *
     * For [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\_PROJECTS permission.
     *
     * Global permissions are unaffected by context.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getMyPermissions"];
  };
  "/rest/api/3/mypreferences": {
    /**
     * Get preference
     * @description Returns the value of a preference of the current user.
     *
     * Note that these keys are deprecated:
     *
     *  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
     *  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
     *
     * These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
     *
     *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
     *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
     *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
     *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPreference"];
    /**
     * Set preference
     * @description Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
     *
     *  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
     *  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
     *  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
     *  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
     *  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
     *
     * Note that these keys are deprecated:
     *
     *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
     *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
     *
     * These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
     *
     *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
     *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
     *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
     *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    put: operations["setPreference"];
    /**
     * Delete preference
     * @description Deletes a preference of the user, which restores the default value of system defined settings.
     *
     * Note that these keys are deprecated:
     *
     *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
     *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
     *
     * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    delete: operations["removePreference"];
  };
  "/rest/api/3/mypreferences/locale": {
    /**
     * Get locale
     * @description Returns the locale for the user.
     *
     * If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getLocale"];
    /**
     * Set locale
     * @deprecated
     * @description Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
     *
     * Sets the locale of the user. The locale must be one supported by the instance of Jira.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    put: operations["setLocale"];
    /**
     * Delete locale
     * @deprecated
     * @description Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
     *
     * Deletes the locale of the user, which restores the default setting.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    delete: operations["deleteLocale"];
  };
  "/rest/api/3/myself": {
    /**
     * Get current user
     * @description Returns details for the current user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getCurrentUser"];
  };
  "/rest/api/3/notificationscheme": {
    /**
     * Get notification schemes paginated
     * @description Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
     *
     * *Note that you should allow for events without recipients to appear in responses.*
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     */
    get: operations["getNotificationSchemes"];
    /**
     * Create notification scheme
     * @description Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createNotificationScheme"];
  };
  "/rest/api/3/notificationscheme/project": {
    /**
     * Get projects using notification schemes paginated
     * @description Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getNotificationSchemeToProjectMappings"];
  };
  "/rest/api/3/notificationscheme/{id}": {
    /**
     * Get notification scheme
     * @description Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
     */
    get: operations["getNotificationScheme"];
    /**
     * Update notification scheme
     * @description Updates a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateNotificationScheme"];
  };
  "/rest/api/3/notificationscheme/{id}/notification": {
    /**
     * Add notifications to notification scheme
     * @description Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
     *
     * *Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["addNotifications"];
  };
  "/rest/api/3/notificationscheme/{notificationSchemeId}": {
    /**
     * Delete notification scheme
     * @description Deletes a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteNotificationScheme"];
  };
  "/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}": {
    /**
     * Remove notification from notification scheme
     * @description Removes a notification from a notification scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeNotificationFromNotificationScheme"];
  };
  "/rest/api/3/permissions": {
    /**
     * Get all permissions
     * @description Returns all permissions, including:
     *
     *  *  global permissions.
     *  *  project permissions.
     *  *  global permissions added by plugins.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllPermissions"];
  };
  "/rest/api/3/permissions/check": {
    /**
     * Get bulk permissions
     * @description Returns:
     *
     *  *  for a list of global permissions, the global permissions granted to a user.
     *  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.
     *
     * If no account ID is provided, the operation returns details for the logged in user.
     *
     * Note that:
     *
     *  *  Invalid project and issue IDs are ignored.
     *  *  A maximum of 1000 projects and 1000 issues can be checked.
     *  *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
     *  *  Empty strings in `projectPermissions.permissions` are ignored.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     *  *  **Classic**: `read:jira-work`
     *  *  **Granular**: `read:permission:jira`
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
     */
    post: operations["getBulkPermissions"];
  };
  "/rest/api/3/permissions/project": {
    /**
     * Get permitted projects
     * @description Returns all the projects where the user is granted a list of project permissions.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    post: operations["getPermittedProjects"];
  };
  "/rest/api/3/permissionscheme": {
    /**
     * Get all permission schemes
     * @description Returns all permission schemes.
     *
     * ### About permission schemes and grants ###
     *
     * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
     *
     * #### Holder object ####
     *
     * The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
     *
     * The `holder` object is defined by the following properties:
     *
     *  *  `type` Identifies the user or group (see the list of types below).
     *  *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
     *  *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`
     *
     * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):
     *
     *  *  `anyone` Grant for anonymous users.
     *  *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
     *  *  `assignee` Grant for the user currently assigned to an issue.
     *  *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
     *  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     *  *  `projectLead` Grant for a project lead.
     *  *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
     *  *  `reporter` Grant for the user who reported the issue.
     *  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
     *  *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
     *  *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
     *
     * #### Built-in permissions ####
     *
     * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
     *
     * **Project permissions**
     *
     *  *  `ADMINISTER_PROJECTS`
     *  *  `BROWSE_PROJECTS`
     *  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
     *  *  `SERVICEDESK_AGENT` (Jira Service Desk only)
     *  *  `VIEW_DEV_TOOLS` (Jira Software only)
     *  *  `VIEW_READONLY_WORKFLOW`
     *
     * **Issue permissions**
     *
     *  *  `ASSIGNABLE_USER`
     *  *  `ASSIGN_ISSUES`
     *  *  `CLOSE_ISSUES`
     *  *  `CREATE_ISSUES`
     *  *  `DELETE_ISSUES`
     *  *  `EDIT_ISSUES`
     *  *  `LINK_ISSUES`
     *  *  `MODIFY_REPORTER`
     *  *  `MOVE_ISSUES`
     *  *  `RESOLVE_ISSUES`
     *  *  `SCHEDULE_ISSUES`
     *  *  `SET_ISSUE_SECURITY`
     *  *  `TRANSITION_ISSUES`
     *
     * **Voters and watchers permissions**
     *
     *  *  `MANAGE_WATCHERS`
     *  *  `VIEW_VOTERS_AND_WATCHERS`
     *
     * **Comments permissions**
     *
     *  *  `ADD_COMMENTS`
     *  *  `DELETE_ALL_COMMENTS`
     *  *  `DELETE_OWN_COMMENTS`
     *  *  `EDIT_ALL_COMMENTS`
     *  *  `EDIT_OWN_COMMENTS`
     *
     * **Attachments permissions**
     *
     *  *  `CREATE_ATTACHMENTS`
     *  *  `DELETE_ALL_ATTACHMENTS`
     *  *  `DELETE_OWN_ATTACHMENTS`
     *
     * **Time tracking permissions**
     *
     *  *  `DELETE_ALL_WORKLOGS`
     *  *  `DELETE_OWN_WORKLOGS`
     *  *  `EDIT_ALL_WORKLOGS`
     *  *  `EDIT_OWN_WORKLOGS`
     *  *  `WORK_ON_ISSUES`
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getAllPermissionSchemes"];
    /**
     * Create permission scheme
     * @description Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createPermissionScheme"];
  };
  "/rest/api/3/permissionscheme/{schemeId}": {
    /**
     * Get permission scheme
     * @description Returns a permission scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPermissionScheme"];
    /**
     * Update permission scheme
     * @description Updates a permission scheme. Below are some important things to note when using this resource:
     *
     *  *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
     *  *  If you want to update only the name and description, then do not send a permissions list in the request.
     *  *  Sending an empty list will remove all permission grants from the permission scheme.
     *
     * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
     *
     * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updatePermissionScheme"];
    /**
     * Delete permission scheme
     * @description Deletes a permission scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deletePermissionScheme"];
  };
  "/rest/api/3/permissionscheme/{schemeId}/permission": {
    /**
     * Get permission scheme grants
     * @description Returns all permission grants for a permission scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPermissionSchemeGrants"];
    /**
     * Create permission grant
     * @description Creates a permission grant in a permission scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createPermissionGrant"];
  };
  "/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}": {
    /**
     * Get permission scheme grant
     * @description Returns a permission grant.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPermissionSchemeGrant"];
    /**
     * Delete permission scheme grant
     * @description Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deletePermissionSchemeEntity"];
  };
  "/rest/api/3/priority": {
    /**
     * Get priorities
     * @deprecated
     * @description Returns the list of all issue priorities.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPriorities"];
    /**
     * Create priority
     * @description Creates an issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createPriority"];
  };
  "/rest/api/3/priority/default": {
    /**
     * Set default priority
     * @description Sets default issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setDefaultPriority"];
  };
  "/rest/api/3/priority/move": {
    /**
     * Move priorities
     * @description Changes the order of issue priorities.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["movePriorities"];
  };
  "/rest/api/3/priority/search": {
    /**
     * Search priorities
     * @deprecated
     * @description Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
     *
     *  *  a list of priority IDs. Any invalid priority IDs are ignored.
     *  *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
     *  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["searchPriorities"];
  };
  "/rest/api/3/priority/{id}": {
    /**
     * Get priority
     * @description Returns an issue priority.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPriority"];
    /**
     * Update priority
     * @description Updates an issue priority.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updatePriority"];
    /**
     * Delete priority
     * @description Deletes an issue priority.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deletePriority"];
  };
  "/rest/api/3/priorityscheme": {
    /**
     * Get priority schemes
     * @description Returns a [paginated](#pagination) list of priority schemes.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPrioritySchemes"];
    /**
     * Create priority scheme
     * @description Creates a new priority scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createPriorityScheme"];
  };
  "/rest/api/3/priorityscheme/mappings": {
    /**
     * Suggested priorities for mappings
     * @description Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    post: operations["suggestedPrioritiesForMappings"];
  };
  "/rest/api/3/priorityscheme/priorities/available": {
    /**
     * Get available priorities by priority scheme
     * @description Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getAvailablePrioritiesByPriorityScheme"];
  };
  "/rest/api/3/priorityscheme/{schemeId}": {
    /**
     * Update priority scheme
     * @description Updates a priority scheme. This includes its details, the lists of priorities and projects in it
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updatePriorityScheme"];
    /**
     * Delete priority scheme
     * @description Deletes a priority scheme.
     *
     * This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deletePriorityScheme"];
  };
  "/rest/api/3/priorityscheme/{schemeId}/priorities": {
    /**
     * Get priorities by priority scheme
     * @description Returns a [paginated](#pagination) list of priorities by scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getPrioritiesByPriorityScheme"];
  };
  "/rest/api/3/priorityscheme/{schemeId}/projects": {
    /**
     * Get projects by priority scheme
     * @description Returns a [paginated](#pagination) list of projects by scheme.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getProjectsByPriorityScheme"];
  };
  "/rest/api/3/project": {
    /**
     * Get all projects
     * @deprecated
     * @description Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getAllProjects"];
    /**
     * Create project
     * @description Creates a project based on a project type template, as shown in the following table:
     *
     * | Project Type Key | Project Template Key |
     * |--|--|
     * | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |
     * | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |
     * | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |
     * The project types are available according to the installed Jira features as follows:
     *
     *  *  Jira Core, the default, enables `business` projects.
     *  *  Jira Service Management enables `service_desk` projects.
     *  *  Jira Software enables `software` projects.
     *
     * To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createProject"];
  };
  "/rest/api/3/project/recent": {
    /**
     * Get recent projects
     * @description Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
     *
     *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getRecent"];
  };
  "/rest/api/3/project/search": {
    /**
     * Get projects paginated
     * @description Returns a [paginated](#pagination) list of projects visible to the user.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
     *
     *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["searchProjects"];
  };
  "/rest/api/3/project/type": {
    /**
     * Get all project types
     * @description Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAllProjectTypes"];
  };
  "/rest/api/3/project/type/accessible": {
    /**
     * Get licensed project types
     * @description Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
     */
    get: operations["getAllAccessibleProjectTypes"];
  };
  "/rest/api/3/project/type/{projectTypeKey}": {
    /**
     * Get project type by key
     * @description Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getProjectTypeByKey"];
  };
  "/rest/api/3/project/type/{projectTypeKey}/accessible": {
    /**
     * Get accessible project type by key
     * @description Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getAccessibleProjectTypeByKey"];
  };
  "/rest/api/3/project/{projectIdOrKey}": {
    /**
     * Get project
     * @description Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProject"];
    /**
     * Update project
     * @description Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
     *
     * All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
     */
    put: operations["updateProject"];
    /**
     * Delete project
     * @description Deletes a project.
     *
     * You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteProject"];
  };
  "/rest/api/3/project/{projectIdOrKey}/archive": {
    /**
     * Archive project
     * @description Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["archiveProject"];
  };
  "/rest/api/3/project/{projectIdOrKey}/avatar": {
    /**
     * Set project avatar
     * @description Sets the avatar displayed for a project.
     *
     * Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    put: operations["updateProjectAvatar"];
  };
  "/rest/api/3/project/{projectIdOrKey}/avatar/{id}": {
    /**
     * Delete project avatar
     * @description Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    delete: operations["deleteProjectAvatar"];
  };
  "/rest/api/3/project/{projectIdOrKey}/avatar2": {
    /**
     * Load project avatar
     * @description Loads an avatar for a project.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST `
     *
     * `--user email@example.com:<api_token> `
     *
     * `--header 'X-Atlassian-Token: no-check' `
     *
     * `--header 'Content-Type: image/< image_type>' `
     *
     * `--data-binary "<@/path/to/file/with/your/avatar>" `
     *
     * `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    post: operations["createProjectAvatar"];
  };
  "/rest/api/3/project/{projectIdOrKey}/avatars": {
    /**
     * Get all project avatars
     * @description Returns all project avatars, grouped by system and custom avatars.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getAllProjectAvatars"];
  };
  "/rest/api/3/project/{projectIdOrKey}/classification-level/default": {
    /**
     * Get the default data classification level of a project
     * @description Returns the default data classification for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getDefaultProjectClassification"];
    /**
     * Update the default data classification level of a project
     * @description Updates the default data classification level for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateDefaultProjectClassification"];
    /**
     * Remove the default data classification level from a project
     * @description Remove the default data classification level for a project.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeDefaultProjectClassification"];
  };
  "/rest/api/3/project/{projectIdOrKey}/component": {
    /**
     * Get project components paginated
     * @description Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
     *
     * If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectComponentsPaginated"];
  };
  "/rest/api/3/project/{projectIdOrKey}/components": {
    /**
     * Get project components
     * @description Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
     *
     * If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectComponents"];
  };
  "/rest/api/3/project/{projectIdOrKey}/delete": {
    /**
     * Delete project asynchronously
     * @description Deletes a project asynchronously.
     *
     * This operation is:
     *
     *  *  transactional, that is, if part of the delete fails the project is not deleted.
     *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["deleteProjectAsynchronously"];
  };
  "/rest/api/3/project/{projectIdOrKey}/features": {
    /**
     * Get project features
     * @description Returns the list of features for a project.
     */
    get: operations["getFeaturesForProject"];
  };
  "/rest/api/3/project/{projectIdOrKey}/features/{featureKey}": {
    /**
     * Set project feature state
     * @description Sets the state of a project feature.
     */
    put: operations["toggleFeatureForProject"];
  };
  "/rest/api/3/project/{projectIdOrKey}/properties": {
    /**
     * Get project property keys
     * @description Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectPropertyKeys"];
  };
  "/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}": {
    /**
     * Get project property
     * @description Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     */
    get: operations["getProjectProperty"];
    /**
     * Set project property
     * @description Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
     */
    put: operations["setProjectProperty"];
    /**
     * Delete project property
     * @description Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
     */
    delete: operations["deleteProjectProperty"];
  };
  "/rest/api/3/project/{projectIdOrKey}/restore": {
    /**
     * Restore deleted or archived project
     * @description Restores a project that has been archived or placed in the Jira recycle bin.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
     */
    post: operations["restore"];
  };
  "/rest/api/3/project/{projectIdOrKey}/role": {
    /**
     * Get project roles for project
     * @description Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.
     *
     * Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectRoles"];
  };
  "/rest/api/3/project/{projectIdOrKey}/role/{id}": {
    /**
     * Get project role for project
     * @description Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
     *
     * To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectRole"];
    /**
     * Set actors for project role
     * @description Sets the actors for a project role for a project, replacing all existing actors.
     *
     * To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setActors"];
    /**
     * Add actors to project role
     * @description Adds actors to a project role for the project.
     *
     * To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["addActorUsers"];
    /**
     * Delete actors from project role
     * @description Deletes actors from a project role for the project.
     *
     * To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteActor"];
  };
  "/rest/api/3/project/{projectIdOrKey}/roledetails": {
    /**
     * Get project role details
     * @description Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectRoleDetails"];
  };
  "/rest/api/3/project/{projectIdOrKey}/statuses": {
    /**
     * Get all statuses for project
     * @description Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getAllStatuses"];
  };
  "/rest/api/3/project/{projectIdOrKey}/version": {
    /**
     * Get project versions paginated
     * @description Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectVersionsPaginated"];
  };
  "/rest/api/3/project/{projectIdOrKey}/versions": {
    /**
     * Get project versions
     * @description Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectVersions"];
  };
  "/rest/api/3/project/{projectId}/email": {
    /**
     * Get project's sender email
     * @description Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getProjectEmail"];
    /**
     * Set project's sender email
     * @description Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
     *
     * If `emailAddress` is an empty string, the default email address is restored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    put: operations["updateProjectEmail"];
  };
  "/rest/api/3/project/{projectId}/hierarchy": {
    /**
     * Get project issue type hierarchy
     * @description Get the issue type hierarchy for a next-gen project.
     *
     * The issue type hierarchy for a project consists of:
     *
     *  *  *Epic* at level 1 (optional).
     *  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
     *  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     */
    get: operations["getHierarchy"];
  };
  "/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme": {
    /**
     * Get project issue security scheme
     * @description Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    get: operations["getProjectIssueSecurityScheme"];
  };
  "/rest/api/3/project/{projectKeyOrId}/notificationscheme": {
    /**
     * Get project notification scheme
     * @description Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    get: operations["getNotificationSchemeForProject"];
  };
  "/rest/api/3/project/{projectKeyOrId}/permissionscheme": {
    /**
     * Get assigned permission scheme
     * @description Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     */
    get: operations["getAssignedPermissionScheme"];
    /**
     * Assign permission scheme
     * @description Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
     */
    put: operations["assignPermissionScheme"];
  };
  "/rest/api/3/project/{projectKeyOrId}/securitylevel": {
    /**
     * Get project issue security levels
     * @description Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
     */
    get: operations["getSecurityLevelsForProject"];
  };
  "/rest/api/3/projectCategory": {
    /**
     * Get all project categories
     * @description Returns all project categories.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getAllProjectCategories"];
    /**
     * Create project category
     * @description Creates a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createProjectCategory"];
  };
  "/rest/api/3/projectCategory/{id}": {
    /**
     * Get project category by ID
     * @description Returns a project category.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getProjectCategoryById"];
    /**
     * Update project category
     * @description Updates a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateProjectCategory"];
    /**
     * Delete project category
     * @description Deletes a project category.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeProjectCategory"];
  };
  "/rest/api/3/projectvalidate/key": {
    /**
     * Validate project key
     * @description Validates a project key by confirming the key is a valid string and not in use.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["validateProjectKey"];
  };
  "/rest/api/3/projectvalidate/validProjectKey": {
    /**
     * Get valid project key
     * @description Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getValidProjectKey"];
  };
  "/rest/api/3/projectvalidate/validProjectName": {
    /**
     * Get valid project name
     * @description Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getValidProjectName"];
  };
  "/rest/api/3/resolution": {
    /**
     * Get resolutions
     * @deprecated
     * @description Returns a list of all issue resolution values.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getResolutions"];
    /**
     * Create resolution
     * @description Creates an issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createResolution"];
  };
  "/rest/api/3/resolution/default": {
    /**
     * Set default resolution
     * @description Sets default issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setDefaultResolution"];
  };
  "/rest/api/3/resolution/move": {
    /**
     * Move resolutions
     * @description Changes the order of issue resolutions.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["moveResolutions"];
  };
  "/rest/api/3/resolution/search": {
    /**
     * Search resolutions
     * @description Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:
     *
     *  *  a list of resolutions IDs.
     *  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["searchResolutions"];
  };
  "/rest/api/3/resolution/{id}": {
    /**
     * Get resolution
     * @description Returns an issue resolution value.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getResolution"];
    /**
     * Update resolution
     * @description Updates an issue resolution.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateResolution"];
    /**
     * Delete resolution
     * @description Deletes an issue resolution.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteResolution"];
  };
  "/rest/api/3/role": {
    /**
     * Get all project roles
     * @description Gets a list of all project roles, complete with project role details and default actors.
     *
     * ### About project roles ###
     *
     * [Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
     *
     * Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
     *
     * #### Members and actors ####
     *
     * In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
     *
     * Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:
     *
     *  *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
     *  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllProjectRoles"];
    /**
     * Create project role
     * @description Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
     *
     * *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createProjectRole"];
  };
  "/rest/api/3/role/{id}": {
    /**
     * Get project role by ID
     * @description Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectRoleById"];
    /**
     * Fully update project role
     * @description Updates the project role's name and description. You must include both a name and a description in the request.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["fullyUpdateProjectRole"];
    /**
     * Partial update project role
     * @description Updates either the project role's name or its description.
     *
     * You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["partialUpdateProjectRole"];
    /**
     * Delete project role
     * @description Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteProjectRole"];
  };
  "/rest/api/3/role/{id}/actors": {
    /**
     * Get default actors for project role
     * @description Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getProjectRoleActorsForRole"];
    /**
     * Add default actors to project role
     * @description Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
     *
     * Changing a project role's default actors does not affect project role members for projects already created.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["addProjectRoleActorsToRole"];
    /**
     * Delete default actors from project role
     * @description Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
     *
     * Changing a project role's default actors does not affect project role members for projects already created.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteProjectRoleActorsFromRole"];
  };
  "/rest/api/3/screens": {
    /**
     * Get screens
     * @description Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getScreens"];
    /**
     * Create screen
     * @description Creates a screen with a default field tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createScreen"];
  };
  "/rest/api/3/screens/addToDefault/{fieldId}": {
    /**
     * Add field to default screen
     * @description Adds a field to the default tab of the default screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["addFieldToDefaultScreen"];
  };
  "/rest/api/3/screens/tabs": {
    /**
     * Get bulk screen tabs
     * @description Returns the list of tabs for a bulk of screens.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getBulkScreenTabs"];
  };
  "/rest/api/3/screens/{screenId}": {
    /**
     * Update screen
     * @description Updates a screen. Only screens used in classic projects can be updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateScreen"];
    /**
     * Delete screen
     * @description Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.
     *
     * Only screens used in classic projects can be deleted.
     */
    delete: operations["deleteScreen"];
  };
  "/rest/api/3/screens/{screenId}/availableFields": {
    /**
     * Get available screen fields
     * @description Returns the fields that can be added to a tab on a screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAvailableScreenFields"];
  };
  "/rest/api/3/screens/{screenId}/tabs": {
    /**
     * Get all screen tabs
     * @description Returns the list of tabs for a screen.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     */
    get: operations["getAllScreenTabs"];
    /**
     * Create screen tab
     * @description Creates a tab for a screen.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["addScreenTab"];
  };
  "/rest/api/3/screens/{screenId}/tabs/{tabId}": {
    /**
     * Update screen tab
     * @description Updates the name of a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["renameScreenTab"];
    /**
     * Delete screen tab
     * @description Deletes a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteScreenTab"];
  };
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields": {
    /**
     * Get all screen tab fields
     * @description Returns all fields for a screen tab.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     */
    get: operations["getAllScreenTabFields"];
    /**
     * Add screen tab field
     * @description Adds a field to a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["addScreenTabField"];
  };
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}": {
    /**
     * Remove screen tab field
     * @description Removes a field from a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["removeScreenTabField"];
  };
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move": {
    /**
     * Move screen tab field
     * @description Moves a screen tab field.
     *
     * If `after` and `position` are provided in the request, `position` is ignored.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["moveScreenTabField"];
  };
  "/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}": {
    /**
     * Move screen tab
     * @description Moves a screen tab.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["moveScreenTab"];
  };
  "/rest/api/3/screenscheme": {
    /**
     * Get screen schemes
     * @description Returns a [paginated](#pagination) list of screen schemes.
     *
     * Only screen schemes used in classic projects are returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getScreenSchemes"];
    /**
     * Create screen scheme
     * @description Creates a screen scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createScreenScheme"];
  };
  "/rest/api/3/screenscheme/{screenSchemeId}": {
    /**
     * Update screen scheme
     * @description Updates a screen scheme. Only screen schemes used in classic projects can be updated.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateScreenScheme"];
    /**
     * Delete screen scheme
     * @description Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.
     *
     * Only screens schemes used in classic projects can be deleted.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteScreenScheme"];
  };
  "/rest/api/3/search": {
    /**
     * Search for issues using JQL (GET)
     * @description Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    get: operations["searchForIssuesUsingJql"];
    /**
     * Search for issues using JQL (POST)
     * @description Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["searchForIssuesUsingJqlPost"];
  };
  "/rest/api/3/search/id": {
    /**
     * Search issue IDs using JQL
     * @description Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
     *
     * Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
     *
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
     *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     */
    post: operations["searchForIssuesIds"];
  };
  "/rest/api/3/securitylevel/{id}": {
    /**
     * Get issue security level
     * @description Returns details of an issue security level.
     *
     * Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getIssueSecurityLevel"];
  };
  "/rest/api/3/serverInfo": {
    /**
     * Get Jira instance info
     * @description Returns information about the Jira instance.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getServerInfo"];
  };
  "/rest/api/3/settings/columns": {
    /**
     * Get issue navigator default columns
     * @description Returns the default issue navigator columns.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getIssueNavigatorDefaultColumns"];
    /**
     * Set issue navigator default columns
     * @description Sets the default issue navigator columns.
     *
     * The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
     *
     * If no column details are sent, then all default columns are removed.
     *
     * A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setIssueNavigatorDefaultColumns"];
  };
  "/rest/api/3/status": {
    /**
     * Get all statuses
     * @description Returns a list of all statuses associated with active workflows.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getStatuses"];
  };
  "/rest/api/3/status/{idOrName}": {
    /**
     * Get status
     * @description Returns a status. The status must be associated with an active workflow to be returned.
     *
     * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
     *
     * This operation can be accessed anonymously.
     *
     * [Permissions](#permissions) required: None.
     */
    get: operations["getStatus"];
  };
  "/rest/api/3/statuscategory": {
    /**
     * Get all status categories
     * @description Returns a list of all status categories.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getStatusCategories"];
  };
  "/rest/api/3/statuscategory/{idOrKey}": {
    /**
     * Get status category
     * @description Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getStatusCategory"];
  };
  "/rest/api/3/statuses": {
    /**
     * Bulk get statuses
     * @description Returns a list of the statuses specified by one or more status IDs.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    get: operations["getStatusesById"];
    /**
     * Bulk update statuses
     * @description Updates statuses by ID.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    put: operations["updateStatuses"];
    /**
     * Bulk create statuses
     * @description Creates statuses for a global or project scope.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    post: operations["createStatuses"];
    /**
     * Bulk delete Statuses
     * @description Deletes statuses by ID.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    delete: operations["deleteStatusesById"];
  };
  "/rest/api/3/statuses/search": {
    /**
     * Search statuses paginated
     * @description Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
     */
    get: operations["search"];
  };
  "/rest/api/3/task/{taskId}": {
    /**
     * Get task
     * @description Returns the status of a [long-running asynchronous task](#async).
     *
     * When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
     *
     * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
     *
     *  *  `read:jira-work`
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  Creator of the task.
     */
    get: operations["getTask"];
  };
  "/rest/api/3/task/{taskId}/cancel": {
    /**
     * Cancel task
     * @description Cancels a task.
     *
     * **[Permissions](#permissions) required:** either of:
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *  *  Creator of the task.
     */
    post: operations["cancelTask"];
  };
  "/rest/api/3/uiModifications": {
    /**
     * Get UI modifications
     * @description Gets UI modifications. UI modifications can only be retrieved by Forge apps.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getUiModifications"];
    /**
     * Create UI modification
     * @description Creates a UI modification. UI modification can only be created by Forge apps.
     *
     * Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *None* if the UI modification is created without contexts.
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     */
    post: operations["createUiModification"];
  };
  "/rest/api/3/uiModifications/{uiModificationId}": {
    /**
     * Update UI modification
     * @description Updates a UI modification. UI modification can only be updated by Forge apps.
     *
     * Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *None* if the UI modification is created without contexts.
     *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
     */
    put: operations["updateUiModification"];
    /**
     * Delete UI modification
     * @description Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.
     *
     * **[Permissions](#permissions) required:** None.
     */
    delete: operations["deleteUiModification"];
  };
  "/rest/api/3/universal_avatar/type/{type}/owner/{entityId}": {
    /**
     * Get avatars
     * @description Returns the system and custom avatars for a project or issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     *  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     *  *  for system avatars, none.
     */
    get: operations["getAvatars"];
    /**
     * Load avatar
     * @description Loads a custom avatar for a project or issue type.
     *
     * Specify the avatar's local file location in the body of the request. Also, include the following headers:
     *
     *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
     *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
     *
     * For example:
     * `curl --request POST `
     *
     * `--user email@example.com:<api_token> `
     *
     * `--header 'X-Atlassian-Token: no-check' `
     *
     * `--header 'Content-Type: image/< image_type>' `
     *
     * `--data-binary "<@/path/to/file/with/your/avatar>" `
     *
     * `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
     *
     * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
     *
     * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
     *
     * After creating the avatar use:
     *
     *  *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
     *  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["storeAvatar"];
  };
  "/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}": {
    /**
     * Delete avatar
     * @description Deletes an avatar from a project or issue type.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteAvatar"];
  };
  "/rest/api/3/universal_avatar/view/type/{type}": {
    /**
     * Get avatar image by type
     * @description Returns the default project or issue type avatar image.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["getAvatarImageByType"];
  };
  "/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}": {
    /**
     * Get avatar image by ID
     * @description Returns a project or issue type avatar image by ID.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  For system avatars, none.
     *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     */
    get: operations["getAvatarImageByID"];
  };
  "/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}": {
    /**
     * Get avatar image by owner
     * @description Returns the avatar image for a project or issue type.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  For system avatars, none.
     *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
     *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
     */
    get: operations["getAvatarImageByOwner"];
  };
  "/rest/api/3/user": {
    /**
     * Get user
     * @description Returns a user.
     *
     * Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getUser"];
    /**
     * Create user
     * @description Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
     *
     * If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createUser"];
    /**
     * Delete user
     * @description Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
     *
     * **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
     */
    delete: operations["removeUser"];
  };
  "/rest/api/3/user/assignable/multiProjectSearch": {
    /**
     * Find users assignable to projects
     * @description Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** None.
     */
    get: operations["findBulkAssignableUsers"];
  };
  "/rest/api/3/user/assignable/search": {
    /**
     * Find users assignable to issues
     * @description Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
     *
     *  *  a new issue, by providing the `projectKeyOrId`.
     *  *  an updated issue, by providing the `issueKey`.
     *  *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
     *
     * In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
     */
    get: operations["findAssignableUsers"];
  };
  "/rest/api/3/user/bulk": {
    /**
     * Bulk get users
     * @description Returns a [paginated](#pagination) list of the users specified by one or more account IDs.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["bulkGetUsers"];
  };
  "/rest/api/3/user/bulk/migration": {
    /**
     * Get account IDs for users
     * @description Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["bulkGetUsersMigration"];
  };
  "/rest/api/3/user/columns": {
    /**
     * Get user default columns
     * @description Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
     *  *  Permission to access Jira, to get the calling user's column details.
     */
    get: operations["getUserDefaultColumns"];
    /**
     * Set user default columns
     * @description Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
     *
     * The parameters for this resource are expressed as HTML form data. For example, in curl:
     *
     * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
     *  *  Permission to access Jira, to set the calling user's columns.
     */
    put: operations["setUserColumns"];
    /**
     * Reset user default columns
     * @description Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
     *  *  Permission to access Jira, to set the calling user's columns.
     */
    delete: operations["resetUserColumns"];
  };
  "/rest/api/3/user/email": {
    /**
     * Get user email
     * @description Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     */
    get: operations["getUserEmail"];
  };
  "/rest/api/3/user/email/bulk": {
    /**
     * Get user email bulk
     * @description Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
     */
    get: operations["getUserEmailBulk"];
  };
  "/rest/api/3/user/groups": {
    /**
     * Get user groups
     * @description Returns the groups to which a user belongs.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getUserGroups"];
  };
  "/rest/api/3/user/permission/search": {
    /**
     * Find users with permissions
     * @description Returns a list of users who fulfill these criteria:
     *
     *  *  their user attributes match a search string.
     *  *  they have a set of permissions for a project or issue.
     *
     * If no search string is provided, a list of all users with the permissions is returned.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
     *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
     */
    get: operations["findUsersWithAllPermissions"];
  };
  "/rest/api/3/user/picker": {
    /**
     * Find users for picker
     * @description Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
     *
     * This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
     */
    get: operations["findUsersForPicker"];
  };
  "/rest/api/3/user/properties": {
    /**
     * Get user property keys
     * @description Returns the keys of all properties for a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
     *  *  Access to Jira, to access the calling user's property keys.
     */
    get: operations["getUserPropertyKeys"];
  };
  "/rest/api/3/user/properties/{propertyKey}": {
    /**
     * Get user property
     * @description Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
     *  *  Access to Jira, to get a property from the calling user's record.
     */
    get: operations["getUserProperty"];
    /**
     * Set user property
     * @description Sets the value of a user's property. Use this resource to store custom data against a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
     *  *  Access to Jira, to set a property on the calling user's record.
     */
    put: operations["setUserProperty"];
    /**
     * Delete user property
     * @description Deletes a property from a user.
     *
     * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
     *  *  Access to Jira, to delete a property from the calling user's record.
     */
    delete: operations["deleteUserProperty"];
  };
  "/rest/api/3/user/search": {
    /**
     * Find users
     * @description Returns a list of active users that match the search string and property.
     *
     * This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * This operation can be accessed anonymously.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
     */
    get: operations["findUsers"];
  };
  "/rest/api/3/user/search/query": {
    /**
     * Find users by query
     * @description Finds users with a structured query and returns a [paginated](#pagination) list of user details.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * The query statements are:
     *
     *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
     *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
     *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
     *
     * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
     *
     * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
     */
    get: operations["findUsersByQuery"];
  };
  "/rest/api/3/user/search/query/key": {
    /**
     * Find user keys by query
     * @description Finds users with a structured query and returns a [paginated](#pagination) list of user keys.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * The query statements are:
     *
     *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
     *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
     *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
     *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
     *
     * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
     *
     * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
     */
    get: operations["findUserKeysByQuery"];
  };
  "/rest/api/3/user/viewissue/search": {
    /**
     * Find users with browse permission
     * @description Returns a list of users who fulfill these criteria:
     *
     *  *  their user attributes match a search string.
     *  *  they have permission to browse issues.
     *
     * Use this resource to find users who can browse:
     *
     *  *  an issue, by providing the `issueKey`.
     *  *  any issue in a project, by providing the `projectKey`.
     *
     * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
     */
    get: operations["findUsersWithBrowsePermission"];
  };
  "/rest/api/3/users": {
    /**
     * Get all users default
     * @description Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllUsersDefault"];
  };
  "/rest/api/3/users/search": {
    /**
     * Get all users
     * @description Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
     *
     * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
     *
     * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllUsers"];
  };
  "/rest/api/3/version": {
    /**
     * Create version
     * @description Creates a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
     */
    post: operations["createVersion"];
  };
  "/rest/api/3/version/{id}": {
    /**
     * Get version
     * @description Returns a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     */
    get: operations["getVersion"];
    /**
     * Update version
     * @description Updates a project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     */
    put: operations["updateVersion"];
    /**
     * Delete version
     * @deprecated
     * @description Deletes a project version.
     *
     * Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
     *
     * Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     */
    delete: operations["deleteVersion"];
  };
  "/rest/api/3/version/{id}/mergeto/{moveIssuesTo}": {
    /**
     * Merge versions
     * @description Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
     *
     * Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     */
    put: operations["mergeVersions"];
  };
  "/rest/api/3/version/{id}/move": {
    /**
     * Move version
     * @description Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     */
    post: operations["moveVersion"];
  };
  "/rest/api/3/version/{id}/relatedIssueCounts": {
    /**
     * Get version's related issues count
     * @description Returns the following counts for a version:
     *
     *  *  Number of issues where the `fixVersion` is set to the version.
     *  *  Number of issues where the `affectedVersion` is set to the version.
     *  *  Number of issues where a version custom field is set to the version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     */
    get: operations["getVersionRelatedIssues"];
  };
  "/rest/api/3/version/{id}/relatedwork": {
    /**
     * Get related work
     * @description Returns related work items for the given version id.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
     */
    get: operations["getRelatedWork"];
    /**
     * Update related work
     * @description Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     */
    put: operations["updateRelatedWork"];
    /**
     * Create related work
     * @description Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     */
    post: operations["createRelatedWork"];
  };
  "/rest/api/3/version/{id}/removeAndSwap": {
    /**
     * Delete and replace version
     * @description Deletes a project version.
     *
     * Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
     */
    post: operations["deleteAndReplaceVersion"];
  };
  "/rest/api/3/version/{id}/unresolvedIssueCount": {
    /**
     * Get version's unresolved issues count
     * @description Returns counts of the issues and unresolved issues for the project version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
     */
    get: operations["getVersionUnresolvedIssues"];
  };
  "/rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}": {
    /**
     * Delete related work
     * @description Deletes the given related work for the given version.
     *
     * This operation can be accessed anonymously.
     *
     * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
     */
    delete: operations["deleteRelatedWork"];
  };
  "/rest/api/3/webhook": {
    /**
     * Get dynamic webhooks for app
     * @description Returns a [paginated](#pagination) list of the webhooks registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     */
    get: operations["getDynamicWebhooksForApp"];
    /**
     * Register dynamic webhooks
     * @description Registers webhooks.
     *
     * **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     */
    post: operations["registerDynamicWebhooks"];
    /**
     * Delete webhooks by ID
     * @description Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     */
    delete: operations["deleteWebhookById"];
  };
  "/rest/api/3/webhook/failed": {
    /**
     * Get failed webhooks
     * @description Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
     *
     * After 72 hours the failure may no longer be returned by this operation.
     *
     * The oldest failure is returned first.
     *
     * This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
     *
     * **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
     */
    get: operations["getFailedWebhooks"];
  };
  "/rest/api/3/webhook/refresh": {
    /**
     * Extend webhook life
     * @description Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.
     *
     * Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
     */
    put: operations["refreshWebhooks"];
  };
  "/rest/api/3/workflow": {
    /**
     * Get all workflows
     * @deprecated
     * @description Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
     *
     * If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllWorkflows"];
    /**
     * Create workflow
     * @deprecated
     * @description Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.
     *
     * #### Conditions ####
     *
     * Conditions enable workflow rules that govern whether a transition can execute.
     *
     * ##### Always false condition #####
     *
     * A condition that always fails.
     *
     *     {
     *        "type": "AlwaysFalseCondition"
     *      }
     *
     * ##### Block transition until approval #####
     *
     * A condition that blocks issue transition if there is a pending approval.
     *
     *     {
     *        "type": "BlockInProgressApprovalCondition"
     *      }
     *
     * ##### Compare number custom field condition #####
     *
     * A condition that allows transition if a comparison between a number custom field and a value is true.
     *
     *     {
     *        "type": "CompareNumberCFCondition",
     *        "configuration": {
     *          "comparator": "=",
     *          "fieldId": "customfield_10029",
     *          "fieldValue": 2
     *        }
     *      }
     *
     *  *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
     *  *  `fieldId` The custom numeric field ID. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
     *  *  `fieldValue` The value for comparison.
     *
     * ##### Hide from user condition #####
     *
     * A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.
     *
     *     {
     *        "type": "RemoteOnlyCondition"
     *      }
     *
     * ##### Only assignee condition #####
     *
     * A condition that allows only the assignee to execute a transition.
     *
     *     {
     *        "type": "AllowOnlyAssignee"
     *      }
     *
     * ##### Only Bamboo notifications workflow condition (deprecated) #####
     *
     * A condition that makes the transition available only to Bamboo build notifications.
     *
     *     {
     *        "type": "OnlyBambooNotificationsCondition"
     *      }
     *
     * ##### Only reporter condition #####
     *
     * A condition that allows only the reporter to execute a transition.
     *
     *     {
     *        "type": "AllowOnlyReporter"
     *      }
     *
     * ##### Permission condition #####
     *
     * A condition that allows only users with a permission to execute a transition.
     *
     *     {
     *        "type": "PermissionCondition",
     *        "configuration": {
     *            "permissionKey": "BROWSE_PROJECTS"
     *        }
     *      }
     *
     *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     *
     * ##### Previous status condition #####
     *
     * A condition that allows a transition based on whether an issue has or has not transitioned through a status.
     *
     *     {
     *        "type": "PreviousStatusCondition",
     *        "configuration": {
     *          "ignoreLoopTransitions": true,
     *          "includeCurrentStatus": true,
     *          "mostRecentStatusOnly": true,
     *          "reverseCondition": true,
     *          "previousStatus": {
     *            "id": "5"
     *          }
     *        }
     *      }
     *
     * By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:
     *
     *  *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
     *  *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
     *  *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
     *  *  `reverseCondition` is `true`, then the status must not be present.
     *
     * ##### Separation of duties condition #####
     *
     * A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.
     *
     *     {
     *        "type": "SeparationOfDutiesCondition",
     *        "configuration": {
     *          "fromStatus": {
     *            "id": "5"
     *          },
     *          "toStatus": {
     *            "id": "6"
     *          }
     *        }
     *      }
     *
     *  *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
     *  *  `toStatus` An object containing the ID of the target status of the transition that is blocked.
     *
     * ##### Subtask blocking condition #####
     *
     * A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.
     *
     *     {
     *        "type": "SubTaskBlockingCondition",
     *        "configuration": {
     *          "statuses": [
     *            {
     *              "id": "1"
     *            },
     *            {
     *              "id": "3"
     *            }
     *          ]
     *        }
     *      }
     *
     *  *  `statuses` A list of objects containing status IDs.
     *
     * ##### User is in any group condition #####
     *
     * A condition that allows users belonging to any group from a list of groups to execute a transition.
     *
     *     {
     *        "type": "UserInAnyGroupCondition",
     *        "configuration": {
     *          "groups": [
     *            "administrators",
     *            "atlassian-addons-admin"
     *          ]
     *        }
     *      }
     *
     *  *  `groups` A list of group names.
     *
     * ##### User is in any project role condition #####
     *
     * A condition that allows only users with at least one project roles from a list of project roles to execute a transition.
     *
     *     {
     *        "type": "InAnyProjectRoleCondition",
     *        "configuration": {
     *          "projectRoles": [
     *            {
     *              "id": "10002"
     *            },
     *            {
     *              "id": "10003"
     *            },
     *            {
     *              "id": "10012"
     *            },
     *            {
     *              "id": "10013"
     *            }
     *          ]
     *        }
     *      }
     *
     *  *  `projectRoles` A list of objects containing project role IDs.
     *
     * ##### User is in custom field condition #####
     *
     * A condition that allows only users listed in a given custom field to execute the transition.
     *
     *     {
     *        "type": "UserIsInCustomFieldCondition",
     *        "configuration": {
     *          "allowUserInField": false,
     *          "fieldId": "customfield_10010"
     *        }
     *      }
     *
     *  *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
     *  *  `fieldId` The ID of the field containing the list of users.
     *
     * ##### User is in group condition #####
     *
     * A condition that allows users belonging to a group to execute a transition.
     *
     *     {
     *        "type": "UserInGroupCondition",
     *        "configuration": {
     *          "group": "administrators"
     *        }
     *      }
     *
     *  *  `group` The name of the group.
     *
     * ##### User is in group custom field condition #####
     *
     * A condition that allows users belonging to a group specified in a custom field to execute a transition.
     *
     *     {
     *        "type": "InGroupCFCondition",
     *        "configuration": {
     *          "fieldId": "customfield_10012"
     *        }
     *      }
     *
     *  *  `fieldId` The ID of the field. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
     *
     * ##### User is in project role condition #####
     *
     * A condition that allows users with a project role to execute a transition.
     *
     *     {
     *        "type": "InProjectRoleCondition",
     *        "configuration": {
     *          "projectRole": {
     *            "id": "10002"
     *          }
     *        }
     *      }
     *
     *  *  `projectRole` An object containing the ID of a project role.
     *
     * ##### Value field condition #####
     *
     * A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.
     *
     *     {
     *        "type": "ValueFieldCondition",
     *        "configuration": {
     *          "fieldId": "assignee",
     *          "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
     *          "comparisonType": "NUMBER",
     *          "comparator": "="
     *        }
     *      }
     *
     *  *  `fieldId` The ID of a field used in the comparison.
     *  *  `fieldValue` The expected value of the field.
     *  *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
     *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     *
     * **Notes:**
     *
     *  *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
     *  *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
     *  *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.
     *
     * #### Validators ####
     *
     * Validators check that any input made to the transition is valid before the transition is performed.
     *
     * ##### Date field validator #####
     *
     * A validator that compares two dates.
     *
     *     {
     *        "type": "DateFieldValidator",
     *        "configuration": {
     *            "comparator": ">",
     *            "date1": "updated",
     *            "date2": "created",
     *            "expression": "1d",
     *            "includeTime": true
     *          }
     *      }
     *
     *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
     *  *  `date1` The date field to validate. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *      *  `duedate`
     *      *  `created`
     *      *  `updated`
     *      *  `resolutiondate`
     *  *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *      *  `duedate`
     *      *  `created`
     *      *  `updated`
     *      *  `resolutiondate`
     *  *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
     *  *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.
     *
     * ##### Windows date validator #####
     *
     * A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.
     *
     *     {
     *        "type": "WindowsDateValidator",
     *        "configuration": {
     *            "date1": "customfield_10009",
     *            "date2": "created",
     *            "windowsDays": 5
     *          }
     *      }
     *
     *  *  `date1` The date field to validate. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *      *  `duedate`
     *      *  `created`
     *      *  `updated`
     *      *  `resolutiondate`
     *  *  `date2` The reference date. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
     *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
     *      *  `duedate`
     *      *  `created`
     *      *  `updated`
     *      *  `resolutiondate`
     *  *  `windowsDays` A positive integer indicating a number of days.
     *
     * ##### Field required validator #####
     *
     * A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.
     *
     *     {
     *          "type": "FieldRequiredValidator",
     *          "configuration": {
     *              "ignoreContext": true,
     *              "errorMessage": "Hey",
     *              "fieldIds": [
     *                  "versions",
     *                  "customfield_10037",
     *                  "customfield_10003"
     *              ]
     *          }
     *      }
     *
     *  *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
     *  *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
     *  *  `fieldIds` The list of fields to validate.
     *
     * ##### Field changed validator #####
     *
     * A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.
     *
     *     {
     *          "type": "FieldChangedValidator",
     *          "configuration": {
     *              "fieldId": "comment",
     *              "errorMessage": "Hey",
     *              "exemptedGroups": [
     *                  "administrators",
     *                  "atlassian-addons-admin"
     *              ]
     *          }
     *      }
     *
     *  *  `fieldId` The ID of a field.
     *  *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
     *  *  `exemptedGroups` OPTIONAL. The list of groups.
     *
     * ##### Field has single value validator #####
     *
     * A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.
     *
     *     {
     *          "type": "FieldHasSingleValueValidator",
     *          "configuration": {
     *              "fieldId": "attachment,
     *              "excludeSubtasks": true
     *          }
     *      }
     *
     *  *  `fieldId` The ID of a field.
     *  *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.
     *
     * ##### Parent status validator #####
     *
     * A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.
     *
     *     {
     *          "type": "ParentStatusValidator",
     *          "configuration": {
     *              "parentStatuses": [
     *                  {
     *                    "id":"1"
     *                  },
     *                  {
     *                    "id":"2"
     *                  }
     *              ]
     *          }
     *      }
     *
     *  *  `parentStatus` The list of required parent issue statuses.
     *
     * ##### Permission validator #####
     *
     * A validator that checks the user has a permission.
     *
     *     {
     *        "type": "PermissionValidator",
     *        "configuration": {
     *            "permissionKey": "ADMINISTER_PROJECTS"
     *        }
     *      }
     *
     *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     *
     * ##### Previous status validator #####
     *
     * A validator that checks if the issue has held a status.
     *
     *     {
     *        "type": "PreviousStatusValidator",
     *        "configuration": {
     *            "mostRecentStatusOnly": false,
     *            "previousStatus": {
     *                "id": "15"
     *            }
     *        }
     *      }
     *
     *  *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
     *  *  `previousStatus` An object containing the ID of an issue status.
     *
     * ##### Regular expression validator #####
     *
     * A validator that checks the content of a field against a regular expression.
     *
     *     {
     *        "type": "RegexpFieldValidator",
     *        "configuration": {
     *            "regExp": "[0-9]",
     *            "fieldId": "customfield_10029"
     *        }
     *      }
     *
     *  *  `regExp`A regular expression.
     *  *  `fieldId` The ID of a field. Allowed field types:
     *
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
     *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
     *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
     *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
     *      *  `description`
     *      *  `summary`
     *
     * ##### User permission validator #####
     *
     * A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.
     *
     *     {
     *          "type": "UserPermissionValidator",
     *          "configuration": {
     *              "permissionKey": "BROWSE_PROJECTS",
     *              "nullAllowed": false,
     *              "username": "TestUser"
     *          }
     *      }
     *
     *  *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
     *  *  `nullAllowed` If `true`, allows the transition when `username` is empty.
     *  *  `username` The username to validate against the `permissionKey`.
     *
     * #### Post functions ####
     *
     * Post functions carry out any additional processing required after a Jira workflow transition is executed.
     *
     * ##### Fire issue event function #####
     *
     * A post function that fires an event that is processed by the listeners.
     *
     *     {
     *        "type": "FireIssueEventFunction",
     *        "configuration": {
     *          "event": {
     *            "id":"1"
     *          }
     *        }
     *      }
     *
     * **Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.
     *
     *  *  `event` An object containing the ID of the issue event.
     *
     * ##### Update issue status #####
     *
     * A post function that sets issue status to the linked status of the destination workflow status.
     *
     *     {
     *        "type": "UpdateIssueStatusFunction"
     *      }
     *
     * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
     *
     * ##### Create comment #####
     *
     * A post function that adds a comment entered during the transition to an issue.
     *
     *     {
     *        "type": "CreateCommentFunction"
     *      }
     *
     * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
     *
     * ##### Store issue #####
     *
     * A post function that stores updates to an issue.
     *
     *     {
     *        "type": "IssueStoreFunction"
     *      }
     *
     * **Note:** This post function can only be added to the initial transition and can only be added once.
     *
     * ##### Assign to current user function #####
     *
     * A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.
     *
     *     {
     *          "type": "AssignToCurrentUserFunction"
     *      }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Assign to lead function #####
     *
     * A post function that assigns the issue to the project or component lead developer.
     *
     *     {
     *          "type": "AssignToLeadFunction"
     *      }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Assign to reporter function #####
     *
     * A post function that assigns the issue to the reporter.
     *
     *     {
     *          "type": "AssignToReporterFunction"
     *      }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Clear field value function #####
     *
     * A post function that clears the value from a field.
     *
     *     {
     *        "type": "ClearFieldValuePostFunction",
     *        "configuration": {
     *          "fieldId": "assignee"
     *        }
     *      }
     *
     *  *  `fieldId` The ID of the field.
     *
     * ##### Copy value from other field function #####
     *
     * A post function that copies the value of one field to another, either within an issue or from parent to subtask.
     *
     *     {
     *        "type": "CopyValueFromOtherFieldPostFunction",
     *        "configuration": {
     *          "sourceFieldId": "assignee",
     *          "destinationFieldId": "creator",
     *          "copyType": "same"
     *        }
     *      }
     *
     *  *  `sourceFieldId` The ID of the source field.
     *  *  `destinationFieldId` The ID of the destination field.
     *  *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.
     *
     * ##### Create Crucible review workflow function (deprecated) #####
     *
     * A post function that creates a Crucible review for all unreviewed code for the issue.
     *
     *     {
     *          "type": "CreateCrucibleReviewWorkflowFunction"
     *      }
     *
     * **Note:** This post function can be included once in a transition.
     *
     * ##### Set issue security level based on user's project role function #####
     *
     * A post function that sets the issue's security level if the current user has a project role.
     *
     *     {
     *        "type": "SetIssueSecurityFromRoleFunction",
     *        "configuration": {
     *          "projectRole": {
     *              "id":"10002"
     *          },
     *          "issueSecurityLevel": {
     *              "id":"10000"
     *          }
     *        }
     *      }
     *
     *  *  `projectRole` An object containing the ID of the project role.
     *  *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.
     *
     * ##### Trigger a webhook function #####
     *
     * A post function that triggers a webhook.
     *
     *     {
     *        "type": "TriggerWebhookFunction",
     *        "configuration": {
     *          "webhook": {
     *            "id": "1"
     *          }
     *        }
     *      }
     *
     *  *  `webhook` An object containing the ID of the webhook listener to trigger.
     *
     * ##### Update issue custom field function #####
     *
     * A post function that updates the content of an issue custom field.
     *
     *     {
     *        "type": "UpdateIssueCustomFieldPostFunction",
     *        "configuration": {
     *          "mode": "append",
     *          "fieldId": "customfield_10003",
     *          "fieldValue": "yikes"
     *        }
     *      }
     *
     *  *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
     *  *  `fieldId` The ID of the field.
     *  *  `fieldValue` The update content.
     *
     * ##### Update issue field function #####
     *
     * A post function that updates a simple issue field.
     *
     *     {
     *        "type": "UpdateIssueFieldFunction",
     *        "configuration": {
     *          "fieldId": "assignee",
     *          "fieldValue": "5f0c277e70b8a90025a00776"
     *        }
     *      }
     *
     *  *  `fieldId` The ID of the field. Allowed field types:
     *
     *      *  `assignee`
     *      *  `description`
     *      *  `environment`
     *      *  `priority`
     *      *  `resolution`
     *      *  `summary`
     *      *  `timeoriginalestimate`
     *      *  `timeestimate`
     *      *  `timespent`
     *  *  `fieldValue` The update value.
     *  *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
     *
     *      *  an account ID.
     *      *  `automatic`.
     *      *  a blank string, which sets the value to `unassigned`.
     *
     * #### Connect rules ####
     *
     * Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.
     *
     *     {
     *        "type": "appKey__moduleKey",
     *        "configuration": {
     *          "value":"{\"isValid\":\"true\"}"
     *        }
     *      }
     *
     *  *  `type` A Connect rule key in a form of `appKey__moduleKey`.
     *  *  `value` The stringified JSON configuration of a Connect rule.
     *
     * #### Forge rules ####
     *
     * Forge transition rules are not yet supported.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createWorkflow"];
  };
  "/rest/api/3/workflow/rule/config": {
    /**
     * Get workflow transition rule configurations
     * @description Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
     *
     *  *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
     *  *  matching one or more transition rule keys.
     *
     * Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.
     *
     * Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     */
    get: operations["getWorkflowTransitionRuleConfigurations"];
    /**
     * Update workflow transition rule configurations
     * @description Updates configuration of workflow transition rules. The following rule types are supported:
     *
     *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
     *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
     *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
     *
     * Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.
     *
     * To assist with app migration, this operation can be used to:
     *
     *  *  Disable a rule.
     *  *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
     *
     * Rules are enabled if the `disabled` parameter is not provided.
     *
     * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
     */
    put: operations["updateWorkflowTransitionRuleConfigurations"];
  };
  "/rest/api/3/workflow/rule/config/delete": {
    /**
     * Delete workflow transition rule configurations
     * @description Deletes workflow transition rules from one or more workflows. These rule types are supported:
     *
     *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
     *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
     *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
     *
     * Only rules created by the calling Connect app can be deleted.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can use this operation.
     */
    put: operations["deleteWorkflowTransitionRuleConfigurations"];
  };
  "/rest/api/3/workflow/search": {
    /**
     * Get workflows paginated
     * @description Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
     *
     * This operation does not return next-gen workflows.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowsPaginated"];
  };
  "/rest/api/3/workflow/transitions/{transitionId}/properties": {
    /**
     * Get workflow transition properties
     * @description Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowTransitionProperties"];
    /**
     * Update workflow transition property
     * @description Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateWorkflowTransitionProperty"];
    /**
     * Create workflow transition property
     * @description Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createWorkflowTransitionProperty"];
    /**
     * Delete workflow transition property
     * @description Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowTransitionProperty"];
  };
  "/rest/api/3/workflow/{entityId}": {
    /**
     * Delete inactive workflow
     * @description Deletes a workflow.
     *
     * The workflow cannot be deleted if it is:
     *
     *  *  an active workflow.
     *  *  a system workflow.
     *  *  associated with any workflow scheme.
     *  *  associated with any draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteInactiveWorkflow"];
  };
  "/rest/api/3/workflows": {
    /**
     * Bulk get workflows
     * @description Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* global permission to access all, including project-scoped, workflows
     *  *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows
     */
    post: operations["readWorkflows"];
  };
  "/rest/api/3/workflows/capabilities": {
    /**
     * Get available workflow capabilities
     * @description Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to access all, including global-scoped, workflows
     *  *  *Administer projects* project permissions to access project-scoped workflows
     *
     * The current list of Atlassian-provided rules:
     *
     * #### Validators ####
     *
     * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
     *
     * ##### Permission validator #####
     *
     * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
     *
     *     {
     *        "ruleKey": "system:check-permission-validator",
     *        "parameters": {
     *          "permissionKey": "ADMINISTER_PROJECTS"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
     *
     * ##### Parent or child blocking validator #####
     *
     * A validator to block the child issue\\u2019s transition depending on the parent issue\\u2019s status.
     *
     *     {
     *        "ruleKey" : "system:parent-or-child-blocking-validator"
     *        "parameters" : {
     *          "blocker" : "PARENT"
     *          "statusIds" : "1,2,3"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `blocker` currently only supports `PARENT`.
     *  *  `statusIds` a comma-separated list of status IDs.
     *
     * ##### Previous status validator #####
     *
     * A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.
     *
     *     {
     *        "ruleKey": "system:previous-status-validator",
     *        "parameters": {
     *          "previousStatusIds": "10014",
     *          "mostRecentStatusOnly": "true"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
     *  *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
     *
     * ##### Validate a field value #####
     *
     * A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.
     *
     * Depending on the rule type, the result will vary:
     *
     * ###### Field required ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "fieldRequired",
     *          "fieldsRequired": "assignee",
     *          "ignoreContext": "true",
     *          "errorMessage": "An assignee must be set!"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
     *  *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
     *  *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
     *
     * ###### Field changed ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "fieldChanged",
     *          "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
     *          "fieldKey": "versions",
     *          "errorMessage": "Affect versions must be modified before transition"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
     *  *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
     *  *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
     *
     * ###### Field has a single value ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "fieldHasSingleValue",
     *          "fieldKey": "created",
     *          "excludeSubtasks": "true"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
     *  *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.
     *
     * ###### Field matches regular expression ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "fieldMatchesRegularExpression",
     *          "regexp": "[0-9]{4}",
     *          "fieldKey": "description"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `regexp` the regular expression used to validate the field\\u2019s content.
     *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
     *
     * ###### Date field comparison ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "dateFieldComparison",
     *          "date1FieldKey": "duedate",
     *          "date2FieldKey": "customfield_10054",
     *          "includeTime": "true",
     *          "conditionSelected": ">="
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
     *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
     *  *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
     *  *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     *
     * ###### Date range comparison ######
     *
     *     {
     *        "ruleKey": "system:validate-field-value",
     *        "parameters": {
     *          "ruleType": "windowDateComparison",
     *          "date1FieldKey": "customfield_10009",
     *          "date2FieldKey": "customfield_10054",
     *          "numberOfDays": "3"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
     *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
     *  *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.
     *
     * This rule is composed by aggregating the following legacy rules:
     *
     *  *  FieldRequiredValidator
     *  *  FieldChangedValidator
     *  *  FieldHasSingleValueValidator
     *  *  RegexpFieldValidator
     *  *  DateFieldValidator
     *  *  WindowsDateValidator
     *
     * ##### Proforma: Forms attached validator #####
     *
     * Validates that one or more forms are attached to the issue.
     *
     *     {
     *        "ruleKey" : "system:proforma-forms-attached"
     *        "parameters" : {}
     *      }
     *
     * ##### Proforma: Forms submitted validator #####
     *
     * Validates that all forms attached to the issue have been submitted.
     *
     *     {
     *        "ruleKey" : "system:proforma-forms-submitted"
     *        "parameters" : {}
     *      }
     *
     * #### Conditions ####
     *
     * Conditions enable workflow rules that govern whether a transition can execute.
     *
     * ##### Check field value #####
     *
     * A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.
     *
     *     {
     *        "ruleKey": "system:check-field-value",
     *        "parameters": {
     *          "fieldId": "description",
     *          "fieldValue": "[\"Done\"]",
     *          "comparator": "=",
     *          "comparisonType": "STRING"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
     *  *  `fieldValue` the list of values to check against the field\\u2019s value.
     *  *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
     *  *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.
     *
     * ##### Restrict issue transition #####
     *
     * This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.
     *
     *     {
     *        "ruleKey": "system:restrict-issue-transition",
     *        "parameters": {
     *          "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
     *          "roleIds": "10002,10004",
     *          "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
     *          "permissionKeys": "ADMINISTER_PROJECTS",
     *          "groupCustomFields": "customfield_10028",
     *          "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
     *          "denyUserCustomFields": "customfield_10107"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
     *  *  `roleIds` a comma-separated list of role IDs.
     *  *  `groupIds` a comma-separated list of group IDs.
     *  *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
     *  *  `groupCustomFields` a comma-separated list of group custom field IDs.
     *  *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
     *  *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.
     *
     * This rule is composed by aggregating the following legacy rules:
     *
     *  *  AllowOnlyAssignee
     *  *  AllowOnlyReporter
     *  *  InAnyProjectRoleCondition
     *  *  InProjectRoleCondition
     *  *  UserInAnyGroupCondition
     *  *  UserInGroupCondition
     *  *  PermissionCondtion
     *  *  InGroupCFCondition
     *  *  UserIsInCustomFieldCondition
     *
     * ##### Previous status condition #####
     *
     * A condition that evaluates based on an issue's previous status(es) and specific criteria.
     *
     *     {
     *        "ruleKey" : "system:previous-status-condition"
     *        "parameters" : {
     *          "previousStatusIds" : "10004",
     *          "not": "true",
     *          "mostRecentStatusOnly" : "true",
     *          "includeCurrentStatus": "true",
     *          "ignoreLoopTransitions": "true"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
     *  *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
     *  *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
     *  *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
     *  *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.
     *
     * ##### Parent or child blocking condition #####
     *
     * A condition to block the parent\\u2019s issue transition depending on the child\\u2019s issue status.
     *
     *     {
     *        "ruleKey" : "system:parent-or-child-blocking-condition"
     *        "parameters" : {
     *          "blocker" : "CHILD",
     *          "statusIds" : "1,2,3"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `blocker` currently only supports `CHILD`.
     *  *  `statusIds` a comma-separated list of status IDs.
     *
     * ##### Separation of duties #####
     *
     * A condition preventing the user from performing, if the user has already performed a transition on the issue.
     *
     *     {
     *        "ruleKey": "system:separation-of-duties",
     *        "parameters": {
     *          "fromStatusId": "10161",
     *          "toStatusId": "10160"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
     *  *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.
     *
     * ##### Restrict transitions #####
     *
     * A condition preventing all users from transitioning the issue can also optionally include APIs as well.
     *
     *     {
     *        "ruleKey": "system:restrict-from-all-users",
     *        "parameters": {
     *          "restrictMode": "users"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.
     *
     * ##### Jira Service Management block until approved #####
     *
     * Block an issue transition until approval. Note: This is only supported in team-managed projects.
     *
     *     {
     *        "ruleKey": "system:jsd-approvals-block-until-approved",
     *        "parameters": {
     *          "approvalConfigurationJson": "{"statusExternalUuid...}"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
     *
     * ##### Jira Service Management block until rejected #####
     *
     * Block an issue transition until rejected. Note: This is only supported in team-managed projects.
     *
     *     {
     *        "ruleKey": "system:jsd-approvals-block-until-rejected",
     *        "parameters": {
     *          "approvalConfigurationJson": "{"statusExternalUuid...}"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
     *
     * ##### Block in progress approval #####
     *
     * Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.
     *
     *     {
     *        "ruleKey": "system:block-in-progress-approval",
     *        "parameters": {}
     *      }
     *
     * #### Post functions ####
     *
     * Post functions carry out any additional processing required after a workflow transition is executed.
     *
     * ##### Change assignee #####
     *
     * A post function rule that changes the assignee of an issue after a transition.
     *
     *     {
     *        "ruleKey": "system:change-assignee",
     *        "parameters": {
     *          "type": "to-selected-user",
     *          "accountId": "example-account-id"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
     *  *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.
     *
     * ##### Copy field value #####
     *
     * A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.
     *
     *     {
     *        "ruleKey": "system:copy-value-from-other-field",
     *        "parameters": {
     *          "sourceFieldKey": "description",
     *          "targetFieldKey": "components",
     *          "issueSource": "SAME"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
     *  *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
     *  *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.
     *
     * ##### Update field #####
     *
     * A post function that updates or appends a specific field with the given value.
     *
     *     {
     *        "ruleKey": "system:update-field",
     *        "parameters": {
     *          "field": "customfield_10056",
     *          "value": "asdf",
     *          "mode": "append"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
     *  *  `value` the value to update the field with.
     *  *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.
     *
     * ##### Trigger webhook #####
     *
     * A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.
     *
     *     {
     *        "ruleKey": "system:trigger-webhook",
     *        "parameters": {
     *          "webhookId": "1"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `webhookId` the ID of the webhook.
     *
     * #### Screen ####
     *
     * ##### Remind people to update fields #####
     *
     * A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.
     *
     *     {
     *        "ruleKey": "system:remind-people-to-update-fields",
     *        "params": {
     *          "remindingFieldIds": "assignee,customfield_10025",
     *          "remindingMessage": "The message",
     *          "remindingAlwaysAsk": "true"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
     *  *  `remindingMessage` the message to display when prompting the users to update the fields.
     *  *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.
     *
     * ##### Shared transition screen #####
     *
     * A common screen that is shared between transitions in a workflow.
     *
     *     {
     *        "ruleKey": "system:transition-screen",
     *        "params": {
     *          "screenId": "3"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `screenId` the ID of the screen.
     *
     * #### Connect & Forge ####
     *
     * ##### Connect rules #####
     *
     * Validator/Condition/Post function for Connect app.
     *
     *     {
     *        "ruleKey": "connect:expression-validator",
     *        "parameters": {
     *          "appKey": "com.atlassian.app",
     *          "config": "",
     *          "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
     *          "disabled": "false",
     *          "tag": ""
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
     *  *  `appKey` the reference to the Connect app
     *  *  `config` a JSON payload string describing the configuration
     *  *  `id` the ID of the rule
     *  *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
     *  *  `tag` additional tags for the Connect app
     *
     * ##### Forge rules #####
     *
     * Validator/Condition/Post function for Forge app.
     *
     *     {
     *        "ruleKey": "forge:expression-validator",
     *        "parameters": {
     *          "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
     *          "config": "{"searchString":"workflow validator"}",
     *          "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
     *        }
     *      }
     *
     * Parameters:
     *
     *  *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
     *  *  `key` the identifier for the Forge app
     *  *  `config` the persistent stringified JSON configuration for the Forge rule
     *  *  `id` the ID of the Forge rule
     */
    get: operations["workflowCapabilities"];
  };
  "/rest/api/3/workflows/create": {
    /**
     * Bulk create workflows
     * @description Create workflows and related statuses.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
     *  *  *Administer projects* project permissions to create project-scoped workflows
     */
    post: operations["createWorkflows"];
  };
  "/rest/api/3/workflows/create/validation": {
    /**
     * Validate create workflows
     * @description Validate the payload for bulk create workflows.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
     *  *  *Administer projects* project permissions to create project-scoped workflows
     */
    post: operations["validateCreateWorkflows"];
  };
  "/rest/api/3/workflows/update": {
    /**
     * Bulk update workflows
     * @description Update workflows and related statuses.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
     *  *  *Administer projects* project permissions to create project-scoped workflows
     */
    post: operations["updateWorkflows"];
  };
  "/rest/api/3/workflows/update/validation": {
    /**
     * Validate update workflows
     * @description Validate the payload for bulk update workflows.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
     *  *  *Administer projects* project permissions to create project-scoped workflows
     */
    post: operations["validateUpdateWorkflows"];
  };
  "/rest/api/3/workflowscheme": {
    /**
     * Get all workflow schemes
     * @description Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getAllWorkflowSchemes"];
    /**
     * Create workflow scheme
     * @description Creates a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createWorkflowScheme"];
  };
  "/rest/api/3/workflowscheme/project": {
    /**
     * Get workflow scheme project associations
     * @description Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.
     *
     * If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowSchemeProjectAssociations"];
    /**
     * Assign workflow scheme to project
     * @description Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.
     *
     * Workflow schemes can only be assigned to classic projects.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["assignSchemeToProject"];
  };
  "/rest/api/3/workflowscheme/read": {
    /**
     * Bulk get workflow schemes
     * @description Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
     *  *  *Administer projects* project permissions to access project-scoped workflow schemes
     */
    post: operations["readWorkflowSchemes"];
  };
  "/rest/api/3/workflowscheme/update": {
    /**
     * Update workflow scheme
     * @description Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
     *  *  *Administer projects* project permission to update project-scoped workflow schemes.
     */
    post: operations["updateSchemes"];
  };
  "/rest/api/3/workflowscheme/update/mappings": {
    /**
     * Get required status mappings for workflow scheme update
     * @description Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.
     *
     * **[Permissions](#permissions) required:**
     *
     *  *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
     *  *  *Administer projects* project permission to update project-scoped workflow schemes.
     */
    post: operations["updateWorkflowSchemeMappings"];
  };
  "/rest/api/3/workflowscheme/{id}": {
    /**
     * Get workflow scheme
     * @description Returns a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowScheme"];
    /**
     * Classic update workflow scheme
     * @description Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateWorkflowScheme"];
    /**
     * Delete workflow scheme
     * @description Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowScheme"];
  };
  "/rest/api/3/workflowscheme/{id}/createdraft": {
    /**
     * Create draft workflow scheme
     * @description Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["createWorkflowSchemeDraftFromParent"];
  };
  "/rest/api/3/workflowscheme/{id}/default": {
    /**
     * Get default workflow
     * @description Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getDefaultWorkflow"];
    /**
     * Update default workflow
     * @description Sets the default workflow for a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateDefaultWorkflow"];
    /**
     * Delete default workflow
     * @description Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteDefaultWorkflow"];
  };
  "/rest/api/3/workflowscheme/{id}/draft": {
    /**
     * Get draft workflow scheme
     * @description Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.
     * Note that:
     *
     *  *  Only active workflow schemes can have draft workflow schemes.
     *  *  An active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowSchemeDraft"];
    /**
     * Update draft workflow scheme
     * @description Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateWorkflowSchemeDraft"];
    /**
     * Delete draft workflow scheme
     * @description Deletes a draft workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowSchemeDraft"];
  };
  "/rest/api/3/workflowscheme/{id}/draft/default": {
    /**
     * Get draft default workflow
     * @description Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getDraftDefaultWorkflow"];
    /**
     * Update draft default workflow
     * @description Sets the default workflow for a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateDraftDefaultWorkflow"];
    /**
     * Delete draft default workflow
     * @description Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteDraftDefaultWorkflow"];
  };
  "/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}": {
    /**
     * Get workflow for issue type in draft workflow scheme
     * @description Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowSchemeDraftIssueType"];
    /**
     * Set workflow for issue type in draft workflow scheme
     * @description Sets the workflow for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setWorkflowSchemeDraftIssueType"];
    /**
     * Delete workflow for issue type in draft workflow scheme
     * @description Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowSchemeDraftIssueType"];
  };
  "/rest/api/3/workflowscheme/{id}/draft/publish": {
    /**
     * Publish draft workflow scheme
     * @description Publishes a draft workflow scheme.
     *
     * Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.
     *
     * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    post: operations["publishDraftWorkflowScheme"];
  };
  "/rest/api/3/workflowscheme/{id}/draft/workflow": {
    /**
     * Get issue types for workflows in draft workflow scheme
     * @description Returns the workflow-issue type mappings for a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getDraftWorkflow"];
    /**
     * Set issue types for workflow in workflow scheme
     * @description Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateDraftWorkflowMapping"];
    /**
     * Delete issue types for workflow in draft workflow scheme
     * @description Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteDraftWorkflowMapping"];
  };
  "/rest/api/3/workflowscheme/{id}/issuetype/{issueType}": {
    /**
     * Get workflow for issue type in workflow scheme
     * @description Returns the issue type-workflow mapping for an issue type in a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflowSchemeIssueType"];
    /**
     * Set workflow for issue type in workflow scheme
     * @description Sets the workflow for an issue type in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["setWorkflowSchemeIssueType"];
    /**
     * Delete workflow for issue type in workflow scheme
     * @description Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowSchemeIssueType"];
  };
  "/rest/api/3/workflowscheme/{id}/workflow": {
    /**
     * Get issue types for workflows in workflow scheme
     * @description Returns the workflow-issue type mappings for a workflow scheme.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    get: operations["getWorkflow"];
    /**
     * Set issue types for workflow in workflow scheme
     * @description Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    put: operations["updateWorkflowMapping"];
    /**
     * Delete issue types for workflow in workflow scheme
     * @description Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
     *
     * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
     *
     * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     */
    delete: operations["deleteWorkflowMapping"];
  };
  "/rest/api/3/worklog/deleted": {
    /**
     * Get IDs of deleted worklogs
     * @description Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
     *
     * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
     *
     * This resource does not return worklogs deleted during the minute preceding the request.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira.
     */
    get: operations["getIdsOfWorklogsDeletedSince"];
  };
  "/rest/api/3/worklog/list": {
    /**
     * Get worklogs
     * @description Returns worklog details for a list of worklog IDs.
     *
     * The returned list of worklogs is limited to 1000 items.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
     *
     *  *  the worklog is set as *Viewable by All Users*.
     *  *  the user is a member of a project role or group with permission to view the worklog.
     */
    post: operations["getWorklogsForIds"];
  };
  "/rest/api/3/worklog/updated": {
    /**
     * Get IDs of updated worklogs
     * @description Returns a list of IDs and update timestamps for worklogs updated after a date and time.
     *
     * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
     *
     * This resource does not return worklogs updated during the minute preceding the request.
     *
     * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
     *
     *  *  the worklog is set as *Viewable by All Users*.
     *  *  the user is a member of a project role or group with permission to view the worklog.
     */
    get: operations["getIdsOfWorklogsModifiedSince"];
  };
  "/rest/atlassian-connect/1/addons/{addonKey}/properties": {
    /**
     * Get app properties
     * @description Gets all the properties of an app.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     */
    get: operations["AddonPropertiesResource.getAddonProperties_get"];
  };
  "/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}": {
    /**
     * Get app property
     * @description Returns the key and value of an app's property.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     */
    get: operations["AddonPropertiesResource.getAddonProperty_get"];
    /**
     * Set app property
     * @description Sets the value of an app's property. Use this resource to store custom data for your app.
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     */
    put: operations["AddonPropertiesResource.putAddonProperty_put"];
    /**
     * Delete app property
     * @description Deletes an app's property.
     *
     * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
     * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
     */
    delete: operations["AddonPropertiesResource.deleteAddonProperty_delete"];
  };
  "/rest/atlassian-connect/1/app/module/dynamic": {
    /**
     * Get modules
     * @description Returns all modules registered dynamically by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    get: operations["DynamicModulesResource.getModules_get"];
    /**
     * Register modules
     * @description Registers a list of modules.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    post: operations["DynamicModulesResource.registerModules_post"];
    /**
     * Remove modules
     * @description Remove all or a list of modules registered by the calling app.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request.
     */
    delete: operations["DynamicModulesResource.removeModules_delete"];
  };
  "/rest/atlassian-connect/1/migration/field": {
    /**
     * Bulk update custom field value
     * @description Updates the value of a custom field added by Connect apps on one or more issues.
     * The values of up to 200 custom fields can be updated.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request
     */
    put: operations["AppIssueFieldValueUpdateResource.updateIssueFields_put"];
  };
  "/rest/atlassian-connect/1/migration/properties/{entityType}": {
    /**
     * Bulk update entity properties
     * @description Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
     */
    put: operations["MigrationResource.updateEntityPropertiesValue_put"];
  };
  "/rest/atlassian-connect/1/migration/workflow/rule/search": {
    /**
     * Get workflow transition rule configurations
     * @description Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
     */
    post: operations["MigrationResource.workflowRuleSearch_post"];
  };
  "/rest/atlassian-connect/1/service-registry": {
    /**
     * Retrieve the attributes of service registries
     * @description Retrieve the attributes of given service registries.
     *
     * **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting
     */
    get: operations["ServiceRegistryResource.services_get"];
  };
  "/rest/forge/1/app/properties/{propertyKey}": {
    /**
     * Set app property (Forge)
     * @description Sets the value of a Forge app's property.
     * These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
     * through the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).
     *
     * For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).
     *
     * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
     *
     * **[Permissions](#permissions) required:** Only Forge apps can make this request.
     */
    put: operations["putForgeAppProperty"];
    /**
     * Delete app property (Forge)
     * @description Deletes a Forge app's property.
     *
     * **[Permissions](#permissions) required:** Only Forge apps can make this request.
     */
    delete: operations["deleteForgeAppProperty"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ActorInputBean: {
      /** @description The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`. */
      group?: string[];
      /** @description The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`. */
      groupId?: string[];
      /** @description The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`. */
      user?: string[];
    };
    ActorsMap: {
      /** @description The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */
      group?: string[];
      /** @description The ID of the group to add. This parameter cannot be used with the `group` parameter. */
      groupId?: string[];
      /** @description The user account ID of the user to add. */
      user?: string[];
    };
    AddFieldBean: {
      /** @description The ID of the field to add. */
      fieldId: string;
    };
    AddGroupBean: {
      /** @description The name of the group. */
      name: string;
      [key: string]: unknown;
    };
    /** @description Details of notifications which should be added to the notification scheme. */
    AddNotificationsDetails: {
      /** @description The list of notifications which should be added to the notification scheme. */
      notificationSchemeEvents: components["schemas"]["NotificationSchemeEventDetails"][];
      [key: string]: unknown;
    };
    AddSecuritySchemeLevelsRequestBean: {
      /** @description The list of scheme levels which should be added to the security scheme. */
      levels?: components["schemas"]["SecuritySchemeLevelBean"][];
    };
    /** @description Announcement banner configuration. */
    AnnouncementBannerConfiguration: {
      /** @description Hash of the banner data. The client detects updates by comparing hash IDs. */
      hashId?: string;
      /** @description Flag indicating if the announcement banner can be dismissed by the user. */
      isDismissible?: boolean;
      /** @description Flag indicating if the announcement banner is enabled or not. */
      isEnabled?: boolean;
      /** @description The text on the announcement banner. */
      message?: string;
      /**
       * @description Visibility of the announcement banner.
       * @enum {string}
       */
      visibility?: "PUBLIC" | "PRIVATE";
    };
    /** @description Configuration of the announcement banner. */
    AnnouncementBannerConfigurationUpdate: {
      /** @description Flag indicating if the announcement banner can be dismissed by the user. */
      isDismissible?: boolean;
      /** @description Flag indicating if the announcement banner is enabled or not. */
      isEnabled?: boolean;
      /** @description The text on the announcement banner. */
      message?: string;
      /** @description Visibility of the announcement banner. Can be public or private. */
      visibility?: string;
    };
    /** @description A workflow transition rule. */
    AppWorkflowTransitionRule: {
      configuration: components["schemas"]["RuleConfiguration"];
      /** @description The ID of the transition rule. */
      id: string;
      /** @description The key of the rule, as defined in the Connect or the Forge app descriptor. */
      key: string;
      transition?: components["schemas"]["WorkflowTransition"];
    };
    /** @description The application the linked item is in. */
    Application: {
      /** @description The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last. */
      name?: string;
      /** @description The name-spaced type of the application, used by registered rendering apps. */
      type?: string;
      [key: string]: unknown;
    };
    /** @description Details of an application property. */
    ApplicationProperty: {
      /** @description The allowed values, if applicable. */
      allowedValues?: string[];
      /** @description The default value of the application property. */
      defaultValue?: string;
      /** @description The description of the application property. */
      desc?: string;
      example?: string;
      /** @description The ID of the application property. The ID and key are the same. */
      id?: string;
      /** @description The key of the application property. The ID and key are the same. */
      key?: string;
      /** @description The name of the application property. */
      name?: string;
      /** @description The data type of the application property. */
      type?: string;
      /** @description The new value. */
      value?: string;
    };
    /** @description Details of an application role. */
    ApplicationRole: {
      /** @description The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups. */
      defaultGroups?: string[];
      /** @description The groups that are granted default access for this application role. */
      defaultGroupsDetails?: components["schemas"]["GroupName"][];
      /** @description Deprecated. */
      defined?: boolean;
      /** @description The groups associated with the application role. */
      groupDetails?: components["schemas"]["GroupName"][];
      /** @description The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups. */
      groups?: string[];
      hasUnlimitedSeats?: boolean;
      /** @description The key of the application role. */
      key?: string;
      /** @description The display name of the application role. */
      name?: string;
      /**
       * Format: int32
       * @description The maximum count of users on your license.
       */
      numberOfSeats?: number;
      /** @description Indicates if the application role belongs to Jira platform (`jira-core`). */
      platform?: boolean;
      /**
       * Format: int32
       * @description The count of users remaining on your license.
       */
      remainingSeats?: number;
      /** @description Determines whether this application role should be selected by default on user creation. */
      selectedByDefault?: boolean;
      /**
       * Format: int32
       * @description The number of users counting against your license.
       */
      userCount?: number;
      /** @description The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license. */
      userCountDescription?: string;
    };
    ArchiveIssueAsyncRequest: {
      jql?: string;
    };
    /** @description Details of a filter for exporting archived issues. */
    ArchivedIssuesFilterRequest: {
      /** @description List archived issues archived by a specified account ID. */
      archivedBy?: string[];
      archivedDateRange?: components["schemas"]["DateRangeFilterRequest"];
      /** @description List archived issues with a specified issue type ID. */
      issueTypes?: string[];
      /** @description List archived issues with a specified project key. */
      projects?: string[];
      /** @description List archived issues where the reporter is a specified account ID. */
      reporters?: string[];
      [key: string]: unknown;
    };
    /** @description Details of a field configuration to issue type mappings. */
    AssociateFieldConfigurationsWithIssueTypesRequest: {
      /** @description Field configuration to issue type mappings. */
      mappings: components["schemas"]["FieldConfigurationToIssueTypeMapping"][];
    };
    /** @description Issue security scheme, project, and remapping details. */
    AssociateSecuritySchemeWithProjectDetails: {
      /** @description The list of scheme levels which should be remapped to new levels of the issue security scheme. */
      oldToNewSecurityLevelMappings?: components["schemas"]["OldToNewSecurityLevelMappingsBean"][];
      /** @description The ID of the project. */
      projectId: string;
      /** @description The ID of the issue security scheme. Providing null will clear the association with the issue security scheme. */
      schemeId: string;
    };
    /** @description Details of an item associated with the changed record. */
    AssociatedItemBean: {
      /** @description The ID of the associated record. */
      id?: string;
      /** @description The name of the associated record. */
      name?: string;
      /** @description The ID of the associated parent record. */
      parentId?: string;
      /** @description The name of the associated parent record. */
      parentName?: string;
      /** @description The type of the associated record. */
      typeName?: string;
    };
    /** @description Details about an attachment. */
    Attachment: {
      /** @description Details of the user who added the attachment. */
      author?: components["schemas"]["UserDetails"];
      /** @description The content of the attachment. */
      content?: string;
      /**
       * Format: date-time
       * @description The datetime the attachment was created.
       */
      created?: string;
      /** @description The file name of the attachment. */
      filename?: string;
      /** @description The ID of the attachment. */
      id?: string;
      /** @description The MIME type of the attachment. */
      mimeType?: string;
      /** @description The URL of the attachment details response. */
      self?: string;
      /**
       * Format: int64
       * @description The size of the attachment.
       */
      size?: number;
      /** @description The URL of a thumbnail representing the attachment. */
      thumbnail?: string;
      [key: string]: unknown;
    };
    AttachmentArchive: {
      entries?: components["schemas"]["AttachmentArchiveEntry"][];
      moreAvailable?: boolean;
      /** Format: int32 */
      totalEntryCount?: number;
      /** Format: int32 */
      totalNumberOfEntriesAvailable?: number;
    };
    AttachmentArchiveEntry: {
      abbreviatedName?: string;
      /** Format: int64 */
      entryIndex?: number;
      mediaType?: string;
      name?: string;
      /** Format: int64 */
      size?: number;
    };
    AttachmentArchiveImpl: {
      /** @description The list of the items included in the archive. */
      entries?: components["schemas"]["AttachmentArchiveEntry"][];
      /**
       * Format: int32
       * @description The number of items in the archive.
       */
      totalEntryCount?: number;
    };
    /** @description Metadata for an item in an attachment archive. */
    AttachmentArchiveItemReadable: {
      /**
       * Format: int64
       * @description The position of the item within the archive.
       */
      index?: number;
      /** @description The label for the archive item. */
      label?: string;
      /** @description The MIME type of the archive item. */
      mediaType?: string;
      /** @description The path of the archive item. */
      path?: string;
      /** @description The size of the archive item. */
      size?: string;
    };
    /** @description Metadata for an archive (for example a zip) and its contents. */
    AttachmentArchiveMetadataReadable: {
      /** @description The list of the items included in the archive. */
      entries?: readonly components["schemas"]["AttachmentArchiveItemReadable"][];
      /**
       * Format: int64
       * @description The ID of the attachment.
       */
      id?: number;
      /** @description The MIME type of the attachment. */
      mediaType?: string;
      /** @description The name of the archive file. */
      name?: string;
      /**
       * Format: int64
       * @description The number of items included in the archive.
       */
      totalEntryCount?: number;
    };
    /** @description Metadata for an issue attachment. */
    AttachmentMetadata: {
      /** @description Details of the user who attached the file. */
      author?: components["schemas"]["User"];
      /** @description The URL of the attachment. */
      content?: string;
      /**
       * Format: date-time
       * @description The datetime the attachment was created.
       */
      created?: string;
      /** @description The name of the attachment file. */
      filename?: string;
      /**
       * Format: int64
       * @description The ID of the attachment.
       */
      id?: number;
      /** @description The MIME type of the attachment. */
      mimeType?: string;
      /** @description Additional properties of the attachment. */
      properties?: {
        [key: string]: unknown;
      };
      /**
       * Format: uri
       * @description The URL of the attachment metadata details.
       */
      self?: string;
      /**
       * Format: int64
       * @description The size of the attachment.
       */
      size?: number;
      /** @description The URL of a thumbnail representing the attachment. */
      thumbnail?: string;
    };
    /** @description Details of the instance's attachment settings. */
    AttachmentSettings: {
      /** @description Whether the ability to add attachments is enabled. */
      enabled?: boolean;
      /**
       * Format: int64
       * @description The maximum size of attachments permitted, in bytes.
       */
      uploadLimit?: number;
    };
    /** @description An audit record. */
    AuditRecordBean: {
      /** @description The list of items associated with the changed record. */
      associatedItems?: readonly components["schemas"]["AssociatedItemBean"][];
      /** @description Deprecated, use `authorAccountId` instead. The key of the user who created the audit record. */
      authorKey?: string;
      /** @description The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM). */
      category?: string;
      /** @description The list of values changed in the record event. */
      changedValues?: readonly components["schemas"]["ChangedValueBean"][];
      /**
       * Format: date-time
       * @description The date and time on which the audit record was created.
       */
      created?: string;
      /** @description The description of the audit record. */
      description?: string;
      /** @description The event the audit record originated from. */
      eventSource?: string;
      /**
       * Format: int64
       * @description The ID of the audit record.
       */
      id?: number;
      objectItem?: components["schemas"]["AssociatedItemBean"];
      /** @description The URL of the computer where the creation of the audit record was initiated. */
      remoteAddress?: string;
      /** @description The summary of the audit record. */
      summary?: string;
    };
    /** @description Container for a list of audit records. */
    AuditRecords: {
      /**
       * Format: int32
       * @description The requested or default limit on the number of audit items to be returned.
       */
      limit?: number;
      /**
       * Format: int32
       * @description The number of audit items skipped before the first item in this list.
       */
      offset?: number;
      /** @description The list of audit items. */
      records?: readonly components["schemas"]["AuditRecordBean"][];
      /**
       * Format: int64
       * @description The total number of audit items returned.
       */
      total?: number;
    };
    /** @description A field auto-complete suggestion. */
    AutoCompleteSuggestion: {
      /** @description The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag. */
      displayName?: string;
      /** @description The value of a suggested item. */
      value?: string;
    };
    /** @description The results from a JQL query. */
    AutoCompleteSuggestions: {
      /** @description The list of suggested item. */
      results?: components["schemas"]["AutoCompleteSuggestion"][];
    };
    /** @description The details of the available dashboard gadget. */
    AvailableDashboardGadget: {
      /** @description The module key of the gadget type. */
      moduleKey?: string;
      /** @description The title of the gadget. */
      title: string;
      /** @description The URI of the gadget type. */
      uri?: string;
    };
    /** @description The list of available gadgets. */
    AvailableDashboardGadgetsResponse: {
      /** @description The list of available gadgets. */
      gadgets: readonly components["schemas"]["AvailableDashboardGadget"][];
    };
    /** @description The Connect provided ecosystem rules available. */
    AvailableWorkflowConnectRule: {
      /** @description The add-on providing the rule. */
      addonKey?: string;
      /** @description The URL creation path segment defined in the Connect module. */
      createUrl?: string;
      /** @description The rule description. */
      description?: string;
      /** @description The URL edit path segment defined in the Connect module. */
      editUrl?: string;
      /** @description The module providing the rule. */
      moduleKey?: string;
      /** @description The rule name. */
      name?: string;
      /** @description The rule key. */
      ruleKey?: string;
      /**
       * @description The rule type.
       * @enum {string}
       */
      ruleType?: "Condition" | "Validator" | "Function" | "Screen";
      /** @description The URL view path segment defined in the Connect module. */
      viewUrl?: string;
    };
    /** @description The Forge provided ecosystem rules available. */
    AvailableWorkflowForgeRule: {
      /** @description The rule description. */
      description?: string;
      /** @description The unique ARI of the forge rule type. */
      id?: string;
      /** @description The rule name. */
      name?: string;
      /** @description The rule key. */
      ruleKey?: string;
      /**
       * @description The rule type.
       * @enum {string}
       */
      ruleType?: "Condition" | "Validator" | "Function" | "Screen";
    };
    /** @description The Atlassian provided system rules available. */
    AvailableWorkflowSystemRule: {
      /** @description The rule description. */
      description: string;
      /** @description List of rules that conflict with this one. */
      incompatibleRuleKeys: string[];
      /** @description Whether the rule can be added added to an initial transition. */
      isAvailableForInitialTransition: boolean;
      /** @description Whether the rule is visible. */
      isVisible: boolean;
      /** @description The rule name. */
      name: string;
      /** @description The rule key. */
      ruleKey: string;
      /**
       * @description The rule type.
       * @enum {string}
       */
      ruleType: "Condition" | "Validator" | "Function" | "Screen";
    };
    /** @description The list of available trigger types. */
    AvailableWorkflowTriggerTypes: {
      /** @description The description of the trigger rule. */
      description?: string;
      /** @description The name of the trigger rule. */
      name?: string;
      /** @description The type identifier of trigger rule. */
      type?: string;
    };
    /** @description The trigger rules available. */
    AvailableWorkflowTriggers: {
      /** @description The list of available trigger types. */
      availableTypes: components["schemas"]["AvailableWorkflowTriggerTypes"][];
      /** @description The rule key of the rule. */
      ruleKey: string;
    };
    /** @description Details of an avatar. */
    Avatar: {
      /** @description The file name of the avatar icon. Returned for system avatars. */
      fileName?: string;
      /** @description The ID of the avatar. */
      id: string;
      /** @description Whether the avatar can be deleted. */
      isDeletable?: boolean;
      /** @description Whether the avatar is used in Jira. For example, shown as a project's avatar. */
      isSelected?: boolean;
      /** @description Whether the avatar is a system avatar. */
      isSystemAvatar?: boolean;
      /** @description The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user. */
      owner?: string;
      /** @description The list of avatar icon URLs. */
      urls?: {
        [key: string]: string;
      };
      [key: string]: unknown;
    };
    AvatarUrlsBean: {
      /**
       * Format: uri
       * @description The URL of the item's 16x16 pixel avatar.
       */
      "16x16"?: string;
      /**
       * Format: uri
       * @description The URL of the item's 24x24 pixel avatar.
       */
      "24x24"?: string;
      /**
       * Format: uri
       * @description The URL of the item's 32x32 pixel avatar.
       */
      "32x32"?: string;
      /**
       * Format: uri
       * @description The URL of the item's 48x48 pixel avatar.
       */
      "48x48"?: string;
    };
    /** @description Details about system and custom avatars. */
    Avatars: {
      /** @description Custom avatars list. */
      custom?: readonly components["schemas"]["Avatar"][];
      /** @description System avatars list. */
      system?: readonly components["schemas"]["Avatar"][];
    };
    /** @description Details for changing owners of shareable entities */
    BulkChangeOwnerDetails: {
      /** @description Whether the name is fixed automatically if it's duplicated after changing owner. */
      autofixName: boolean;
      /** @description The account id of the new owner. */
      newOwner: string;
    };
    /** @description Details of the options to create for a custom field. */
    BulkCustomFieldOptionCreateRequest: {
      /** @description Details of options to create. */
      options?: components["schemas"]["CustomFieldOptionCreate"][];
    };
    /** @description Details of the options to update for a custom field. */
    BulkCustomFieldOptionUpdateRequest: {
      /** @description Details of the options to update. */
      options?: components["schemas"]["CustomFieldOptionUpdate"][];
    };
    /** @description Errors of bulk edit action. */
    BulkEditActionError: {
      /** @description The error messages. */
      errorMessages: string[];
      /** @description The errors. */
      errors: {
        [key: string]: string;
      };
    };
    /** @description Bulk Edit Get Fields Response. */
    BulkEditGetFields: {
      /** @description The end cursor for use in pagination. */
      endingBefore?: string;
      /** @description List of all the fields */
      fields?: readonly components["schemas"]["IssueBulkEditField"][];
      /** @description The start cursor for use in pagination. */
      startingAfter?: string;
    };
    /** @description Details of a request to bulk edit shareable entity. */
    BulkEditShareableEntityRequest: {
      /**
       * @description Allowed action for bulk edit shareable entity
       * @enum {string}
       */
      action: "changeOwner" | "changePermission" | "addPermission" | "removePermission";
      /** @description The details of change owner action. */
      changeOwnerDetails?: components["schemas"]["BulkChangeOwnerDetails"];
      /** @description The id list of shareable entities to be changed. */
      entityIds: number[];
      /** @description Whether the actions are executed by users with Administer Jira global permission. */
      extendAdminPermissions?: boolean;
      /** @description The permission details to be changed. */
      permissionDetails?: components["schemas"]["PermissionDetails"];
    };
    /** @description Details of a request to bulk edit shareable entity. */
    BulkEditShareableEntityResponse: {
      /**
       * @description Allowed action for bulk edit shareable entity
       * @enum {string}
       */
      action: "changeOwner" | "changePermission" | "addPermission" | "removePermission";
      /** @description The mapping dashboard id to errors if any. */
      entityErrors?: {
        [key: string]: components["schemas"]["BulkEditActionError"];
      };
    };
    /** @description A container for the watch status of a list of issues. */
    BulkIssueIsWatching: {
      /** @description The map of issue ID to boolean watch status. */
      issuesIsWatching?: {
        [key: string]: boolean;
      };
    };
    /** @description Bulk issue property update request details. */
    BulkIssuePropertyUpdateRequest: {
      /** @description EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored. */
      expression?: string;
      /** @description The bulk operation filter. */
      filter?: components["schemas"]["IssueFilterForBulkPropertySet"];
      /** @description The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters. */
      value?: unknown;
    };
    BulkOperationErrorResponse: {
      errors?: components["schemas"]["ErrorMessage"][];
    };
    BulkOperationErrorResult: {
      elementErrors?: components["schemas"]["ErrorCollection"];
      /** Format: int32 */
      failedElementNumber?: number;
      /** Format: int32 */
      status?: number;
    };
    BulkOperationProgress: {
      /**
       * Format: date-time
       * @description A timestamp of when the task was submitted.
       */
      created?: string;
      /** @description Map of issue IDs for which the operation failed and that the user has permission to view, to their one or more reasons for failure. These reasons are open-ended text descriptions of the error and are not selected from a predefined list of standard reasons. */
      failedAccessibleIssues?: {
        [key: string]: string[];
      };
      /**
       * Format: int32
       * @description The number of issues that are either invalid or issues that the user doesn't have permission to view, regardless of the success or failure of the operation.
       */
      invalidOrInaccessibleIssueCount?: number;
      /** @description List of issue IDs for which the operation was successful and that the user has permission to view. */
      processedAccessibleIssues?: number[];
      /**
       * Format: int64
       * @description Progress of the task as a percentage.
       */
      progressPercent?: number;
      /**
       * Format: date-time
       * @description A timestamp of when the task was started.
       */
      started?: string;
      /**
       * @description The status of the task.
       * @enum {string}
       */
      status?: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
      submittedBy?: components["schemas"]["User"];
      /** @description The ID of the task. */
      taskId?: string;
      /**
       * Format: int32
       * @description The number of issues that the bulk operation was attempted on.
       */
      totalIssueCount?: number;
      /**
       * Format: date-time
       * @description A timestamp of when the task progress was last updated.
       */
      updated?: string;
    };
    /** @description Details of global and project permissions granted to the user. */
    BulkPermissionGrants: {
      /** @description List of permissions granted to the user. */
      globalPermissions: string[];
      /** @description List of project permissions and the projects and issues those permissions provide access to. */
      projectPermissions: components["schemas"]["BulkProjectPermissionGrants"][];
    };
    /** @description Details of global permissions to look up and project permissions with associated projects and issues to look up. */
    BulkPermissionsRequestBean: {
      /** @description The account ID of a user. */
      accountId?: string;
      /** @description Global permissions to look up. */
      globalPermissions?: string[];
      /** @description Project permissions with associated projects and issues to look up. */
      projectPermissions?: components["schemas"]["BulkProjectPermissions"][];
    };
    /** @description List of project permissions and the projects and issues those permissions grant access to. */
    BulkProjectPermissionGrants: {
      /** @description IDs of the issues the user has the permission for. */
      issues: number[];
      /** @description A project permission, */
      permission: string;
      /** @description IDs of the projects the user has the permission for. */
      projects: number[];
    };
    /** @description Details of project permissions and associated issues and projects to look up. */
    BulkProjectPermissions: {
      /** @description List of issue IDs. */
      issues?: number[];
      /** @description List of project permissions. */
      permissions: string[];
      /** @description List of project IDs. */
      projects?: number[];
    };
    /** @description A change item. */
    ChangeDetails: {
      /** @description The name of the field changed. */
      field?: string;
      /** @description The ID of the field changed. */
      fieldId?: string;
      /** @description The type of the field changed. */
      fieldtype?: string;
      /** @description The details of the original value. */
      from?: string;
      /** @description The details of the original value as a string. */
      fromString?: string;
      /** @description The details of the new value. */
      to?: string;
      /** @description The details of the new value as a string. */
      toString?: string;
    };
    /** @description The account ID of the new owner. */
    ChangeFilterOwner: {
      /** @description The account ID of the new owner. */
      accountId: string;
    };
    /** @description Details of names changed in the record event. */
    ChangedValueBean: {
      /** @description The value of the field before the change. */
      changedFrom?: string;
      /** @description The value of the field after the change. */
      changedTo?: string;
      /** @description The name of the field changed. */
      fieldName?: string;
    };
    /** @description Details of a changed worklog. */
    ChangedWorklog: {
      /** @description Details of properties associated with the change. */
      properties?: readonly components["schemas"]["EntityProperty"][];
      /**
       * Format: int64
       * @description The datetime of the change.
       */
      updatedTime?: number;
      /**
       * Format: int64
       * @description The ID of the worklog.
       */
      worklogId?: number;
    };
    /** @description List of changed worklogs. */
    ChangedWorklogs: {
      lastPage?: boolean;
      /**
       * Format: uri
       * @description The URL of the next list of changed worklogs.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of this changed worklogs list.
       */
      self?: string;
      /**
       * Format: int64
       * @description The datetime of the first worklog item in the list.
       */
      since?: number;
      /**
       * Format: int64
       * @description The datetime of the last worklog item in the list.
       */
      until?: number;
      /** @description Changed worklog list. */
      values?: readonly components["schemas"]["ChangedWorklog"][];
    };
    /** @description A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated. */
    Changelog: {
      /** @description The user who made the change. */
      author?: components["schemas"]["UserDetails"];
      /**
       * Format: date-time
       * @description The date on which the change took place.
       */
      created?: string;
      /** @description The history metadata associated with the changed. */
      historyMetadata?: components["schemas"]["HistoryMetadata"];
      /** @description The ID of the changelog. */
      id?: string;
      /** @description The list of items changed. */
      items?: readonly components["schemas"]["ChangeDetails"][];
    };
    /** @description Details of an issue navigator column item. */
    ColumnItem: {
      /** @description The issue navigator column label. */
      label?: string;
      /** @description The issue navigator column value. */
      value?: string;
    };
    ColumnRequestBody: {
      columns?: string[];
    };
    /** @description A comment. */
    Comment: {
      /** @description The ID of the user who created the comment. */
      author?: components["schemas"]["UserDetails"];
      /** @description The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). */
      body?: unknown;
      /**
       * Format: date-time
       * @description The date and time at which the comment was created.
       */
      created?: string;
      /** @description The ID of the comment. */
      id?: string;
      /** @description Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature. */
      jsdAuthorCanSeeRequest?: boolean;
      /** @description Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation. */
      jsdPublic?: boolean;
      /** @description A list of comment properties. Optional on create and update. */
      properties?: components["schemas"]["EntityProperty"][];
      /** @description The rendered version of the comment. */
      renderedBody?: string;
      /** @description The URL of the comment. */
      self?: string;
      /** @description The ID of the user who updated the comment last. */
      updateAuthor?: components["schemas"]["UserDetails"];
      /**
       * Format: date-time
       * @description The date and time at which the comment was updated last.
       */
      updated?: string;
      /** @description The group or role to which this comment is visible. Optional on create and update. */
      visibility?: components["schemas"]["Visibility"];
      [key: string]: unknown;
    };
    /** @description Count of issues assigned to a component. */
    ComponentIssuesCount: {
      /**
       * Format: int64
       * @description The count of issues assigned to a component.
       */
      issueCount?: number;
      /**
       * Format: uri
       * @description The URL for this count of issues for a component.
       */
      self?: string;
    };
    ComponentJsonBean: {
      ari?: string;
      description?: string;
      id?: string;
      metadata?: {
        [key: string]: string;
      };
      name?: string;
      self?: string;
      [key: string]: unknown;
    };
    /** @description Details about a component with a count of the issues it contains. */
    ComponentWithIssueCount: {
      /** @description The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. */
      assignee?: components["schemas"]["User"];
      /**
       * @description The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
       *
       *  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
       *  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
       *  *  `UNASSIGNED` an assignee is not set for issues created with this component.
       *  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
       * @enum {string}
       */
      assigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
      /** @description The description for the component. */
      description?: string;
      /** @description The unique identifier for the component. */
      id?: string;
      /** @description Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. */
      isAssigneeTypeValid?: boolean;
      /**
       * Format: int64
       * @description Count of issues for the component.
       */
      issueCount?: number;
      /** @description The user details for the component's lead user. */
      lead?: components["schemas"]["User"];
      /** @description The name for the component. */
      name?: string;
      /** @description The key of the project to which the component is assigned. */
      project?: string;
      /**
       * Format: int64
       * @description Not used.
       */
      projectId?: number;
      /** @description The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. */
      realAssignee?: components["schemas"]["User"];
      /**
       * @description The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
       *
       *  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
       *  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
       *  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
       *  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
       * @enum {string}
       */
      realAssigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
      /**
       * Format: uri
       * @description The URL for this count of the issues contained in the component.
       */
      self?: string;
    };
    /** @description A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.` */
    CompoundClause: {
      /** @description The list of nested clauses. */
      clauses: components["schemas"]["JqlQueryClause"][];
      /**
       * @description The operator between the clauses.
       * @enum {string}
       */
      operator: "and" | "or" | "not";
    };
    /** @description The conditions group associated with the transition. */
    ConditionGroupConfiguration: ({
      /** @description The nested conditions of the condition group. */
      conditionGroups?: components["schemas"]["ConditionGroupConfiguration"][];
      /** @description The rules for this condition. */
      conditions?: components["schemas"]["WorkflowRuleConfiguration"][];
      /**
       * @description Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
       * @enum {string}
       */
      operation?: "ANY" | "ALL";
    }) | null;
    /** @description The conditions group associated with the transition. */
    ConditionGroupUpdate: ({
      /** @description The nested conditions of the condition group. */
      conditionGroups?: components["schemas"]["ConditionGroupUpdate"][];
      /** @description The rules for this condition. */
      conditions?: components["schemas"]["WorkflowRuleConfiguration"][];
      /**
       * @description Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
       * @enum {string}
       */
      operation: "ANY" | "ALL";
    }) | null;
    /** @description Details about the configuration of Jira. */
    Configuration: {
      /** @description Whether the ability to add attachments to issues is enabled. */
      attachmentsEnabled?: boolean;
      /** @description Whether the ability to link issues is enabled. */
      issueLinkingEnabled?: boolean;
      /** @description Whether the ability to create subtasks for issues is enabled. */
      subTasksEnabled?: boolean;
      /** @description The configuration of time tracking. */
      timeTrackingConfiguration?: components["schemas"]["TimeTrackingConfiguration"];
      /** @description Whether the ability to track time is enabled. This property is deprecated. */
      timeTrackingEnabled?: boolean;
      /** @description Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
      unassignedIssuesAllowed?: boolean;
      /** @description Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
      votingEnabled?: boolean;
      /** @description Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details. */
      watchingEnabled?: boolean;
    };
    /** @description A list of custom field details. */
    ConnectCustomFieldValue: {
      /**
       * @description The type of custom field.
       * @enum {string}
       */
      _type: "StringIssueField" | "NumberIssueField" | "RichTextIssueField" | "SingleSelectIssueField" | "MultiSelectIssueField" | "TextIssueField";
      /** @description The custom field ID. */
      fieldID: number;
      /** @description The issue ID. */
      issueID: number;
      /** @description The value of number type custom field when `_type` is `NumberIssueField`. */
      number?: number;
      /** @description The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`. */
      optionID?: string;
      /** @description The value of richText type custom field when `_type` is `RichTextIssueField`. */
      richText?: string;
      /** @description The value of string type custom field when `_type` is `StringIssueField`. */
      string?: string;
      /** @description The value of of text custom field type when `_type` is `TextIssueField`. */
      text?: string;
    };
    /** @description Details of updates for a custom field. */
    ConnectCustomFieldValues: {
      /** @description The list of custom field update details. */
      updateValueList?: components["schemas"]["ConnectCustomFieldValue"][];
    };
    /**
     * @description A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
     * [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
     * @example {
     *   "description": {
     *     "value": "field with team"
     *   },
     *   "type": "single_select",
     *   "extractions": [
     *     {
     *       "path": "category",
     *       "type": "text",
     *       "name": "categoryName"
     *     }
     *   ],
     *   "name": {
     *     "value": "Team"
     *   },
     *   "key": "team-field"
     * }
     */
    ConnectModule: Record<string, never>;
    /**
     * @example {
     *   "jiraEntityProperties": [
     *     {
     *       "keyConfigurations": [
     *         {
     *           "extractions": [
     *             {
     *               "objectName": "extension",
     *               "type": "text",
     *               "alias": "attachmentExtension"
     *             }
     *           ],
     *           "propertyKey": "attachment"
     *         }
     *       ],
     *       "entityType": "issue",
     *       "name": {
     *         "value": "Attachment Index Document"
     *       },
     *       "key": "dynamic-attachment-entity-property"
     *     }
     *   ],
     *   "jiraIssueFields": [
     *     {
     *       "description": {
     *         "value": "A dynamically added single-select field"
     *       },
     *       "type": "single_select",
     *       "extractions": [
     *         {
     *           "path": "category",
     *           "type": "text",
     *           "name": "categoryName"
     *         }
     *       ],
     *       "name": {
     *         "value": "Dynamic single select"
     *       },
     *       "key": "dynamic-select-field"
     *     }
     *   ]
     * }
     */
    ConnectModules: {
      /**
       * @description A list of app modules in the same format as the `modules` property in the
       * [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
       */
      modules: components["schemas"]["ConnectModule"][];
    };
    /** @description A workflow transition rule. */
    ConnectWorkflowTransitionRule: {
      configuration: components["schemas"]["RuleConfiguration"];
      /**
       * @description The ID of the transition rule.
       * @example 123
       */
      id: string;
      /**
       * @description The key of the rule, as defined in the Connect app descriptor.
       * @example WorkflowKey
       */
      key: string;
      transition?: components["schemas"]["WorkflowTransition"];
    };
    /** @description The list of features on a project. */
    ContainerForProjectFeatures: {
      /** @description The project features. */
      features?: components["schemas"]["ProjectFeature"][];
    };
    /** @description Container for a list of registered webhooks. Webhook details are returned in the same order as the request. */
    ContainerForRegisteredWebhooks: {
      /** @description A list of registered webhooks. */
      webhookRegistrationResult?: components["schemas"]["RegisteredWebhook"][];
    };
    /** @description Container for a list of webhook IDs. */
    ContainerForWebhookIDs: {
      /** @description A list of webhook IDs. */
      webhookIds: number[];
    };
    /** @description A container for a list of workflow schemes together with the projects they are associated with. */
    ContainerOfWorkflowSchemeAssociations: {
      /** @description A list of workflow schemes together with projects they are associated with. */
      values: components["schemas"]["WorkflowSchemeAssociations"][];
    };
    /** @description A context. */
    Context: {
      /**
       * Format: int64
       * @description The ID of the context.
       */
      id?: number;
      /** @description The name of the context. */
      name?: string;
      /** @description The scope of the context. */
      scope?: components["schemas"]["Scope"];
    };
    /** @description The project and issue type mapping with a matching custom field context. */
    ContextForProjectAndIssueType: {
      /** @description The ID of the custom field context. */
      contextId: string;
      /** @description The ID of the issue type. */
      issueTypeId: string;
      /** @description The ID of the project. */
      projectId: string;
    };
    /** @description Details of the contextual configuration for a custom field. */
    ContextualConfiguration: {
      /** @description The field configuration. */
      configuration?: unknown;
      /** @description The ID of the field context the configuration is associated with. */
      fieldContextId: string;
      /** @description The ID of the configuration. */
      id: string;
      /** @description The field value schema. */
      schema?: unknown;
    };
    /** @description The converted JQL queries. */
    ConvertedJQLQueries: {
      /** @description List of queries containing user information that could not be mapped to an existing user */
      queriesWithUnknownUsers?: components["schemas"]["JQLQueryWithUnknownUsers"][];
      /** @description The list of converted query strings with account IDs in place of user identifiers. */
      queryStrings?: string[];
    };
    /** @description The details of a created custom field context. */
    CreateCustomFieldContext: {
      /** @description The description of the context. */
      description?: string;
      /** @description The ID of the context. */
      id?: string;
      /** @description The list of issue types IDs for the context. If the list is empty, the context refers to all issue types. */
      issueTypeIds?: string[];
      /** @description The name of the context. */
      name: string;
      /** @description The list of project IDs associated with the context. If the list is empty, the context is global. */
      projectIds?: string[];
    };
    /** @description Issue security scheme and it's details */
    CreateIssueSecuritySchemeDetails: {
      /** @description The description of the issue security scheme. */
      description?: string;
      /** @description The list of scheme levels which should be added to the security scheme. */
      levels?: components["schemas"]["SecuritySchemeLevelBean"][];
      /** @description The name of the issue security scheme. Must be unique (case-insensitive). */
      name: string;
      [key: string]: unknown;
    };
    /** @description Details of an notification scheme. */
    CreateNotificationSchemeDetails: {
      /** @description The description of the notification scheme. */
      description?: string;
      /** @description The name of the notification scheme. Must be unique (case-insensitive). */
      name: string;
      /** @description The list of notifications which should be added to the notification scheme. */
      notificationSchemeEvents?: components["schemas"]["NotificationSchemeEventDetails"][];
      [key: string]: unknown;
    };
    /** @description Details of an issue priority. */
    CreatePriorityDetails: {
      /** @description The description of the priority. */
      description?: string;
      /**
       * @description The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
       * @enum {string}
       */
      iconUrl?: "/images/icons/priorities/blocker.png" | "/images/icons/priorities/critical.png" | "/images/icons/priorities/high.png" | "/images/icons/priorities/highest.png" | "/images/icons/priorities/low.png" | "/images/icons/priorities/lowest.png" | "/images/icons/priorities/major.png" | "/images/icons/priorities/medium.png" | "/images/icons/priorities/minor.png" | "/images/icons/priorities/trivial.png" | "/images/icons/priorities/blocker_new.png" | "/images/icons/priorities/critical_new.png" | "/images/icons/priorities/high_new.png" | "/images/icons/priorities/highest_new.png" | "/images/icons/priorities/low_new.png" | "/images/icons/priorities/lowest_new.png" | "/images/icons/priorities/major_new.png" | "/images/icons/priorities/medium_new.png" | "/images/icons/priorities/minor_new.png" | "/images/icons/priorities/trivial_new.png";
      /** @description The name of the priority. Must be unique. */
      name: string;
      /** @description The status color of the priority in 3-digit or 6-digit hexadecimal format. */
      statusColor: string;
      [key: string]: unknown;
    };
    /** @description Details of a new priority scheme */
    CreatePrioritySchemeDetails: {
      /**
       * Format: int64
       * @description The ID of the default priority for the priority scheme.
       */
      defaultPriorityId: number;
      /** @description The description of the priority scheme. */
      description?: string;
      /** @description Mappings of issue priorities for issues being migrated in and out of this priority scheme. */
      mappings?: components["schemas"]["PriorityMapping"];
      /** @description The name of the priority scheme. Must be unique. */
      name: string;
      /** @description The IDs of priorities in the scheme. */
      priorityIds: number[];
      /** @description The IDs of projects that will use the priority scheme. */
      projectIds?: number[];
    };
    /** @description Details about the project. */
    CreateProjectDetails: {
      /**
       * @description The default assignee when creating issues for this project.
       * @enum {string}
       */
      assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
      /**
       * Format: int64
       * @description An integer value for the project's avatar.
       */
      avatarId?: number;
      /**
       * Format: int64
       * @description The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
       */
      categoryId?: number;
      /** @description A brief description of the project. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
       */
      fieldConfigurationScheme?: number;
      /**
       * Format: int64
       * @description The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
       */
      issueSecurityScheme?: number;
      /**
       * Format: int64
       * @description The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
       */
      issueTypeScheme?: number;
      /**
       * Format: int64
       * @description The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
       */
      issueTypeScreenScheme?: number;
      /** @description Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. */
      key: string;
      /** @description This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`. */
      lead?: string;
      /** @description The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`. */
      leadAccountId?: string;
      /** @description The name of the project. */
      name: string;
      /**
       * Format: int64
       * @description The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
       */
      notificationScheme?: number;
      /**
       * Format: int64
       * @description The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
       */
      permissionScheme?: number;
      /**
       * @description A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
       * @enum {string}
       */
      projectTemplateKey?: "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban" | "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum" | "com.pyxis.greenhopper.jira:gh-simplified-basic" | "com.pyxis.greenhopper.jira:gh-simplified-kanban-classic" | "com.pyxis.greenhopper.jira:gh-simplified-scrum-classic" | "com.pyxis.greenhopper.jira:gh-cross-team-template" | "com.pyxis.greenhopper.jira:gh-cross-team-planning-template" | "com.atlassian.servicedesk:simplified-it-service-management" | "com.atlassian.servicedesk:simplified-general-service-desk" | "com.atlassian.servicedesk:simplified-general-service-desk-it" | "com.atlassian.servicedesk:simplified-general-service-desk-business" | "com.atlassian.servicedesk:simplified-internal-service-desk" | "com.atlassian.servicedesk:simplified-external-service-desk" | "com.atlassian.servicedesk:simplified-hr-service-desk" | "com.atlassian.servicedesk:simplified-facilities-service-desk" | "com.atlassian.servicedesk:simplified-legal-service-desk" | "com.atlassian.servicedesk:simplified-marketing-service-desk" | "com.atlassian.servicedesk:simplified-finance-service-desk" | "com.atlassian.servicedesk:simplified-analytics-service-desk" | "com.atlassian.servicedesk:simplified-design-service-desk" | "com.atlassian.servicedesk:simplified-sales-service-desk" | "com.atlassian.servicedesk:simplified-halp-service-desk" | "com.atlassian.servicedesk:simplified-blank-project-it" | "com.atlassian.servicedesk:simplified-blank-project-business" | "com.atlassian.servicedesk:next-gen-it-service-desk" | "com.atlassian.servicedesk:next-gen-hr-service-desk" | "com.atlassian.servicedesk:next-gen-legal-service-desk" | "com.atlassian.servicedesk:next-gen-marketing-service-desk" | "com.atlassian.servicedesk:next-gen-facilities-service-desk" | "com.atlassian.servicedesk:next-gen-general-service-desk" | "com.atlassian.servicedesk:next-gen-general-it-service-desk" | "com.atlassian.servicedesk:next-gen-general-business-service-desk" | "com.atlassian.servicedesk:next-gen-analytics-service-desk" | "com.atlassian.servicedesk:next-gen-finance-service-desk" | "com.atlassian.servicedesk:next-gen-design-service-desk" | "com.atlassian.servicedesk:next-gen-sales-service-desk" | "com.atlassian.jira-core-project-templates:jira-core-simplified-content-management" | "com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval" | "com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking" | "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control" | "com.atlassian.jira-core-project-templates:jira-core-simplified-procurement" | "com.atlassian.jira-core-project-templates:jira-core-simplified-project-management" | "com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment" | "com.atlassian.jira-core-project-templates:jira-core-simplified-task-";
      /**
       * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
       * @enum {string}
       */
      projectTypeKey?: "software" | "service_desk" | "business";
      /** @description A link to information about this project, such as project documentation */
      url?: string;
      /**
       * Format: int64
       * @description The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
       */
      workflowScheme?: number;
    };
    /** @description Details of an issue resolution. */
    CreateResolutionDetails: {
      /** @description The description of the resolution. */
      description?: string;
      /** @description The name of the resolution. Must be unique (case-insensitive). */
      name: string;
      [key: string]: unknown;
    };
    /** @description The details of a UI modification. */
    CreateUiModificationDetails: {
      /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. */
      contexts?: components["schemas"]["UiModificationContextDetails"][];
      /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
      data?: string;
      /** @description The description of the UI modification. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the UI modification. The maximum length is 255 characters. */
      name: string;
    };
    CreateUpdateRoleRequestBean: {
      /** @description A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role. */
      description?: string;
      /** @description The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role. */
      name?: string;
    };
    /** @description A workflow transition condition. */
    CreateWorkflowCondition: {
      /** @description The list of workflow conditions. */
      conditions?: components["schemas"]["CreateWorkflowCondition"][];
      /** @description EXPERIMENTAL. The configuration of the transition rule. */
      configuration?: {
        [key: string]: unknown;
      };
      /**
       * @description The compound condition operator.
       * @enum {string}
       */
      operator?: "AND" | "OR";
      /** @description The type of the transition rule. */
      type?: string;
    };
    /** @description The details of a workflow. */
    CreateWorkflowDetails: {
      /** @description The description of the workflow. The maximum length is 1000 characters. */
      description?: string;
      /** @description The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace. */
      name: string;
      /** @description The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition. */
      statuses: components["schemas"]["CreateWorkflowStatusDetails"][];
      /**
       * @description The transitions of the workflow. For the request to be valid, these transitions must:
       *
       *  *  include one *initial* transition.
       *  *  not use the same name for a *global* and *directed* transition.
       *  *  have a unique name for each *global* transition.
       *  *  have a unique 'to' status for each *global* transition.
       *  *  have unique names for each transition from a status.
       *  *  not have a 'from' status on *initial* and *global* transitions.
       *  *  have a 'from' status on *directed* transitions.
       *
       * All the transition statuses must be included in `statuses`.
       */
      transitions: components["schemas"]["CreateWorkflowTransitionDetails"][];
    };
    /** @description The details of a transition status. */
    CreateWorkflowStatusDetails: {
      /** @description The ID of the status. */
      id: string;
      /** @description The properties of the status. */
      properties?: {
        [key: string]: string;
      };
    };
    /** @description The details of a workflow transition. */
    CreateWorkflowTransitionDetails: {
      /** @description The description of the transition. The maximum length is 1000 characters. */
      description?: string;
      /** @description The statuses the transition can start from. */
      from?: string[];
      /** @description The name of the transition. The maximum length is 60 characters. */
      name: string;
      /** @description The properties of the transition. */
      properties?: {
        [key: string]: string;
      };
      /** @description The rules of the transition. */
      rules?: components["schemas"]["CreateWorkflowTransitionRulesDetails"];
      /** @description The screen of the transition. */
      screen?: components["schemas"]["CreateWorkflowTransitionScreenDetails"];
      /** @description The status the transition goes to. */
      to: string;
      /**
       * @description The type of the transition.
       * @enum {string}
       */
      type: "global" | "initial" | "directed";
    };
    /** @description A workflow transition rule. */
    CreateWorkflowTransitionRule: {
      /** @description EXPERIMENTAL. The configuration of the transition rule. */
      configuration?: {
        [key: string]: unknown;
      };
      /** @description The type of the transition rule. */
      type: string;
    };
    /** @description The details of a workflow transition rules. */
    CreateWorkflowTransitionRulesDetails: {
      /** @description The workflow conditions. */
      conditions?: components["schemas"]["CreateWorkflowCondition"];
      /**
       * @description The workflow post functions.
       *
       * **Note:** The default post functions are always added to the *initial* transition, as in:
       *
       *     "postFunctions": [
       *         {
       *             "type": "IssueCreateFunction"
       *         },
       *         {
       *             "type": "IssueReindexFunction"
       *         },
       *         {
       *             "type": "FireIssueEventFunction",
       *             "configuration": {
       *                 "event": {
       *                     "id": "1",
       *                     "name": "issue_created"
       *                 }
       *             }
       *         }
       *     ]
       *
       * **Note:** The default post functions are always added to the *global* and *directed* transitions, as in:
       *
       *     "postFunctions": [
       *         {
       *             "type": "UpdateIssueStatusFunction"
       *         },
       *         {
       *             "type": "CreateCommentFunction"
       *         },
       *         {
       *             "type": "GenerateChangeHistoryFunction"
       *         },
       *         {
       *             "type": "IssueReindexFunction"
       *         },
       *         {
       *             "type": "FireIssueEventFunction",
       *             "configuration": {
       *                 "event": {
       *                     "id": "13",
       *                     "name": "issue_generic"
       *                 }
       *             }
       *         }
       *     ]
       */
      postFunctions?: components["schemas"]["CreateWorkflowTransitionRule"][];
      /**
       * @description The workflow validators.
       *
       * **Note:** The default permission validator is always added to the *initial* transition, as in:
       *
       *     "validators": [
       *         {
       *             "type": "PermissionValidator",
       *             "configuration": {
       *                 "permissionKey": "CREATE_ISSUES"
       *             }
       *         }
       *     ]
       */
      validators?: components["schemas"]["CreateWorkflowTransitionRule"][];
    };
    /** @description The details of a transition screen. */
    CreateWorkflowTransitionScreenDetails: {
      /** @description The ID of the screen. */
      id: string;
    };
    /** @description Details about a created issue or subtask. */
    CreatedIssue: {
      /** @description The ID of the created issue or subtask. */
      id?: string;
      /** @description The key of the created issue or subtask. */
      key?: string;
      /** @description The URL of the created issue or subtask. */
      self?: string;
      /** @description The response code and messages related to any requested transition. */
      transition?: components["schemas"]["NestedResponse"];
      /** @description The response code and messages related to any requested watchers. */
      watchers?: components["schemas"]["NestedResponse"];
    };
    /** @description Details about the issues created and the errors for requests that failed. */
    CreatedIssues: {
      /** @description Error details for failed issue creation requests. */
      errors?: readonly components["schemas"]["BulkOperationErrorResult"][];
      /** @description Details of the issues created. */
      issues?: readonly components["schemas"]["CreatedIssue"][];
    };
    CustomContextVariable: {
      /** @description Type of custom context variable. */
      type: string;
    } & (components["schemas"]["UserContextVariable"] | components["schemas"]["IssueContextVariable"] | components["schemas"]["JsonContextVariable"]);
    /** @description Details of configurations for a custom field. */
    CustomFieldConfigurations: {
      /** @description The list of custom field configuration details. */
      configurations: components["schemas"]["ContextualConfiguration"][];
    };
    /** @description The details of a custom field context. */
    CustomFieldContext: {
      /** @description The description of the context. */
      description: string;
      /** @description The ID of the context. */
      id: string;
      /** @description Whether the context apply to all issue types. */
      isAnyIssueType: boolean;
      /** @description Whether the context is global. */
      isGlobalContext: boolean;
      /** @description The name of the context. */
      name: string;
    };
    CustomFieldContextDefaultValue: components["schemas"]["CustomFieldContextDefaultValueCascadingOption"] | components["schemas"]["CustomFieldContextDefaultValueMultipleOption"] | components["schemas"]["CustomFieldContextDefaultValueSingleOption"] | components["schemas"]["CustomFieldContextSingleUserPickerDefaults"] | components["schemas"]["CustomFieldContextDefaultValueMultiUserPicker"] | components["schemas"]["CustomFieldContextDefaultValueSingleGroupPicker"] | components["schemas"]["CustomFieldContextDefaultValueMultipleGroupPicker"] | components["schemas"]["CustomFieldContextDefaultValueDate"] | components["schemas"]["CustomFieldContextDefaultValueDateTime"] | components["schemas"]["CustomFieldContextDefaultValueURL"] | components["schemas"]["CustomFieldContextDefaultValueProject"] | components["schemas"]["CustomFieldContextDefaultValueFloat"] | components["schemas"]["CustomFieldContextDefaultValueLabels"] | components["schemas"]["CustomFieldContextDefaultValueTextField"] | components["schemas"]["CustomFieldContextDefaultValueTextArea"] | components["schemas"]["CustomFieldContextDefaultValueReadOnly"] | components["schemas"]["CustomFieldContextDefaultValueSingleVersionPicker"] | components["schemas"]["CustomFieldContextDefaultValueMultipleVersionPicker"] | components["schemas"]["CustomFieldContextDefaultValueForgeStringField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiStringField"] | components["schemas"]["CustomFieldContextDefaultValueForgeObjectField"] | components["schemas"]["CustomFieldContextDefaultValueForgeDateTimeField"] | components["schemas"]["CustomFieldContextDefaultValueForgeGroupField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiGroupField"] | components["schemas"]["CustomFieldContextDefaultValueForgeNumberField"] | components["schemas"]["CustomFieldContextDefaultValueForgeUserField"] | components["schemas"]["CustomFieldContextDefaultValueForgeMultiUserField"];
    /** @description The default value for a cascading select custom field. */
    CustomFieldContextDefaultValueCascadingOption: {
      /** @description The ID of the default cascading option. */
      cascadingOptionId?: string;
      /** @description The ID of the context. */
      contextId: string;
      /** @description The ID of the default option. */
      optionId: string;
      type: string;
    };
    /** @description The default value for a Date custom field. */
    CustomFieldContextDefaultValueDate: {
      /** @description The default date in ISO format. Ignored if `useCurrent` is true. */
      date?: string;
      type: string;
      /**
       * @description Whether to use the current date.
       * @default false
       */
      useCurrent?: boolean;
    };
    /** @description The default value for a date time custom field. */
    CustomFieldContextDefaultValueDateTime: {
      /** @description The default date-time in ISO format. Ignored if `useCurrent` is true. */
      dateTime?: string;
      type: string;
      /**
       * @description Whether to use the current date.
       * @default false
       */
      useCurrent?: boolean;
    };
    /** @description Default value for a float (number) custom field. */
    CustomFieldContextDefaultValueFloat: {
      /**
       * Format: double
       * @description The default floating-point number.
       */
      number: number;
      type: string;
    };
    /** @description The default value for a Forge date time custom field. */
    CustomFieldContextDefaultValueForgeDateTimeField: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The default date-time in ISO format. Ignored if `useCurrent` is true. */
      dateTime?: string;
      type: string;
      /**
       * @description Whether to use the current date.
       * @default false
       */
      useCurrent?: boolean;
    };
    /** @description The default value for a Forge group custom field. */
    CustomFieldContextDefaultValueForgeGroupField: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The ID of the the default group. */
      groupId: string;
      type: string;
    };
    /** @description The default value for a Forge collection of groups custom field. */
    CustomFieldContextDefaultValueForgeMultiGroupField: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The IDs of the default groups. */
      groupIds: string[];
      type: string;
    };
    /** @description The default text for a Forge collection of strings custom field. */
    CustomFieldContextDefaultValueForgeMultiStringField: {
      type: string;
      /** @description List of string values. The maximum length for a value is 254 characters. */
      values?: string[];
    };
    /** @description Defaults for a Forge collection of users custom field. */
    CustomFieldContextDefaultValueForgeMultiUserField: {
      /** @description The IDs of the default users. */
      accountIds: string[];
      /** @description The ID of the context. */
      contextId: string;
      type: string;
    };
    /** @description Default value for a Forge number custom field. */
    CustomFieldContextDefaultValueForgeNumberField: {
      /** @description The ID of the context. */
      contextId: string;
      /**
       * Format: double
       * @description The default floating-point number.
       */
      number: number;
      type: string;
    };
    /** @description The default value for a Forge object custom field. */
    CustomFieldContextDefaultValueForgeObjectField: {
      /** @description The default JSON object. */
      object?: Record<string, never>;
      type: string;
    };
    /** @description The default text for a Forge string custom field. */
    CustomFieldContextDefaultValueForgeStringField: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The default text. The maximum length is 254 characters. */
      text?: string;
      type: string;
    };
    /** @description Defaults for a Forge user custom field. */
    CustomFieldContextDefaultValueForgeUserField: {
      /** @description The ID of the default user. */
      accountId: string;
      /** @description The ID of the context. */
      contextId: string;
      type: string;
      userFilter: components["schemas"]["UserFilter"];
    };
    /** @description Default value for a labels custom field. */
    CustomFieldContextDefaultValueLabels: {
      /** @description The default labels value. */
      labels: string[];
      type: string;
    };
    /** @description The default value for a User Picker (multiple) custom field. */
    CustomFieldContextDefaultValueMultiUserPicker: {
      /** @description The IDs of the default users. */
      accountIds: string[];
      /** @description The ID of the context. */
      contextId: string;
      type: string;
    };
    /** @description The default value for a multiple group picker custom field. */
    CustomFieldContextDefaultValueMultipleGroupPicker: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The IDs of the default groups. */
      groupIds: string[];
      type: string;
    };
    /** @description The default value for a multi-select custom field. */
    CustomFieldContextDefaultValueMultipleOption: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The list of IDs of the default options. */
      optionIds: string[];
      type: string;
    };
    /** @description The default value for a multiple version picker custom field. */
    CustomFieldContextDefaultValueMultipleVersionPicker: {
      type: string;
      /** @description The IDs of the default versions. */
      versionIds: string[];
      /** @description The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`. */
      versionOrder?: string;
    };
    /** @description The default value for a project custom field. */
    CustomFieldContextDefaultValueProject: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The ID of the default project. */
      projectId: string;
      type: string;
    };
    /** @description The default text for a read only custom field. */
    CustomFieldContextDefaultValueReadOnly: {
      /** @description The default text. The maximum length is 255 characters. */
      text?: string;
      type: string;
    };
    /** @description The default value for a group picker custom field. */
    CustomFieldContextDefaultValueSingleGroupPicker: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The ID of the the default group. */
      groupId: string;
      type: string;
    };
    /** @description The default value for a single select custom field. */
    CustomFieldContextDefaultValueSingleOption: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description The ID of the default option. */
      optionId: string;
      type: string;
    };
    /** @description The default value for a version picker custom field. */
    CustomFieldContextDefaultValueSingleVersionPicker: {
      type: string;
      /** @description The ID of the default version. */
      versionId: string;
      /** @description The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`. */
      versionOrder?: string;
    };
    /** @description The default text for a text area custom field. */
    CustomFieldContextDefaultValueTextArea: {
      /** @description The default text. The maximum length is 32767 characters. */
      text?: string;
      type: string;
    };
    /** @description The default text for a text custom field. */
    CustomFieldContextDefaultValueTextField: {
      /** @description The default text. The maximum length is 254 characters. */
      text?: string;
      type: string;
    };
    /** @description The default value for a URL custom field. */
    CustomFieldContextDefaultValueURL: {
      /** @description The ID of the context. */
      contextId: string;
      type: string;
      /** @description The default URL. */
      url: string;
    };
    /** @description Default values to update. */
    CustomFieldContextDefaultValueUpdate: {
      defaultValues?: components["schemas"]["CustomFieldContextDefaultValue"][];
    };
    /** @description Details of the custom field options for a context. */
    CustomFieldContextOption: {
      /** @description Whether the option is disabled. */
      disabled: boolean;
      /** @description The ID of the custom field option. */
      id: string;
      /** @description For cascading options, the ID of the custom field option containing the cascading option. */
      optionId?: string;
      /** @description The value of the custom field option. */
      value: string;
    };
    /** @description Details of a context to project association. */
    CustomFieldContextProjectMapping: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description Whether context is global. */
      isGlobalContext?: boolean;
      /** @description The ID of the project. */
      projectId?: string;
    };
    /** @description Defaults for a User Picker (single) custom field. */
    CustomFieldContextSingleUserPickerDefaults: {
      /** @description The ID of the default user. */
      accountId: string;
      /** @description The ID of the context. */
      contextId: string;
      type: string;
      userFilter: components["schemas"]["UserFilter"];
    };
    /** @description Details of a custom field context. */
    CustomFieldContextUpdateDetails: {
      /** @description The description of the custom field context. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the custom field context. The name must be unique. The maximum length is 255 characters. */
      name?: string;
    };
    /** @description A list of custom field options for a context. */
    CustomFieldCreatedContextOptionsList: {
      /** @description The created custom field options. */
      options?: components["schemas"]["CustomFieldContextOption"][];
    };
    CustomFieldDefinitionJsonBean: {
      /** @description The description of the custom field, which is displayed in Jira. */
      description?: string;
      /** @description The name of the custom field, which is displayed in Jira. This is not the unique identifier. */
      name: string;
      /**
       * @description The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.
       * The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
       *
       *  *  `cascadingselect`: `cascadingselectsearcher`
       *  *  `datepicker`: `daterange`
       *  *  `datetime`: `datetimerange`
       *  *  `float`: `exactnumber` or `numberrange`
       *  *  `grouppicker`: `grouppickersearcher`
       *  *  `importid`: `exactnumber` or `numberrange`
       *  *  `labels`: `labelsearcher`
       *  *  `multicheckboxes`: `multiselectsearcher`
       *  *  `multigrouppicker`: `multiselectsearcher`
       *  *  `multiselect`: `multiselectsearcher`
       *  *  `multiuserpicker`: `userpickergroupsearcher`
       *  *  `multiversion`: `versionsearcher`
       *  *  `project`: `projectsearcher`
       *  *  `radiobuttons`: `multiselectsearcher`
       *  *  `readonlyfield`: `textsearcher`
       *  *  `select`: `multiselectsearcher`
       *  *  `textarea`: `textsearcher`
       *  *  `textfield`: `textsearcher`
       *  *  `url`: `exacttextsearcher`
       *  *  `userpicker`: `userpickergroupsearcher`
       *  *  `version`: `versionsearcher`
       *
       * If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
       * @enum {string}
       */
      searcherKey?: "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:daterange" | "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange" | "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber" | "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:numberrange" | "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher";
      /**
       * @description The type of the custom field. These built-in custom field types are available:
       *
       *  *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
       *  *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
       *  *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
       *  *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
       *  *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
       *  *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
       *  *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
       *  *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
       *  *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
       *  *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
       *  *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
       *  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
       *  *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
       *  *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
       *  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
       *  *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
       *  *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
       *  *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
       *  *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
       *  *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
       *  *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
       *
       * To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
       */
      type: string;
    };
    /** @description Details of a custom option for a field. */
    CustomFieldOption: {
      /**
       * Format: uri
       * @description The URL of these custom field option details.
       */
      self?: string;
      /** @description The value of the custom field option. */
      value?: string;
    };
    /** @description Details of a custom field option to create. */
    CustomFieldOptionCreate: {
      /** @description Whether the option is disabled. */
      disabled?: boolean;
      /** @description For cascading options, the ID of the custom field object containing the cascading option. */
      optionId?: string;
      /** @description The value of the custom field option. */
      value: string;
    };
    /** @description Details of a custom field option for a context. */
    CustomFieldOptionUpdate: {
      /** @description Whether the option is disabled. */
      disabled?: boolean;
      /** @description The ID of the custom field option. */
      id: string;
      /** @description The value of the custom field option. */
      value?: string;
    };
    /** @description Details about the replacement for a deleted version. */
    CustomFieldReplacement: {
      /**
       * Format: int64
       * @description The ID of the custom field in which to replace the version number.
       */
      customFieldId?: number;
      /**
       * Format: int64
       * @description The version number to use as a replacement for the deleted version.
       */
      moveTo?: number;
    };
    /** @description A list of custom field options for a context. */
    CustomFieldUpdatedContextOptionsList: {
      /** @description The updated custom field options. */
      options?: components["schemas"]["CustomFieldOptionUpdate"][];
    };
    /** @description A list of issue IDs and the value to update a custom field to. */
    CustomFieldValueUpdate: {
      /** @description The list of issue IDs. */
      issueIds: number[];
      /**
       * @description The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
       *
       *  *  `string` the value must be a string.
       *  *  `number` the value must be a number.
       *  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
       *  *  `user` the value must be an object that contains the `accountId` field.
       *  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
       *
       * A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
       */
      value: unknown;
    };
    /** @description Details of updates for a custom field. */
    CustomFieldValueUpdateDetails: {
      /** @description The list of custom field update details. */
      updates?: components["schemas"]["CustomFieldValueUpdate"][];
    };
    /** @description Details of a dashboard. */
    Dashboard: {
      /**
       * Format: int32
       * @description The automatic refresh interval for the dashboard in milliseconds.
       */
      automaticRefreshMs?: number;
      description?: string;
      /** @description The details of any edit share permissions for the dashboard. */
      editPermissions?: readonly components["schemas"]["SharePermission"][];
      /** @description The ID of the dashboard. */
      id?: string;
      /** @description Whether the dashboard is selected as a favorite by the user. */
      isFavourite?: boolean;
      /** @description Whether the current user has permission to edit the dashboard. */
      isWritable?: boolean;
      /** @description The name of the dashboard. */
      name?: string;
      /** @description The owner of the dashboard. */
      owner?: components["schemas"]["UserBean"];
      /**
       * Format: int64
       * @description The number of users who have this dashboard as a favorite.
       */
      popularity?: number;
      /**
       * Format: int32
       * @description The rank of this dashboard.
       */
      rank?: number;
      /**
       * Format: uri
       * @description The URL of these dashboard details.
       */
      self?: string;
      /** @description The details of any view share permissions for the dashboard. */
      sharePermissions?: readonly components["schemas"]["SharePermission"][];
      /** @description Whether the current dashboard is system dashboard. */
      systemDashboard?: boolean;
      /** @description The URL of the dashboard. */
      view?: string;
    };
    /** @description Details of a dashboard. */
    DashboardDetails: {
      /** @description The description of the dashboard. */
      description?: string;
      /** @description The edit permissions for the dashboard. */
      editPermissions: components["schemas"]["SharePermission"][];
      /** @description The name of the dashboard. */
      name: string;
      /** @description The share permissions for the dashboard. */
      sharePermissions: components["schemas"]["SharePermission"][];
    };
    /** @description Details of a gadget. */
    DashboardGadget: {
      /**
       * @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
       * @enum {string}
       */
      color: "blue" | "red" | "yellow" | "green" | "cyan" | "purple" | "gray" | "white";
      /**
       * Format: int64
       * @description The ID of the gadget instance.
       */
      id: number;
      /** @description The module key of the gadget type. */
      moduleKey?: string;
      /** @description The position of the gadget. */
      position: components["schemas"]["DashboardGadgetPosition"];
      /** @description The title of the gadget. */
      title: string;
      /** @description The URI of the gadget type. */
      uri?: string;
    };
    /** @description Details of a gadget position. */
    DashboardGadgetPosition: {
      /** Format: int32 */
      "The column position of the gadget.": number;
      /** Format: int32 */
      "The row position of the gadget.": number;
    };
    /** @description The list of gadgets on the dashboard. */
    DashboardGadgetResponse: {
      /** @description The list of gadgets. */
      gadgets: readonly components["schemas"]["DashboardGadget"][];
    };
    /** @description Details of the settings for a dashboard gadget. */
    DashboardGadgetSettings: {
      /** @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`. */
      color?: string;
      /** @description Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed. */
      ignoreUriAndModuleKeyValidation?: boolean;
      /** @description The module key of the gadget type. Can't be provided with `uri`. */
      moduleKey?: string;
      /** @description The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it. */
      position?: components["schemas"]["DashboardGadgetPosition"];
      /** @description The title of the gadget. */
      title?: string;
      /** @description The URI of the gadget type. Can't be provided with `moduleKey`. */
      uri?: string;
    };
    /** @description The details of the gadget to update. */
    DashboardGadgetUpdateRequest: {
      /** @description The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`. */
      color?: string;
      /** @description The position of the gadget. */
      position?: components["schemas"]["DashboardGadgetPosition"];
      /** @description The title of the gadget. */
      title?: string;
    };
    /** @description The data classification. */
    DataClassificationLevelsBean: {
      /** @description The data classifications. */
      classifications?: components["schemas"]["DataClassificationTagBean"][];
    };
    /** @description The data classification. */
    DataClassificationTagBean: {
      /** @description The color of the data classification object. */
      color?: string;
      /** @description The description of the data classification object. */
      description?: string;
      /** @description The guideline of the data classification object. */
      guideline?: string;
      /** @description The ID of the data classification object. */
      id: string;
      /** @description The name of the data classification object. */
      name?: string;
      /**
       * Format: int32
       * @description The rank of the data classification object.
       */
      rank?: number;
      /** @description The status of the data classification object. */
      status: string;
    };
    /** @description List issues archived within a specified date range. */
    DateRangeFilterRequest: {
      /** @description List issues archived after a specified date, passed in the YYYY-MM-DD format. */
      dateAfter: string;
      /** @description List issues archived before a specified date provided in the YYYY-MM-DD format. */
      dateBefore: string;
    };
    /** @description Details of scheme and new default level. */
    DefaultLevelValue: {
      /** @description The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level. */
      defaultLevelId: string;
      /** @description The ID of the issue security scheme to set default level for. */
      issueSecuritySchemeId: string;
      [key: string]: unknown;
    };
    /** @description Details of the scope of the default sharing for new filters and dashboards. */
    DefaultShareScope: {
      /**
       * @description The scope of the default sharing for new filters and dashboards:
       *
       *  *  `AUTHENTICATED` Shared with all logged-in users.
       *  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
       *  *  `PRIVATE` Not shared with any users.
       * @enum {string}
       */
      scope: "GLOBAL" | "AUTHENTICATED" | "PRIVATE";
    };
    /** @description Details about the default workflow. */
    DefaultWorkflow: {
      /** @description Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`. */
      updateDraftIfNeeded?: boolean;
      /** @description The name of the workflow to set as the default workflow. */
      workflow: string;
    };
    DeleteAndReplaceVersionBean: {
      /** @description An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version. */
      customFieldReplacementList?: components["schemas"]["CustomFieldReplacement"][];
      /**
       * Format: int64
       * @description The ID of the version to update `affectedVersion` to when the field contains the deleted version.
       */
      moveAffectedIssuesTo?: number;
      /**
       * Format: int64
       * @description The ID of the version to update `fixVersion` to when the field contains the deleted version.
       */
      moveFixIssuesTo?: number;
    };
    /** @description Details about a workflow. */
    DeprecatedWorkflow: {
      default?: boolean;
      /** @description The description of the workflow. */
      description?: string;
      /** @description The datetime the workflow was last modified. */
      lastModifiedDate?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      lastModifiedUser?: string;
      /** @description The account ID of the user that last modified the workflow. */
      lastModifiedUserAccountId?: string;
      /** @description The name of the workflow. */
      name?: string;
      /** @description The scope where this workflow applies */
      scope?: components["schemas"]["Scope"];
      /**
       * Format: int32
       * @description The number of steps included in the workflow.
       */
      steps?: number;
    };
    DetailedErrorCollection: {
      /** @description Map of objects representing additional details for an error */
      details?: {
        [key: string]: unknown;
      };
      /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
      errorMessages?: string[];
      /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
      errors?: {
        [key: string]: string;
      };
    };
    /** @description The current version details of this workflow scheme. */
    DocumentVersion: {
      /** @description The version UUID. */
      id: string;
      /**
       * Format: int64
       * @description The version number.
       */
      versionNumber: number;
    };
    /** @description An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/). */
    EntityProperty: {
      /** @description The key of the property. Required on create and update. */
      key?: string;
      /** @description The value of the property. Required on create and update. */
      value?: unknown;
    };
    EntityPropertyDetails: {
      /**
       * @description The entity property ID.
       * @example 123
       */
      entityId: number;
      /**
       * @description The entity property key.
       * @example mykey
       */
      key: string;
      /**
       * @description The new value of the entity property.
       * @example newValue
       */
      value: string;
    };
    Error: {
      /** Format: int64 */
      count?: number;
      issueIdsOrKeys?: string[];
      message?: string;
    };
    /** @description Error messages from an operation. */
    ErrorCollection: {
      /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
      errorMessages?: string[];
      /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
      errors?: {
        [key: string]: string;
      };
      /** Format: int32 */
      status?: number;
    };
    ErrorCollections: Record<string, never>;
    ErrorMessage: {
      message?: string;
    };
    Errors: {
      issueIsSubtask?: components["schemas"]["Error"];
      issuesInArchivedProjects?: components["schemas"]["Error"];
      issuesInUnlicensedProjects?: components["schemas"]["Error"];
      issuesNotFound?: components["schemas"]["Error"];
    };
    /** @description Details about a notification associated with an event. */
    EventNotification: {
      /** @description The email address. */
      emailAddress?: string;
      /** @description Expand options that include additional event notification details in the response. */
      expand?: string;
      /** @description The custom user or group field. */
      field?: components["schemas"]["FieldDetails"];
      /** @description The specified group. */
      group?: components["schemas"]["GroupName"];
      /**
       * Format: int64
       * @description The ID of the notification.
       */
      id?: number;
      /**
       * @description Identifies the recipients of the notification.
       * @enum {string}
       */
      notificationType?: "CurrentAssignee" | "Reporter" | "CurrentUser" | "ProjectLead" | "ComponentLead" | "User" | "Group" | "ProjectRole" | "EmailAddress" | "AllWatchers" | "UserCustomField" | "GroupCustomField";
      /**
       * @description As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
       *
       *  *  `User` The `parameter` is the user account ID.
       *  *  `Group` The `parameter` is the group name.
       *  *  `ProjectRole` The `parameter` is the project role ID.
       *  *  `UserCustomField` The `parameter` is the ID of the custom field.
       *  *  `GroupCustomField` The `parameter` is the ID of the custom field.
       */
      parameter?: string;
      /** @description The specified project role. */
      projectRole?: components["schemas"]["ProjectRole"];
      /**
       * @description The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
       *
       *  *  `User`, `recipient` is the user account ID.
       *  *  `Group`, `recipient` is the group ID.
       *  *  `ProjectRole`, `recipient` is the project role ID.
       *  *  `UserCustomField`, `recipient` is the ID of the custom field.
       *  *  `GroupCustomField`, `recipient` is the ID of the custom field.
       */
      recipient?: string;
      /** @description The specified user. */
      user?: components["schemas"]["UserDetails"];
    };
    /** @description A priority scheme with less fields to be used in for an API expand response. */
    ExpandPrioritySchemeBean: {
      /** @description The ID of the priority scheme. */
      id?: string;
      /** @description The name of the priority scheme. */
      name?: string;
      /** @description The URL of the priority scheme. */
      self?: string;
    };
    ExpandPrioritySchemePage: {
      /** Format: int32 */
      maxResults?: number;
      /** Format: int64 */
      startAt?: number;
      /** Format: int64 */
      total?: number;
      [key: string]: unknown;
    };
    /** @description The response for status request for a running/completed export task. */
    ExportArchivedIssuesTaskProgressResponse: {
      fileUrl?: string;
      payload?: string;
      /** Format: int64 */
      progress?: number;
      status?: string;
      /** Format: date-time */
      submittedTime?: string;
      taskId?: string;
    };
    /** @description Details about a failed webhook. */
    FailedWebhook: {
      /** @description The webhook body. */
      body?: string;
      /**
       * Format: int64
       * @description The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
       */
      failureTime: number;
      /** @description The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook. */
      id: string;
      /** @description The original webhook destination. */
      url: string;
    };
    /** @description A page of failed webhooks. */
    FailedWebhooks: {
      /**
       * Format: int32
       * @description The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
       */
      maxResults: number;
      /**
       * Format: uri
       * @description The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
       */
      next?: string;
      /** @description The list of webhooks. */
      values: components["schemas"]["FailedWebhook"][];
    };
    /** @description Details of a field. */
    Field: {
      /**
       * Format: int64
       * @description Number of contexts where the field is used.
       */
      contextsCount?: number;
      /** @description The description of the field. */
      description?: string;
      /** @description The ID of the field. */
      id: string;
      /** @description Whether the field is locked. */
      isLocked?: boolean;
      /** @description Whether the field is shown on screen or not. */
      isUnscreenable?: boolean;
      /** @description The key of the field. */
      key?: string;
      lastUsed?: components["schemas"]["FieldLastUsed"];
      /** @description The name of the field. */
      name: string;
      /**
       * Format: int64
       * @description Number of projects where the field is used.
       */
      projectsCount?: number;
      schema: components["schemas"]["JsonTypeBean"];
      /**
       * Format: int64
       * @description Number of screens where the field is used.
       */
      screensCount?: number;
      /** @description The searcher key of the field. Returned for custom fields. */
      searcherKey?: string;
      /** @description The stable ID of the field. */
      stableId?: string;
    };
    /** @description A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator. */
    FieldChangedClause: {
      field: components["schemas"]["JqlQueryField"];
      /**
       * @description The operator applied to the field.
       * @enum {string}
       */
      operator: "changed";
      /** @description The list of time predicates. */
      predicates: components["schemas"]["JqlQueryClauseTimePredicate"][];
    };
    /** @description Details of a field configuration. */
    FieldConfiguration: {
      /** @description The description of the field configuration. */
      description: string;
      /**
       * Format: int64
       * @description The ID of the field configuration.
       */
      id: number;
      /** @description Whether the field configuration is the default. */
      isDefault?: boolean;
      /** @description The name of the field configuration. */
      name: string;
    };
    /** @description Details of a field configuration. */
    FieldConfigurationDetails: {
      /** @description The description of the field configuration. */
      description?: string;
      /** @description The name of the field configuration. Must be unique. */
      name: string;
    };
    /** @description The field configuration for an issue type. */
    FieldConfigurationIssueTypeItem: {
      /** @description The ID of the field configuration. */
      fieldConfigurationId: string;
      /** @description The ID of the field configuration scheme. */
      fieldConfigurationSchemeId: string;
      /** @description The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. */
      issueTypeId: string;
    };
    /** @description A field within a field configuration. */
    FieldConfigurationItem: {
      /** @description The description of the field within the field configuration. */
      description?: string;
      /** @description The ID of the field within the field configuration. */
      id: string;
      /** @description Whether the field is hidden in the field configuration. */
      isHidden?: boolean;
      /** @description Whether the field is required in the field configuration. */
      isRequired?: boolean;
      /** @description The renderer type for the field within the field configuration. */
      renderer?: string;
    };
    /** @description Details of field configuration items. */
    FieldConfigurationItemsDetails: {
      /** @description Details of fields in a field configuration. */
      fieldConfigurationItems: components["schemas"]["FieldConfigurationItem"][];
    };
    /** @description Details of a field configuration scheme. */
    FieldConfigurationScheme: {
      /** @description The description of the field configuration scheme. */
      description?: string;
      /** @description The ID of the field configuration scheme. */
      id: string;
      /** @description The name of the field configuration scheme. */
      name: string;
    };
    /** @description Associated field configuration scheme and project. */
    FieldConfigurationSchemeProjectAssociation: {
      /** @description The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme. */
      fieldConfigurationSchemeId?: string;
      /** @description The ID of the project. */
      projectId: string;
    };
    /** @description Project list with assigned field configuration schema. */
    FieldConfigurationSchemeProjects: {
      fieldConfigurationScheme?: components["schemas"]["FieldConfigurationScheme"];
      /** @description The IDs of projects using the field configuration scheme. */
      projectIds: string[];
    };
    /** @description The field configuration to issue type mapping. */
    FieldConfigurationToIssueTypeMapping: {
      /** @description The ID of the field configuration. */
      fieldConfigurationId: string;
      /** @description The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request. */
      issueTypeId: string;
    };
    /** @description The metadata describing an issue field for createmeta. */
    FieldCreateMetadata: {
      /** @description The list of values allowed in the field. */
      allowedValues?: readonly unknown[];
      /** @description The URL that can be used to automatically complete the field. */
      autoCompleteUrl?: string;
      /** @description The configuration properties. */
      configuration?: {
        [key: string]: unknown;
      };
      /** @description The default value of the field. */
      defaultValue?: unknown;
      /** @description The field id. */
      fieldId: string;
      /** @description Whether the field has a default value. */
      hasDefaultValue?: boolean;
      /** @description The key of the field. */
      key: string;
      /** @description The name of the field. */
      name: string;
      /** @description The list of operations that can be performed on the field. */
      operations: readonly string[];
      /** @description Whether the field is required. */
      required: boolean;
      /** @description The data type of the field. */
      schema: components["schemas"]["JsonTypeBean"];
    };
    /** @description Details about a field. */
    FieldDetails: {
      /** @description The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ). */
      clauseNames?: string[];
      /** @description Whether the field is a custom field. */
      custom?: boolean;
      /** @description The ID of the field. */
      id?: string;
      /** @description The key of the field. */
      key?: string;
      /** @description The name of the field. */
      name?: string;
      /** @description Whether the field can be used as a column on the issue navigator. */
      navigable?: boolean;
      /** @description Whether the content of the field can be used to order lists. */
      orderable?: boolean;
      /** @description The data schema for the field. */
      schema?: components["schemas"]["JsonTypeBean"];
      /** @description The scope of the field. */
      scope?: components["schemas"]["Scope"];
      /** @description Whether the content of the field can be searched. */
      searchable?: boolean;
    };
    /** @description Information about the most recent use of a field. */
    FieldLastUsed: {
      /**
       * @description Last used value type:
       *
       *  *  *TRACKED*: field is tracked and a last used date is available.
       *  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
       *  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
       * @enum {string}
       */
      type?: "TRACKED" | "NOT_TRACKED" | "NO_INFORMATION";
      /**
       * Format: date-time
       * @description The date when the value of the field last changed.
       */
      value?: string;
    };
    /** @description The metadata describing an issue field. */
    FieldMetadata: {
      /** @description The list of values allowed in the field. */
      allowedValues?: readonly unknown[];
      /** @description The URL that can be used to automatically complete the field. */
      autoCompleteUrl?: string;
      /** @description The configuration properties. */
      configuration?: {
        [key: string]: unknown;
      };
      /** @description The default value of the field. */
      defaultValue?: unknown;
      /** @description Whether the field has a default value. */
      hasDefaultValue?: boolean;
      /** @description The key of the field. */
      key: string;
      /** @description The name of the field. */
      name: string;
      /** @description The list of operations that can be performed on the field. */
      operations: readonly string[];
      /** @description Whether the field is required. */
      required: boolean;
      /** @description The data type of the field. */
      schema: components["schemas"]["JsonTypeBean"];
    };
    /** @description Details of a field that can be used in advanced searches. */
    FieldReferenceData: {
      /**
       * @description Whether the field provide auto-complete suggestions.
       * @enum {string}
       */
      auto?: "true" | "false";
      /** @description If the item is a custom field, the ID of the custom field. */
      cfid?: string;
      /**
       * @description Whether this field has been deprecated.
       * @enum {string}
       */
      deprecated?: "true" | "false";
      /** @description The searcher key of the field, only passed when the field is deprecated. */
      deprecatedSearcherKey?: string;
      /**
       * @description The display name contains the following:
       *
       *  *  for system fields, the field name. For example, `Summary`.
       *  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
       *  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
       */
      displayName?: string;
      /** @description The valid search operators for the field. */
      operators?: string[];
      /**
       * @description Whether the field can be used in a query's `ORDER BY` clause.
       * @enum {string}
       */
      orderable?: "true" | "false";
      /**
       * @description Whether the content of this field can be searched.
       * @enum {string}
       */
      searchable?: "true" | "false";
      /** @description The data types of items in the field. */
      types?: string[];
      /** @description The field identifier. */
      value?: string;
    };
    /** @description Details of an operation to perform on a field. */
    FieldUpdateOperation: {
      /**
       * @description The value to add to the field.
       * @example triaged
       */
      add?: unknown;
      /**
       * @description The field value to copy from another issue.
       * @example {
       *   "issuelinks": {
       *     "sourceIssues": [
       *       {
       *         "key": "FP-5"
       *       }
       *     ]
       *   }
       * }
       */
      copy?: unknown;
      /**
       * @description The value to edit in the field.
       * @example {
       *   "originalEstimate": "1w 1d",
       *   "remainingEstimate": "4d"
       * }
       */
      edit?: unknown;
      /**
       * @description The value to removed from the field.
       * @example blocker
       */
      remove?: unknown;
      /**
       * @description The value to set in the field.
       * @example A new summary
       */
      set?: unknown;
    };
    /** @description A clause that asserts the current value of a field. For example, `summary ~ test`. */
    FieldValueClause: {
      field: components["schemas"]["JqlQueryField"];
      operand: components["schemas"]["JqlQueryClauseOperand"];
      /**
       * @description The operator between the field and operand.
       * @enum {string}
       */
      operator: "=" | "!=" | ">" | "<" | ">=" | "<=" | "in" | "not in" | "~" | "~=" | "is" | "is not";
    };
    /** @description A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator. */
    FieldWasClause: {
      field: components["schemas"]["JqlQueryField"];
      operand: components["schemas"]["JqlQueryClauseOperand"];
      /**
       * @description The operator between the field and operand.
       * @enum {string}
       */
      operator: "was" | "was in" | "was not in" | "was not";
      /** @description The list of time predicates. */
      predicates: components["schemas"]["JqlQueryClauseTimePredicate"][];
    };
    /** @description Key fields from the linked issue. */
    Fields: {
      /** @description The assignee of the linked issue. */
      assignee?: components["schemas"]["UserDetails"];
      /** @description The type of the linked issue. */
      issueType?: components["schemas"]["IssueTypeDetails"];
      /** @description The type of the linked issue. */
      issuetype?: components["schemas"]["IssueTypeDetails"];
      /** @description The priority of the linked issue. */
      priority?: components["schemas"]["Priority"];
      /** @description The status of the linked issue. */
      status?: components["schemas"]["StatusDetails"];
      /** @description The summary description of the linked issue. */
      summary?: string;
      /** @description The time tracking of the linked issue. */
      timetracking?: components["schemas"]["TimeTrackingDetails"];
    };
    /** @description Details about a filter. */
    Filter: {
      /**
       * Format: date-time
       * @description \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
       */
      approximateLastUsed?: string;
      /** @description A description of the filter. */
      description?: string;
      /** @description The groups and projects that can edit the filter. */
      editPermissions?: components["schemas"]["SharePermission"][];
      /** @description Whether the filter is selected as a favorite. */
      favourite?: boolean;
      /**
       * Format: int64
       * @description The count of how many users have selected this filter as a favorite, including the filter owner.
       */
      favouritedCount?: number;
      /** @description The unique identifier for the filter. */
      id?: string;
      /** @description The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. */
      jql?: string;
      /** @description The name of the filter. Must be unique. */
      name: string;
      /** @description The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings. */
      owner?: components["schemas"]["User"];
      /**
       * Format: uri
       * @description A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
       */
      searchUrl?: string;
      /**
       * Format: uri
       * @description The URL of the filter.
       */
      self?: string;
      /** @description The groups and projects that the filter is shared with. */
      sharePermissions?: components["schemas"]["SharePermission"][];
      /** @description A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with. */
      sharedUsers?: components["schemas"]["UserList"];
      /** @description A paginated list of the users that are subscribed to the filter. */
      subscriptions?: components["schemas"]["FilterSubscriptionsList"];
      /**
       * Format: uri
       * @description A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
       */
      viewUrl?: string;
    };
    /** @description Details of a filter. */
    FilterDetails: {
      /**
       * Format: date-time
       * @description \[Experimental\] Approximate last used time. Returns the date and time when the filter was last used. Returns `null` if the filter hasn't been used after tracking was enabled. For performance reasons, timestamps aren't updated in real time and therefore may not be exactly accurate.
       */
      approximateLastUsed?: string;
      /** @description The description of the filter. */
      description?: string;
      /** @description The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter. */
      editPermissions?: components["schemas"]["SharePermission"][];
      /** @description Expand options that include additional filter details in the response. */
      expand?: string;
      /** @description Whether the filter is selected as a favorite by any users, not including the filter owner. */
      favourite?: boolean;
      /**
       * Format: int64
       * @description The count of how many users have selected this filter as a favorite, including the filter owner.
       */
      favouritedCount?: number;
      /** @description The unique identifier for the filter. */
      id?: string;
      /** @description The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*. */
      jql?: string;
      /** @description The name of the filter. */
      name: string;
      /** @description The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings. */
      owner?: components["schemas"]["User"];
      /**
       * Format: uri
       * @description A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
       */
      searchUrl?: string;
      /**
       * Format: uri
       * @description The URL of the filter.
       */
      self?: string;
      /** @description The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter. */
      sharePermissions?: components["schemas"]["SharePermission"][];
      /** @description The users that are subscribed to the filter. */
      subscriptions?: readonly components["schemas"]["FilterSubscription"][];
      /**
       * Format: uri
       * @description A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
       */
      viewUrl?: string;
    };
    /** @description Details of a user or group subscribing to a filter. */
    FilterSubscription: {
      /** @description The group subscribing to filter. */
      group?: components["schemas"]["GroupName"];
      /**
       * Format: int64
       * @description The ID of the filter subscription.
       */
      id?: number;
      /** @description The user subscribing to filter. */
      user?: components["schemas"]["User"];
    };
    /** @description A paginated list of subscriptions to a filter. */
    FilterSubscriptionsList: {
      /**
       * Format: int32
       * @description The index of the last item returned on the page.
       */
      "end-index"?: number;
      /** @description The list of items. */
      items?: readonly components["schemas"]["FilterSubscription"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      "max-results"?: number;
      /**
       * Format: int32
       * @description The number of items on the page.
       */
      size?: number;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      "start-index"?: number;
    };
    /** @description A group found in a search. */
    FoundGroup: {
      /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
      groupId?: string;
      /** @description The group name with the matched query string highlighted with the HTML bold tag. */
      html?: string;
      labels?: components["schemas"]["GroupLabel"][];
      /** @description The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.` */
      name?: string;
    };
    /** @description The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups. */
    FoundGroups: {
      groups?: components["schemas"]["FoundGroup"][];
      /** @description Header text indicating the number of groups in the response and the total number of groups found in the search. */
      header?: string;
      /**
       * Format: int32
       * @description The total number of groups found in the search.
       */
      total?: number;
    };
    /** @description The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users. */
    FoundUsers: {
      /** @description Header text indicating the number of users in the response and the total number of users found in the search. */
      header?: string;
      /**
       * Format: int32
       * @description The total number of users found in the search.
       */
      total?: number;
      users?: components["schemas"]["UserPickerUser"][];
    };
    /** @description List of users and groups found in a search. */
    FoundUsersAndGroups: {
      groups?: components["schemas"]["FoundGroups"];
      users?: components["schemas"]["FoundUsers"];
    };
    /** @description An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions. */
    FunctionOperand: {
      /** @description The list of function arguments. */
      arguments: string[];
      /** @description Encoded operand, which can be used directly in a JQL query. */
      encodedOperand?: string;
      /** @description The name of the function. */
      function: string;
    };
    /** @description Details of functions that can be used in advanced searches. */
    FunctionReferenceData: {
      /** @description The display name of the function. */
      displayName?: string;
      /**
       * @description Whether the function can take a list of arguments.
       * @enum {string}
       */
      isList?: "true" | "false";
      /**
       * @description Whether the function supports both single and list value operators.
       * @enum {string}
       */
      supportsListAndSingleValueOperators?: "true" | "false";
      /** @description The data types returned by the function. */
      types?: string[];
      /** @description The function identifier. */
      value?: string;
    };
    GlobalScopeBean: {
      /** @description Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. */
      attributes?: ("notSelectable" | "defaultValue")[];
    };
    Group: {
      /** @description Expand options that include additional group details in the response. */
      expand?: string;
      /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
      groupId?: string | null;
      /** @description The name of group. */
      name?: string;
      /**
       * Format: uri
       * @description The URL for these group details.
       */
      self?: string;
      /** @description A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`. */
      users?: components["schemas"]["PagedListUserDetailsApplicationUser"];
    };
    /** @description Details about a group. */
    GroupDetails: {
      /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
      groupId?: string | null;
      /** @description The name of the group. */
      name?: string;
    };
    /** @description A group label. */
    GroupLabel: {
      /** @description The group label name. */
      text?: string;
      /** @description The title of the group label. */
      title?: string;
      /**
       * @description The type of the group label.
       * @enum {string}
       */
      type?: "ADMIN" | "SINGLE" | "MULTIPLE";
    };
    /** @description Details about a group. */
    GroupName: {
      /** @description The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. */
      groupId?: string | null;
      /** @description The name of group. */
      name?: string;
      /**
       * Format: uri
       * @description The URL for these group details.
       */
      self?: string;
    };
    /** @description Jira instance health check results. Deprecated and no longer returned. */
    HealthCheckResult: {
      /** @description The description of the Jira health check item. */
      description?: string;
      /** @description The name of the Jira health check item. */
      name?: string;
      /** @description Whether the Jira health check item passed or failed. */
      passed?: boolean;
    };
    /** @description The project issue type hierarchy. */
    Hierarchy: {
      /**
       * Format: int64
       * @description The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      baseLevelId?: number;
      /** @description Details about the hierarchy level. */
      levels?: readonly components["schemas"]["SimplifiedHierarchyLevel"][];
    };
    /** @description Details of issue history metadata. */
    HistoryMetadata: {
      /** @description The activity described in the history record. */
      activityDescription?: string;
      /** @description The key of the activity described in the history record. */
      activityDescriptionKey?: string;
      /** @description Details of the user whose action created the history record. */
      actor?: components["schemas"]["HistoryMetadataParticipant"];
      /** @description Details of the cause that triggered the creation the history record. */
      cause?: components["schemas"]["HistoryMetadataParticipant"];
      /** @description The description of the history record. */
      description?: string;
      /** @description The description key of the history record. */
      descriptionKey?: string;
      /** @description The description of the email address associated the history record. */
      emailDescription?: string;
      /** @description The description key of the email address associated the history record. */
      emailDescriptionKey?: string;
      /** @description Additional arbitrary information about the history record. */
      extraData?: {
        [key: string]: string;
      };
      /** @description Details of the system that generated the history record. */
      generator?: components["schemas"]["HistoryMetadataParticipant"];
      /** @description The type of the history record. */
      type?: string;
      [key: string]: unknown;
    };
    /** @description Details of user or system associated with a issue history metadata item. */
    HistoryMetadataParticipant: {
      /** @description The URL to an avatar for the user or system associated with a history record. */
      avatarUrl?: string;
      /** @description The display name of the user or system associated with a history record. */
      displayName?: string;
      /** @description The key of the display name of the user or system associated with a history record. */
      displayNameKey?: string;
      /** @description The ID of the user or system associated with a history record. */
      id?: string;
      /** @description The type of the user or system associated with a history record. */
      type?: string;
      /** @description The URL of the user or system associated with a history record. */
      url?: string;
      [key: string]: unknown;
    };
    /**
     * @description An icon. If no icon is defined:
     *
     *  *  for a status icon, no status icon displays in Jira.
     *  *  for the remote object icon, the default link icon displays in Jira.
     */
    Icon: {
      /** @description The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable. */
      link?: string;
      /**
       * @description The title of the icon. This is used as follows:
       *
       *  *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
       *  *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
       */
      title?: string;
      /** @description The URL of an icon that displays at 16x16 pixel in Jira. */
      url16x16?: string;
      [key: string]: unknown;
    };
    /** @description An icon. */
    IconBean: {
      /** @description The URL of the tooltip, used only for a status icon. */
      link?: string;
      /** @description The title of the icon, for use as a tooltip on the icon. */
      title?: string;
      /** @description The URL of a 16x16 pixel icon. */
      url16x16?: string;
    };
    IdBean: {
      /**
       * Format: int64
       * @description The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs.
       */
      id: number;
    };
    IdOrKeyBean: {
      /**
       * Format: int64
       * @description The ID of the referenced item.
       */
      id?: number;
      /** @description The key of the referenced item. */
      key?: string;
    };
    IdSearchRequestBean: {
      /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. Order by clauses are not allowed. */
      jql?: string;
      /**
       * Format: int32
       * @description The maximum number of items to return per page.
       * @default 1000
       */
      maxResults?: number;
      /** @description The continuation token to fetch the next page. This token is provided by the response of this endpoint. */
      nextPageToken?: string;
    };
    /** @description Result of your JQL search. Returns a list of issue IDs and a token to fetch the next page if one exists. */
    IdSearchResults: {
      /** @description The list of issue IDs found by the search. */
      issueIds?: readonly number[];
      /** @description Continuation token to fetch the next page. If this result represents the last or the only page this token will be null. */
      nextPageToken?: string;
    };
    IncludedFields: {
      actuallyIncluded?: string[];
      excluded?: string[];
      included?: string[];
    };
    InputStreamSource: {
      inputStream?: Record<string, never>;
    };
    /** @description List of Issue Ids Or Keys that are to be archived or unarchived */
    IssueArchivalSyncRequest: {
      issueIdsOrKeys?: string[];
    };
    /** @description Number of archived/unarchived issues and list of errors that occurred during the action, if any. */
    IssueArchivalSyncResponse: {
      errors?: components["schemas"]["Errors"];
      /** Format: int64 */
      numberOfIssuesUpdated?: number;
    };
    /** @description Details about an issue. */
    IssueBean: {
      /** @description Details of changelogs associated with the issue. */
      changelog?: components["schemas"]["PageOfChangelogs"];
      /** @description The metadata for the fields on the issue that can be amended. */
      editmeta?: components["schemas"]["IssueUpdateMetadata"];
      /** @description Expand options that include additional issue details in the response. */
      expand?: string;
      fields?: {
        [key: string]: unknown;
      };
      fieldsToInclude?: components["schemas"]["IncludedFields"];
      /** @description The ID of the issue. */
      id?: string;
      /** @description The key of the issue. */
      key?: string;
      /** @description The ID and name of each field present on the issue. */
      names?: {
        [key: string]: string;
      };
      /** @description The operations that can be performed on the issue. */
      operations?: components["schemas"]["Operations"];
      /** @description Details of the issue properties identified in the request. */
      properties?: {
        [key: string]: unknown;
      };
      /** @description The rendered value of each field present on the issue. */
      renderedFields?: {
        [key: string]: unknown;
      };
      /** @description The schema describing each field present on the issue. */
      schema?: {
        [key: string]: components["schemas"]["JsonTypeBean"];
      };
      /**
       * Format: uri
       * @description The URL of the issue details.
       */
      self?: string;
      /** @description The transitions that can be performed on the issue. */
      transitions?: readonly components["schemas"]["IssueTransition"][];
      /** @description The versions of each field on the issue. */
      versionedRepresentations?: {
        [key: string]: {
          [key: string]: unknown;
        };
      };
    };
    IssueBulkEditField: {
      /** @description Description of the field. */
      description?: string;
      /** @description A list of options related to the field, applicable in contexts where multiple selections are allowed. */
      fieldOptions?: components["schemas"]["IssueBulkOperationsFieldOption"][];
      /** @description The unique ID of the field. */
      id?: string;
      /** @description Indicates whether the field is mandatory for the operation. */
      isRequired?: boolean;
      /** @description Specifies supported actions (like add, replace, remove) on multi-select fields via an enum. */
      multiSelectFieldOptions?: ("ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL")[];
      /** @description The display name of the field. */
      name?: string;
      /** @description A URL to fetch additional data for the field */
      searchUrl?: string;
      /** @description The type of the field. */
      type?: string;
      /** @description A message indicating why the field is unavailable for editing. */
      unavailableMessage?: string;
    };
    /** @description Issue Bulk Edit Payload */
    IssueBulkEditPayload: {
      /** @description An object that defines the values to be updated in specified fields of an issue. The structure and content of this parameter vary depending on the type of field being edited. Although the order is not significant, ensure that field IDs align with those in selectedActions. */
      editedFieldsInput: components["schemas"]["JiraIssueFields"];
      /** @description List of all the field IDs that are to be bulk edited. Each field ID in this list corresponds to a specific attribute of an issue that is set to be modified in the bulk edit operation. The relevant field ID can be obtained by calling the Bulk Edit Get Fields REST API (documentation available on this page itself). */
      selectedActions: string[];
      /** @description List of issue IDs or keys which are to be bulk edited. These IDs or keys can be from different projects and issue types. */
      selectedIssueIdsOrKeys: string[];
    };
    /** @description Issue Bulk Move Payload */
    IssueBulkMovePayload: {
      /**
       * @description An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move.
       *
       * The key is a string that is created by concatenating the following three entities in order, separated by commas. The format is `<project ID or key>,<issueType ID>,<parent ID or key>`. It should be unique across mappings provided in the payload. If you provide multiple mappings for the same key, only one will be processed. However, the operation won't fail, so the error may be hard to track down.
       *
       *  *  ***Destination project*** (Required): ID or key of the project to which the issues are being moved.
       *  *  ***Destination issueType*** (Required): ID of the issueType to which the issues are being moved.
       *  *  ***Destination parent ID or key*** (Optional): ID or key of the issue which will become the parent of the issues being moved. Only required when the destination issueType is a subtask.
       */
      targetToSourcesMapping?: {
        [key: string]: components["schemas"]["targetToSourcesMapping"];
      };
    };
    IssueBulkOperationsFieldOption: Record<string, never>;
    /** @description A list of changelog IDs. */
    IssueChangelogIds: {
      /** @description The list of changelog IDs. */
      changelogIds: number[];
    };
    IssueCommentListRequestBean: {
      /** @description The list of comment IDs. A maximum of 1000 IDs can be specified. */
      ids: number[];
    };
    /** @description An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression. */
    IssueContextVariable: {
      /**
       * Format: int64
       * @description The issue ID.
       */
      id?: number;
      /** @description The issue key. */
      key?: string;
      /** @description Type of custom context variable. */
      type: string;
    };
    /** @description The wrapper for the issue creation metadata for a list of projects. */
    IssueCreateMetadata: {
      /** @description Expand options that include additional project details in the response. */
      expand?: string;
      /** @description List of projects and their issue creation metadata. */
      projects?: readonly components["schemas"]["ProjectIssueCreateMetadata"][];
    };
    /** @description Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
    IssueEntityProperties: {
      /** @description A list of entity property IDs. */
      entitiesIds?: number[];
      /** @description A list of entity property keys and values. */
      properties?: {
        [key: string]: components["schemas"]["JsonNode"];
      };
    };
    /** @description An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
    IssueEntityPropertiesForMultiUpdate: {
      /**
       * Format: int64
       * @description The ID of the issue.
       */
      issueID?: number;
      /** @description Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters. */
      properties?: {
        [key: string]: components["schemas"]["JsonNode"];
      };
    };
    /** @description Details about an issue event. */
    IssueEvent: {
      /**
       * Format: int64
       * @description The ID of the event.
       */
      id?: number;
      /** @description The name of the event. */
      name?: string;
    };
    /** @description Details of the options for a select list issue field. */
    IssueFieldOption: {
      config?: components["schemas"]["IssueFieldOptionConfiguration"];
      /**
       * Format: int64
       * @description The unique identifier for the option. This is only unique within the select field's set of options.
       */
      id: number;
      /** @description The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module. */
      properties?: {
        [key: string]: unknown;
      };
      /** @description The option's name, which is displayed in Jira. */
      value: string;
    };
    /** @description Details of the projects the option is available in. */
    IssueFieldOptionConfiguration: {
      /** @description DEPRECATED */
      attributes?: ("notSelectable" | "defaultValue")[];
      /** @description Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects. */
      scope?: components["schemas"]["IssueFieldOptionScopeBean"];
    };
    IssueFieldOptionCreateBean: {
      config?: components["schemas"]["IssueFieldOptionConfiguration"];
      /** @description The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module. */
      properties?: {
        [key: string]: unknown;
      };
      /** @description The option's name, which is displayed in Jira. */
      value: string;
      [key: string]: unknown;
    };
    IssueFieldOptionScopeBean: {
      /** @description Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects. */
      global?: components["schemas"]["GlobalScopeBean"];
      /** @description DEPRECATED */
      projects?: number[];
      /** @description Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context. */
      projects2?: components["schemas"]["ProjectScopeBean"][];
    };
    /** @description Bulk operation filter details. */
    IssueFilterForBulkPropertyDelete: {
      /** @description The value of properties to perform the bulk operation on. */
      currentValue?: unknown;
      /** @description List of issues to perform the bulk delete operation on. */
      entityIds?: number[];
    };
    /** @description Bulk operation filter details. */
    IssueFilterForBulkPropertySet: {
      /** @description The value of properties to perform the bulk operation on. */
      currentValue?: unknown;
      /** @description List of issues to perform the bulk operation on. */
      entityIds?: number[];
      /** @description Whether the bulk operation occurs only when the property is present on or absent from an issue. */
      hasProperty?: boolean;
    };
    IssueLimitReportRequest: {
      /** @description A list of fields and their respective approaching limit threshold. Required for querying issues approaching limits. Optional for querying issues breaching limits. Accepted fields are: `comment`, `worklog`, `attachment`, `remoteIssueLinks`, and `issuelinks`. Example: `{"issuesApproachingLimitParams": {"comment": 4500, "attachment": 1800}}` */
      issuesApproachingLimitParams?: {
        [key: string]: number;
      };
    };
    IssueLimitReportResponseBean: {
      /** @description A list of ids of issues approaching the limit and their field count */
      issuesApproachingLimit?: {
        [key: string]: {
          [key: string]: number;
        };
      };
      /** @description A list of ids of issues breaching the limit and their field count */
      issuesBreachingLimit?: {
        [key: string]: {
          [key: string]: number;
        };
      };
      /** @description The fields and their defined limits */
      limits?: {
        [key: string]: number;
      };
    };
    /** @description Details of a link between issues. */
    IssueLink: {
      /** @description The ID of the issue link. */
      id?: string;
      /** @description Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link. */
      inwardIssue: components["schemas"]["LinkedIssue"];
      /** @description Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link. */
      outwardIssue: components["schemas"]["LinkedIssue"];
      /**
       * Format: uri
       * @description The URL of the issue link.
       */
      self?: string;
      /** @description The type of link between the issues. */
      type: components["schemas"]["IssueLinkType"];
    };
    /**
     * @description This object is used as follows:
     *
     *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
     *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.
     */
    IssueLinkType: {
      /**
       * @description The ID of the issue link type and is used as follows:
       *
       *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
       *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
       */
      id?: string;
      /**
       * @description The description of the issue link type inward link and is used as follows:
       *
       *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
       *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
       */
      inward?: string;
      /**
       * @description The name of the issue link type and is used as follows:
       *
       *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
       *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
       */
      name?: string;
      /**
       * @description The description of the issue link type outward link and is used as follows:
       *
       *  *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
       *  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
       */
      outward?: string;
      /**
       * Format: uri
       * @description The URL of the issue link type. Read only.
       */
      self?: string;
    };
    /** @description A list of issue link type beans. */
    IssueLinkTypes: {
      /** @description The issue link type bean. */
      issueLinkTypes?: readonly components["schemas"]["IssueLinkType"][];
    };
    /** @description A list of issue IDs. */
    IssueList: {
      /** @description The list of issue IDs. */
      issueIds: string[];
    };
    /** @description A list of matched issues or errors for each JQL query, in the order the JQL queries were passed. */
    IssueMatches: {
      matches: components["schemas"]["IssueMatchesForJQL"][];
    };
    /** @description A list of the issues matched to a JQL query or details of errors encountered during matching. */
    IssueMatchesForJQL: {
      /** @description A list of errors. */
      errors: string[];
      /** @description A list of issue IDs. */
      matchedIssues: number[];
    };
    /** @description A list of issues suggested for use in auto-completion. */
    IssuePickerSuggestions: {
      /** @description A list of issues for an issue type suggested for use in auto-completion. */
      sections?: readonly components["schemas"]["IssuePickerSuggestionsIssueType"][];
    };
    /** @description A type of issue suggested for use in auto-completion. */
    IssuePickerSuggestionsIssueType: {
      /** @description The ID of the type of issues suggested for use in auto-completion. */
      id?: string;
      /** @description A list of issues suggested for use in auto-completion. */
      issues?: readonly components["schemas"]["SuggestedIssue"][];
      /** @description The label of the type of issues suggested for use in auto-completion. */
      label?: string;
      /** @description If no issue suggestions are found, returns a message indicating no suggestions were found, */
      msg?: string;
      /** @description If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned. */
      sub?: string;
    };
    /** @description Issue security level member. */
    IssueSecurityLevelMember: {
      /** @description The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
      holder: components["schemas"]["PermissionHolder"];
      /**
       * Format: int64
       * @description The ID of the issue security level member.
       */
      id: number;
      /**
       * Format: int64
       * @description The ID of the issue security level.
       */
      issueSecurityLevelId: number;
      managed?: boolean;
    };
    /** @description Details about an project using security scheme mapping. */
    IssueSecuritySchemeToProjectMapping: {
      issueSecuritySchemeId?: string;
      projectId?: string;
      [key: string]: unknown;
    };
    /** @description Details of an issue transition. */
    IssueTransition: {
      /** @description Expand options that include additional transition details in the response. */
      expand?: string;
      /** @description Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request. */
      fields?: {
        [key: string]: components["schemas"]["FieldMetadata"];
      };
      /** @description Whether there is a screen associated with the issue transition. */
      hasScreen?: boolean;
      /** @description The ID of the issue transition. Required when specifying a transition to undertake. */
      id?: string;
      /** @description Whether the transition is available to be performed. */
      isAvailable?: boolean;
      /** @description Whether the issue has to meet criteria before the issue transition is applied. */
      isConditional?: boolean;
      /** @description Whether the issue transition is global, that is, the transition is applied to issues regardless of their status. */
      isGlobal?: boolean;
      /** @description Whether this is the initial issue transition for the workflow. */
      isInitial?: boolean;
      looped?: boolean;
      /** @description The name of the issue transition. */
      name?: string;
      /** @description Details of the issue status after the transition. */
      to?: components["schemas"]["StatusDetails"];
      [key: string]: unknown;
    };
    IssueTypeCreateBean: {
      /** @description The description of the issue type. */
      description?: string;
      /**
       * Format: int32
       * @description The hierarchy level of the issue type. Use:
       *
       *  *  `-1` for Subtask.
       *  *  `0` for Base.
       *
       * Defaults to `0`.
       */
      hierarchyLevel?: number;
      /** @description The unique name for the issue type. The maximum length is 60 characters. */
      name: string;
      /**
       * @description Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
       *
       * Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
       * @enum {string}
       */
      type?: "subtask" | "standard";
    };
    /** @description Details about an issue type. */
    IssueTypeDetails: {
      /**
       * Format: int64
       * @description The ID of the issue type's avatar.
       */
      avatarId?: number;
      /** @description The description of the issue type. */
      description?: string;
      /**
       * Format: uuid
       * @description Unique ID for next-gen projects.
       */
      entityId?: string;
      /**
       * Format: int32
       * @description Hierarchy level of the issue type.
       */
      hierarchyLevel?: number;
      /** @description The URL of the issue type's avatar. */
      iconUrl?: string;
      /** @description The ID of the issue type. */
      id?: string;
      /** @description The name of the issue type. */
      name?: string;
      /** @description Details of the next-gen projects the issue type is available in. */
      scope?: components["schemas"]["Scope"];
      /** @description The URL of these issue type details. */
      self?: string;
      /** @description Whether this issue type is used to create subtasks. */
      subtask?: boolean;
    };
    /** @description The list of issue type IDs. */
    IssueTypeIds: {
      /** @description The list of issue type IDs. */
      issueTypeIds: string[];
    };
    /** @description The list of issue type IDs to be removed from the field configuration scheme. */
    IssueTypeIdsToRemove: {
      /** @description The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs. */
      issueTypeIds: string[];
    };
    /** @description Details of an issue type. */
    IssueTypeInfo: {
      /**
       * Format: int64
       * @description The avatar of the issue type.
       */
      avatarId?: number;
      /**
       * Format: int64
       * @description The ID of the issue type.
       */
      id?: number;
      /** @description The name of the issue type. */
      name?: string;
    };
    /** @description Details of the issue creation metadata for an issue type. */
    IssueTypeIssueCreateMetadata: {
      /**
       * Format: int64
       * @description The ID of the issue type's avatar.
       */
      avatarId?: number;
      /** @description The description of the issue type. */
      description?: string;
      /**
       * Format: uuid
       * @description Unique ID for next-gen projects.
       */
      entityId?: string;
      /** @description Expand options that include additional issue type metadata details in the response. */
      expand?: string;
      /** @description List of the fields available when creating an issue for the issue type. */
      fields?: {
        [key: string]: components["schemas"]["FieldMetadata"];
      };
      /**
       * Format: int32
       * @description Hierarchy level of the issue type.
       */
      hierarchyLevel?: number;
      /** @description The URL of the issue type's avatar. */
      iconUrl?: string;
      /** @description The ID of the issue type. */
      id?: string;
      /** @description The name of the issue type. */
      name?: string;
      /** @description Details of the next-gen projects the issue type is available in. */
      scope?: components["schemas"]["Scope"];
      /** @description The URL of these issue type details. */
      self?: string;
      /** @description Whether this issue type is used to create subtasks. */
      subtask?: boolean;
    };
    /** @description Details of an issue type scheme. */
    IssueTypeScheme: {
      /** @description The ID of the default issue type of the issue type scheme. */
      defaultIssueTypeId?: string;
      /** @description The description of the issue type scheme. */
      description?: string;
      /** @description The ID of the issue type scheme. */
      id: string;
      /** @description Whether the issue type scheme is the default. */
      isDefault?: boolean;
      /** @description The name of the issue type scheme. */
      name: string;
    };
    /** @description Details of an issue type scheme and its associated issue types. */
    IssueTypeSchemeDetails: {
      /** @description The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`. */
      defaultIssueTypeId?: string;
      /** @description The description of the issue type scheme. The maximum length is 4000 characters. */
      description?: string;
      /** @description The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required. */
      issueTypeIds: string[];
      /** @description The name of the issue type scheme. The name must be unique. The maximum length is 255 characters. */
      name: string;
    };
    /** @description The ID of an issue type scheme. */
    IssueTypeSchemeID: {
      /** @description The ID of the issue type scheme. */
      issueTypeSchemeId: string;
    };
    /** @description Issue type scheme item. */
    IssueTypeSchemeMapping: {
      /** @description The ID of the issue type. */
      issueTypeId: string;
      /** @description The ID of the issue type scheme. */
      issueTypeSchemeId: string;
    };
    /** @description Details of the association between an issue type scheme and project. */
    IssueTypeSchemeProjectAssociation: {
      /** @description The ID of the issue type scheme. */
      issueTypeSchemeId: string;
      /** @description The ID of the project. */
      projectId: string;
    };
    /** @description Issue type scheme with a list of the projects that use it. */
    IssueTypeSchemeProjects: {
      /** @description Details of an issue type scheme. */
      issueTypeScheme: components["schemas"]["IssueTypeScheme"];
      /** @description The IDs of the projects using the issue type scheme. */
      projectIds: string[];
    };
    /** @description Details of the name, description, and default issue type for an issue type scheme. */
    IssueTypeSchemeUpdateDetails: {
      /** @description The ID of the default issue type of the issue type scheme. */
      defaultIssueTypeId?: string;
      /** @description The description of the issue type scheme. The maximum length is 4000 characters. */
      description?: string;
      /** @description The name of the issue type scheme. The name must be unique. The maximum length is 255 characters. */
      name?: string;
    };
    /** @description Details of an issue type screen scheme. */
    IssueTypeScreenScheme: {
      /** @description The description of the issue type screen scheme. */
      description?: string;
      /** @description The ID of the issue type screen scheme. */
      id: string;
      /** @description The name of the issue type screen scheme. */
      name: string;
    };
    /** @description The details of an issue type screen scheme. */
    IssueTypeScreenSchemeDetails: {
      /** @description The description of the issue type screen scheme. The maximum length is 255 characters. */
      description?: string;
      /** @description The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme. */
      issueTypeMappings: components["schemas"]["IssueTypeScreenSchemeMapping"][];
      /** @description The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters. */
      name: string;
    };
    /** @description The ID of an issue type screen scheme. */
    IssueTypeScreenSchemeId: {
      /** @description The ID of the issue type screen scheme. */
      id: string;
    };
    /** @description The screen scheme for an issue type. */
    IssueTypeScreenSchemeItem: {
      /** @description The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided. */
      issueTypeId: string;
      /** @description The ID of the issue type screen scheme. */
      issueTypeScreenSchemeId: string;
      /** @description The ID of the screen scheme. */
      screenSchemeId: string;
    };
    /** @description The IDs of the screen schemes for the issue type IDs. */
    IssueTypeScreenSchemeMapping: {
      /** @description The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. */
      issueTypeId: string;
      /** @description The ID of the screen scheme. Only screen schemes used in classic projects are accepted. */
      screenSchemeId: string;
    };
    /** @description A list of issue type screen scheme mappings. */
    IssueTypeScreenSchemeMappingDetails: {
      /** @description The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created. */
      issueTypeMappings: components["schemas"]["IssueTypeScreenSchemeMapping"][];
    };
    /** @description Associated issue type screen scheme and project. */
    IssueTypeScreenSchemeProjectAssociation: {
      /** @description The ID of the issue type screen scheme. */
      issueTypeScreenSchemeId?: string;
      /** @description The ID of the project. */
      projectId?: string;
    };
    /** @description Details of an issue type screen scheme. */
    IssueTypeScreenSchemeUpdateDetails: {
      /** @description The description of the issue type screen scheme. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters. */
      name?: string;
    };
    /** @description Issue type screen scheme with a list of the projects that use it. */
    IssueTypeScreenSchemesProjects: {
      /** @description Details of an issue type screen scheme. */
      issueTypeScreenScheme: components["schemas"]["IssueTypeScreenScheme"];
      /** @description The IDs of the projects using the issue type screen scheme. */
      projectIds: string[];
    };
    /** @description Mapping of an issue type to a context. */
    IssueTypeToContextMapping: {
      /** @description The ID of the context. */
      contextId: string;
      /** @description Whether the context is mapped to any issue type. */
      isAnyIssueType?: boolean;
      /** @description The ID of the issue type. */
      issueTypeId?: string;
    };
    IssueTypeUpdateBean: {
      /**
       * Format: int64
       * @description The ID of an issue type avatar.
       */
      avatarId?: number;
      /** @description The description of the issue type. */
      description?: string;
      /** @description The unique name for the issue type. The maximum length is 60 characters. */
      name?: string;
    };
    /** @description Status details for an issue type. */
    IssueTypeWithStatus: {
      /** @description The ID of the issue type. */
      id: string;
      /** @description The name of the issue type. */
      name: string;
      /** @description The URL of the issue type's status details. */
      self: string;
      /** @description List of status details for the issue type. */
      statuses: readonly components["schemas"]["StatusDetails"][];
      /** @description Whether this issue type represents subtasks. */
      subtask: boolean;
    };
    /** @description Details about the mapping between an issue type and a workflow. */
    IssueTypeWorkflowMapping: {
      /** @description The ID of the issue type. Not required if updating the issue type-workflow mapping. */
      issueType?: string;
      /** @description Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping. */
      updateDraftIfNeeded?: boolean;
      /** @description The name of the workflow. */
      workflow?: string;
    };
    /** @description Details about the mapping between issue types and a workflow. */
    IssueTypesWorkflowMapping: {
      /** @description Whether the workflow is the default workflow for the workflow scheme. */
      defaultMapping?: boolean;
      /** @description The list of issue type IDs. */
      issueTypes?: string[];
      /** @description Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`. */
      updateDraftIfNeeded?: boolean;
      /** @description The name of the workflow. Optional if updating the workflow-issue types mapping. */
      workflow?: string;
    };
    /** @description Details of an issue update request. */
    IssueUpdateDetails: {
      /** @description List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`. */
      fields?: {
        [key: string]: unknown;
      };
      /** @description Additional issue history details. */
      historyMetadata?: components["schemas"]["HistoryMetadata"];
      /** @description Details of issue properties to be add or update. */
      properties?: components["schemas"]["EntityProperty"][];
      /** @description Details of a transition. Required when performing a transition, optional when creating or editing an issue. */
      transition?: components["schemas"]["IssueTransition"];
      /** @description A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`. */
      update?: {
        [key: string]: components["schemas"]["FieldUpdateOperation"][];
      };
      [key: string]: unknown;
    };
    /** @description A list of editable field details. */
    IssueUpdateMetadata: {
      fields?: {
        [key: string]: components["schemas"]["FieldMetadata"];
      };
    };
    /** @description List of issues and JQL queries. */
    IssuesAndJQLQueries: {
      /** @description A list of issue IDs. */
      issueIds: number[];
      /** @description A list of JQL queries. */
      jqls: string[];
    };
    /** @description The description of the page of issues loaded by the provided JQL query. */
    IssuesJqlMetaDataBean: {
      /**
       * Format: int32
       * @description The number of issues that were loaded in this evaluation.
       */
      count: number;
      /**
       * Format: int32
       * @description The maximum number of issues that could be loaded in this evaluation.
       */
      maxResults: number;
      /**
       * Format: int64
       * @description The index of the first issue.
       */
      startAt: number;
      /**
       * Format: int64
       * @description The total number of issues the JQL returned.
       */
      totalCount: number;
      /** @description Any warnings related to the JQL query. Present only if the validation mode was set to `warn`. */
      validationWarnings?: string[];
    };
    /** @description Meta data describing the `issues` context variable. */
    IssuesMetaBean: {
      jql?: components["schemas"]["IssuesJqlMetaDataBean"];
    };
    IssuesUpdateBean: {
      issueUpdates?: components["schemas"]["IssueUpdateDetails"][];
      [key: string]: unknown;
    };
    /** @description The JQL queries to be converted. */
    JQLPersonalDataMigrationRequest: {
      /** @description A list of queries with user identifiers. Maximum of 100 queries. */
      queryStrings?: string[];
    };
    /** @description JQL queries that contained users that could not be found */
    JQLQueryWithUnknownUsers: {
      /** @description The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found */
      convertedQuery?: string;
      /** @description The original query, for reference */
      originalQuery?: string;
    };
    /** @description Lists of JQL reference data. */
    JQLReferenceData: {
      /** @description List of JQL query reserved words. */
      jqlReservedWords?: string[];
      /** @description List of fields usable in JQL queries. */
      visibleFieldNames?: components["schemas"]["FieldReferenceData"][];
      /** @description List of functions usable in JQL queries. */
      visibleFunctionNames?: components["schemas"]["FunctionReferenceData"][];
    };
    /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. */
    JexpIssues: {
      /** @description The JQL query that specifies the set of issues available in the Jira expression. */
      jql?: components["schemas"]["JexpJqlIssues"];
    };
    /** @description The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response. */
    JexpJqlIssues: {
      /**
       * Format: int32
       * @description The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
       */
      maxResults?: number;
      /** @description The JQL query. */
      query?: string;
      /**
       * Format: int64
       * @description The index of the first issue to return from the JQL query.
       */
      startAt?: number;
      /**
       * @description Determines how to validate the JQL query and treat the validation results.
       * @default strict
       * @enum {string}
       */
      validation?: "strict" | "warn" | "none";
    };
    JiraCascadingSelectField: {
      childOptionValue?: components["schemas"]["JiraSelectedOptionField"];
      fieldId: string;
      parentOptionValue: components["schemas"]["JiraSelectedOptionField"];
    };
    JiraColorField: {
      color: components["schemas"]["JiraColorInput"];
      fieldId: string;
    };
    JiraColorInput: {
      name: string;
    };
    JiraComponentField: {
      /** Format: int64 */
      componentId: number;
    };
    JiraDateField: {
      date?: components["schemas"]["JiraDateInput"];
      fieldId: string;
    };
    JiraDateInput: {
      formattedDate: string;
    };
    JiraDateTimeField: {
      dateTime: components["schemas"]["JiraDateTimeInput"];
      fieldId: string;
    };
    JiraDateTimeInput: {
      formattedDateTime: string;
    };
    /** @description Details about the analysed Jira expression. */
    JiraExpressionAnalysis: {
      complexity?: components["schemas"]["JiraExpressionComplexity"];
      /** @description A list of validation errors. Not included if the expression is valid. */
      errors?: components["schemas"]["JiraExpressionValidationError"][];
      /** @description The analysed expression. */
      expression: string;
      /** @description EXPERIMENTAL. The inferred type of the expression. */
      type?: string;
      /** @description Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations). */
      valid: boolean;
    };
    /** @description Details about the complexity of the analysed Jira expression. */
    JiraExpressionComplexity: {
      /**
       * @description Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
       *
       *  *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
       *  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
       */
      expensiveOperations: string;
      /** @description Variables used in the formula, mapped to the parts of the expression they refer to. */
      variables?: {
        [key: string]: string;
      };
    };
    JiraExpressionEvalContextBean: {
      /**
       * Format: int64
       * @description The ID of the board that is available under the `board` variable when evaluating the expression.
       */
      board?: number;
      /**
       * @description Custom context variables and their types. These variable types are available for use in a custom context:
       *
       *  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
       *  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
       *  *  `json`: A JSON object containing custom content.
       *  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
       */
      custom?: components["schemas"]["CustomContextVariable"][];
      /**
       * Format: int64
       * @description The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
       */
      customerRequest?: number;
      /** @description The issue that is available under the `issue` variable when evaluating the expression. */
      issue?: components["schemas"]["IdOrKeyBean"];
      /** @description The collection of issues that is available under the `issues` variable when evaluating the expression. */
      issues?: components["schemas"]["JexpIssues"];
      /** @description The project that is available under the `project` variable when evaluating the expression. */
      project?: components["schemas"]["IdOrKeyBean"];
      /**
       * Format: int64
       * @description The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
       */
      serviceDesk?: number;
      /**
       * Format: int64
       * @description The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
       */
      sprint?: number;
    };
    JiraExpressionEvalRequestBean: {
      /** @description The context in which the Jira expression is evaluated. */
      context?: components["schemas"]["JiraExpressionEvalContextBean"];
      /**
       * @description The Jira expression to evaluate.
       * @example { key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id) }
       */
      expression: string;
    };
    JiraExpressionEvaluationMetaDataBean: {
      /** @description Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression. */
      complexity?: components["schemas"]["JiraExpressionsComplexityBean"];
      /** @description Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here. */
      issues?: components["schemas"]["IssuesMetaBean"];
    };
    /** @description Details of Jira expressions for analysis. */
    JiraExpressionForAnalysis: {
      /** @description Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables. */
      contextVariables?: {
        [key: string]: string;
      };
      /**
       * @description The list of Jira expressions to analyse.
       * @example issues.map(issue => issue.properties['property_key'])
       */
      expressions: string[];
    };
    /** @description The result of evaluating a Jira expression. */
    JiraExpressionResult: {
      /** @description Contains various characteristics of the performed expression evaluation. */
      meta?: components["schemas"]["JiraExpressionEvaluationMetaDataBean"];
      /** @description The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.) */
      value: unknown;
    };
    /**
     * @description Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
     *
     *  *  `line` and `column`
     *  *  `expression`
     */
    JiraExpressionValidationError: {
      /**
       * Format: int32
       * @description The text column in which the error occurred.
       */
      column?: number;
      /** @description The part of the expression in which the error occurred. */
      expression?: string;
      /**
       * Format: int32
       * @description The text line in which the error occurred.
       */
      line?: number;
      /**
       * @description Details about the error.
       * @example !, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.
       */
      message: string;
      /**
       * @description The error type.
       * @enum {string}
       */
      type: "syntax" | "type" | "other";
    };
    /** @description Details about the analysed Jira expression. */
    JiraExpressionsAnalysis: {
      /** @description The results of Jira expressions analysis. */
      results: components["schemas"]["JiraExpressionAnalysis"][];
    };
    JiraExpressionsComplexityBean: {
      /** @description The number of Jira REST API beans returned in the response. */
      beans: components["schemas"]["JiraExpressionsComplexityValueBean"];
      /** @description The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields. */
      expensiveOperations: components["schemas"]["JiraExpressionsComplexityValueBean"];
      /** @description The number of primitive values returned in the response. */
      primitiveValues: components["schemas"]["JiraExpressionsComplexityValueBean"];
      /** @description The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function. */
      steps: components["schemas"]["JiraExpressionsComplexityValueBean"];
    };
    JiraExpressionsComplexityValueBean: {
      /**
       * Format: int32
       * @description The maximum allowed complexity. The evaluation will fail if this value is exceeded.
       */
      limit: number;
      /**
       * Format: int32
       * @description The complexity value of the current expression.
       */
      value: number;
    };
    JiraGroupInput: {
      groupName: string;
    };
    JiraIssueFields: {
      /**
       * @description Add or clear a cascading select field:
       *
       *  *  To add, specify `optionId` for both parent and child.
       *  *  To clear the child, set its `optionId` to null.
       *  *  To clear both, set the parent's `optionId` to null.
       */
      cascadingSelectFields?: components["schemas"]["JiraCascadingSelectField"][];
      /**
       * @description Add or clear a number field:
       *
       *  *  To add, specify a numeric `value`.
       *  *  To clear, set `value` to `null`.
       */
      clearableNumberFields?: components["schemas"]["JiraNumberField"][];
      /**
       * @description Add or clear a color field:
       *
       *  *  To add, specify the color `name`. Available colors are: `purple`, `blue`, `green`, `teal`, `yellow`, `orange`, `grey`, `dark purple`, `dark blue`, `dark green`, `dark teal`, `dark yellow`, `dark orange`, `dark grey`.
       *  *  To clear, set the color `name` to an empty string.
       */
      colorFields?: components["schemas"]["JiraColorField"][];
      /**
       * @description Add or clear a date picker field:
       *
       *  *  To add, specify the date in `d/mmm/yy` format or ISO format `dd-mm-yyyy`.
       *  *  To clear, set `formattedDate` to an empty string.
       */
      datePickerFields?: components["schemas"]["JiraDateField"][];
      /**
       * @description Add or clear the planned start date and time:
       *
       *  *  To add, specify the date and time in ISO format for `formattedDateTime`.
       *  *  To clear, provide an empty string for `formattedDateTime`.
       */
      dateTimePickerFields?: components["schemas"]["JiraDateTimeField"][];
      /** @description Set the issue type field by providing an `issueTypeId`. */
      issueType?: components["schemas"]["JiraIssueTypeField"];
      /**
       * @description Edit a labels field:
       *
       *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
       *  *  To clear labels, use the `REMOVE_ALL` option with an empty `labels` array.
       */
      labelsFields?: components["schemas"]["JiraLabelsField"][];
      /**
       * @description Add or clear a multi-group picker field:
       *
       *  *  To add groups, provide an array of groups with `groupName`s.
       *  *  To clear all groups, use an empty `groups` array.
       */
      multipleGroupPickerFields?: components["schemas"]["JiraMultipleGroupPickerField"][];
      /**
       * @description Assign or unassign multiple users to/from a field:
       *
       *  *  To assign, provide an array of user `accountId`s.
       *  *  To clear, set `users` to `null`.
       */
      multipleSelectClearableUserPickerFields?: components["schemas"]["JiraMultipleSelectUserPickerField"][];
      /**
       * @description Add or clear a multi-select field:
       *
       *  *  To add, provide an array of options with `optionId`s.
       *  *  To clear, use an empty `options` array.
       */
      multipleSelectFields?: components["schemas"]["JiraMultipleSelectField"][];
      /**
       * @description Edit a multi-version picker field like Fix Versions/Affects Versions:
       *
       *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
       *  *  To clear the field, use the `REMOVE_ALL` option with an empty `versions` array.
       */
      multipleVersionPickerFields?: components["schemas"]["JiraMultipleVersionPickerField"][];
      /**
       * @description Edit a multi select components field:
       *
       *  *  Options include `ADD`, `REPLACE`, `REMOVE`, or `REMOVE_ALL` for bulk edits.
       *  *  To clear, use the `REMOVE_ALL` option with an empty `components` array.
       */
      multiselectComponents?: components["schemas"]["JiraMultiSelectComponentField"];
      /** @description Set the priority of an issue by specifying a `priorityId`. */
      priority?: components["schemas"]["JiraPriorityField"];
      /**
       * @description Add or clear a rich text field:
       *
       *  *  To add, provide `adfValue`. Note that rich text fields only support ADF values.
       *  *  To clear, use an empty `richText` object.
       *
       * For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure).
       */
      richTextFields?: components["schemas"]["JiraRichTextField"][];
      /**
       * @description Add or clear a single group picker field:
       *
       *  *  To add, specify the group with `groupName`.
       *  *  To clear, set `groupName` to an empty string.
       */
      singleGroupPickerFields?: components["schemas"]["JiraSingleGroupPickerField"][];
      /**
       * @description Add or clear a single line text field:
       *
       *  *  To add, provide the `text` value.
       *  *  To clear, set `text` to an empty string.
       */
      singleLineTextFields?: components["schemas"]["JiraSingleLineTextField"][];
      /**
       * @description Edit assignment for single select user picker fields like Assignee/Reporter:
       *
       *  *  To assign an issue, specify the user's `accountId`.
       *  *  To unassign an issue, set `user` to `null`.
       *  *  For automatic assignment, set `accountId` to `-1`.
       */
      singleSelectClearableUserPickerFields?: components["schemas"]["JiraSingleSelectUserPickerField"][];
      /**
       * @description Add or clear a single select field:
       *
       *  *  To add, specify the option with an `optionId`.
       *  *  To clear, pass an option with `optionId` as `-1`.
       */
      singleSelectFields?: components["schemas"]["JiraSingleSelectField"][];
      /**
       * @description Add or clear a single version picker field:
       *
       *  *  To add, specify the version with a `versionId`.
       *  *  To clear, set `versionId` to `-1`.
       */
      singleVersionPickerFields?: components["schemas"]["JiraSingleVersionPickerField"][];
      /**
       * @description Add or clear a URL field:
       *
       *  *  To add, provide the `url` with the desired URL value.
       *  *  To clear, set `url` to an empty string.
       */
      urlFields?: components["schemas"]["JiraUrlField"][];
    };
    JiraIssueTypeField: {
      issueTypeId: string;
    };
    JiraLabelsField: {
      /** @enum {string} */
      bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
      fieldId: string;
      labels: components["schemas"]["JiraLabelsInput"][];
    };
    JiraLabelsInput: {
      name: string;
    };
    JiraMultiSelectComponentField: {
      /** @enum {string} */
      bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
      components: components["schemas"]["JiraComponentField"][];
      fieldId: string;
    };
    JiraMultipleGroupPickerField: {
      fieldId: string;
      groups: components["schemas"]["JiraGroupInput"][];
    };
    JiraMultipleSelectField: {
      fieldId: string;
      options: components["schemas"]["JiraSelectedOptionField"][];
    };
    JiraMultipleSelectUserPickerField: {
      fieldId: string;
      users?: components["schemas"]["JiraUserField"][];
    };
    JiraMultipleVersionPickerField: {
      /** @enum {string} */
      bulkEditMultiSelectFieldOption: "ADD" | "REMOVE" | "REPLACE" | "REMOVE_ALL";
      fieldId: string;
      versions: components["schemas"]["JiraVersionField"][];
    };
    JiraNumberField: {
      fieldId: string;
      /** Format: double */
      value?: number;
    };
    JiraPriorityField: {
      priorityId: string;
    };
    JiraRichTextField: {
      fieldId: string;
      richText: components["schemas"]["JiraRichTextInput"];
    };
    JiraRichTextInput: {
      adfValue?: {
        [key: string]: unknown;
      };
    };
    JiraSelectedOptionField: {
      /** Format: int64 */
      optionId?: number;
    };
    JiraSingleGroupPickerField: {
      fieldId: string;
      group: components["schemas"]["JiraGroupInput"];
    };
    JiraSingleLineTextField: {
      fieldId: string;
      text: string;
    };
    /**
     * @description Add or clear a single select field:
     *
     *  *  To add, specify the option with an `optionId`.
     *  *  To clear, pass an option with `optionId` as `-1`.
     */
    JiraSingleSelectField: {
      fieldId: string;
      option: components["schemas"]["JiraSelectedOptionField"];
    };
    JiraSingleSelectUserPickerField: {
      fieldId: string;
      user?: components["schemas"]["JiraUserField"];
    };
    JiraSingleVersionPickerField: {
      fieldId: string;
      version: components["schemas"]["JiraVersionField"];
    };
    /** @description Details of a status. */
    JiraStatus: {
      /** @description The description of the status. */
      description?: string;
      /** @description The ID of the status. */
      id?: string;
      /** @description The name of the status. */
      name?: string;
      scope?: components["schemas"]["StatusScope"];
      /**
       * @description The category of the status.
       * @enum {string}
       */
      statusCategory?: "TODO" | "IN_PROGRESS" | "DONE";
      /** @description Projects and issue types where the status is used. Only available if the `usages` expand is requested. */
      usages?: components["schemas"]["ProjectIssueTypes"][];
      /** @description The workflows that use this status. Only available if the `workflowUsages` expand is requested. */
      workflowUsages?: components["schemas"]["WorkflowUsages"][];
    };
    JiraUrlField: {
      fieldId: string;
      url: string;
    };
    JiraUserField: {
      accountId: string;
    };
    JiraVersionField: {
      versionId?: string;
    };
    /** @description Details of a workflow. */
    JiraWorkflow: {
      /** @description The description of the workflow. */
      description?: string;
      /** @description The ID of the workflow. */
      id?: string;
      /** @description Indicates if the workflow can be edited. */
      isEditable?: boolean;
      /** @description The name of the workflow. */
      name?: string;
      scope?: components["schemas"]["WorkflowScope"];
      startPointLayout?: components["schemas"]["WorkflowLayout"];
      /** @description The statuses referenced in this workflow. */
      statuses?: components["schemas"]["WorkflowReferenceStatus"][];
      /** @description If there is a current [asynchronous task](#async-operations) operation for this workflow. */
      taskId?: string | null;
      /** @description The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
      transitions?: components["schemas"]["WorkflowTransitions"][];
      /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows. */
      usages?: components["schemas"]["ProjectIssueTypes"][];
      version?: components["schemas"]["DocumentVersion"];
    };
    /** @description Details of a status. */
    JiraWorkflowStatus: {
      /** @description The description of the status. */
      description?: string;
      /** @description The ID of the status. */
      id?: string;
      /** @description The name of the status. */
      name?: string;
      scope?: components["schemas"]["WorkflowScope"];
      /**
       * @description The category of the status.
       * @enum {string}
       */
      statusCategory?: "TODO" | "IN_PROGRESS" | "DONE";
      /** @description The reference of the status. */
      statusReference?: string;
      /** @description The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses. */
      usages?: components["schemas"]["ProjectIssueTypes"][];
    };
    /** @description Jql function precomputation. */
    JqlFunctionPrecomputationBean: {
      /** @description The list of arguments function was invoked with. */
      arguments?: readonly string[];
      /**
       * Format: date-time
       * @description The timestamp of the precomputation creation.
       */
      created?: string;
      /** @description The error message to be displayed to the user. */
      error?: string;
      /** @description The field the function was executed against. */
      field?: string;
      /** @description The function key. */
      functionKey?: string;
      /** @description The name of the function. */
      functionName?: string;
      /** @description The id of the precomputation. */
      id?: string;
      /** @description The operator in context of which function was executed. */
      operator?: string;
      /**
       * Format: date-time
       * @description The timestamp of the precomputation last update.
       */
      updated?: string;
      /**
       * Format: date-time
       * @description The timestamp of the precomputation last usage.
       */
      used?: string;
      /** @description The JQL fragment stored as the precomputation. */
      value?: string;
    };
    /** @description Precomputation id and its new value. */
    JqlFunctionPrecomputationUpdateBean: {
      /** @description The error message to be displayed to the user if the given function clause is no longer valid during recalculation of the precomputation. */
      error?: string;
      /** @description The id of the precomputation to update. */
      id: string;
      /** @description The new value of the precomputation. */
      value?: string;
    };
    /** @description List of pairs (id and value) for precomputation updates. */
    JqlFunctionPrecomputationUpdateRequestBean: {
      values?: components["schemas"]["JqlFunctionPrecomputationUpdateBean"][];
    };
    /** @description A list of JQL queries to parse. */
    JqlQueriesToParse: {
      /** @description A list of queries to parse. */
      queries: string[];
    };
    /** @description The list of JQL queries to sanitize for the given account IDs. */
    JqlQueriesToSanitize: {
      /** @description The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries. */
      queries: components["schemas"]["JqlQueryToSanitize"][];
    };
    /** @description A parsed JQL query. */
    JqlQuery: {
      orderBy?: components["schemas"]["JqlQueryOrderByClause"];
      where?: components["schemas"]["JqlQueryClause"];
    };
    /** @description A JQL query clause. */
    JqlQueryClause: components["schemas"]["CompoundClause"] | components["schemas"]["FieldValueClause"] | components["schemas"]["FieldWasClause"] | components["schemas"]["FieldChangedClause"];
    /** @description Details of an operand in a JQL clause. */
    JqlQueryClauseOperand: components["schemas"]["ListOperand"] | components["schemas"]["ValueOperand"] | components["schemas"]["FunctionOperand"] | components["schemas"]["KeywordOperand"];
    /** @description A time predicate for a temporal JQL clause. */
    JqlQueryClauseTimePredicate: {
      operand: components["schemas"]["JqlQueryClauseOperand"];
      /**
       * @description The operator between the field and the operand.
       * @enum {string}
       */
      operator: "before" | "after" | "from" | "to" | "on" | "during" | "by";
    };
    /** @description A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries. */
    JqlQueryField: {
      /** @description The encoded name of the field, which can be used directly in a JQL query. */
      encodedName?: string;
      /** @description The name of the field. */
      name: string;
      /** @description When the field refers to a value in an entity property, details of the entity property value. */
      property?: components["schemas"]["JqlQueryFieldEntityProperty"][];
    };
    /** @description Details of an entity property. */
    JqlQueryFieldEntityProperty: {
      /**
       * @description The object on which the property is set.
       * @example issue
       */
      entity: string;
      /**
       * @description The key of the property.
       * @example stats
       */
      key: string;
      /**
       * @description The path in the property value to query.
       * @example comments.count
       */
      path: string;
      /**
       * @description The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
       * @example number
       * @enum {string}
       */
      type?: "number" | "string" | "text" | "date" | "user";
    };
    /** @description Details of the order-by JQL clause. */
    JqlQueryOrderByClause: {
      /** @description The list of order-by clause fields and their ordering directives. */
      fields: components["schemas"]["JqlQueryOrderByClauseElement"][];
    };
    /** @description An element of the order-by JQL clause. */
    JqlQueryOrderByClauseElement: {
      /**
       * @description The direction in which to order the results.
       * @enum {string}
       */
      direction?: "asc" | "desc";
      field: components["schemas"]["JqlQueryField"];
    };
    /** @description The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user. */
    JqlQueryToSanitize: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      accountId?: string | null;
      /** @description The query to sanitize. */
      query: string;
    };
    /** @description An operand that can be part of a list operand. */
    JqlQueryUnitaryOperand: components["schemas"]["ValueOperand"] | components["schemas"]["FunctionOperand"] | components["schemas"]["KeywordOperand"];
    /** @description A JSON object with custom content. */
    JsonContextVariable: {
      /** @description Type of custom context variable. */
      type: string;
      /** @description A JSON object containing custom content. */
      value?: Record<string, never>;
    };
    JsonNode: {
      array?: boolean;
      bigDecimal?: boolean;
      bigInteger?: boolean;
      bigIntegerValue?: number;
      binary?: boolean;
      binaryValue?: string[];
      boolean?: boolean;
      booleanValue?: boolean;
      containerNode?: boolean;
      decimalValue?: number;
      double?: boolean;
      /** Format: double */
      doubleValue?: number;
      elements?: Record<string, never>;
      fieldNames?: Record<string, never>;
      fields?: Record<string, never>;
      floatingPointNumber?: boolean;
      int?: boolean;
      /** Format: int32 */
      intValue?: number;
      integralNumber?: boolean;
      long?: boolean;
      /** Format: int64 */
      longValue?: number;
      missingNode?: boolean;
      null?: boolean;
      number?: boolean;
      /** @enum {string} */
      numberType?: "INT" | "LONG" | "BIG_INTEGER" | "FLOAT" | "DOUBLE" | "BIG_DECIMAL";
      numberValue?: number;
      object?: boolean;
      pojo?: boolean;
      textValue?: string;
      textual?: boolean;
      valueAsBoolean?: boolean;
      /** Format: double */
      valueAsDouble?: number;
      /** Format: int32 */
      valueAsInt?: number;
      /** Format: int64 */
      valueAsLong?: number;
      valueAsText?: string;
      valueNode?: boolean;
    };
    /** @description The schema of a field. */
    JsonTypeBean: {
      /** @description If the field is a custom field, the configuration of the field. */
      configuration?: {
        [key: string]: unknown;
      };
      /** @description If the field is a custom field, the URI of the field. */
      custom?: string;
      /**
       * Format: int64
       * @description If the field is a custom field, the custom ID of the field.
       */
      customId?: number;
      /** @description When the data type is an array, the name of the field items within the array. */
      items?: string;
      /** @description If the field is a system field, the name of the field. */
      system?: string;
      /** @description The data type of the field. */
      type: string;
    };
    /** @description An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords. */
    KeywordOperand: {
      /**
       * @description The keyword that is the operand value.
       * @enum {string}
       */
      keyword: "empty";
    };
    LegacyJackson1ListAttachment: components["schemas"]["Attachment"][];
    LegacyJackson1ListColumnItem: components["schemas"]["ColumnItem"][];
    LegacyJackson1ListIssueEvent: components["schemas"]["IssueEvent"][];
    LegacyJackson1ListIssueTypeWithStatus: components["schemas"]["IssueTypeWithStatus"][];
    LegacyJackson1ListProject: components["schemas"]["Project"][];
    LegacyJackson1ListProjectComponent: components["schemas"]["ProjectComponent"][];
    LegacyJackson1ListProjectRoleDetails: components["schemas"]["ProjectRoleDetails"][];
    LegacyJackson1ListProjectType: components["schemas"]["ProjectType"][];
    LegacyJackson1ListUserMigrationBean: components["schemas"]["UserMigrationBean"][];
    LegacyJackson1ListVersion: components["schemas"]["Version"][];
    LegacyJackson1ListWorklog: components["schemas"]["Worklog"][];
    /** @description Details about a license for the Jira instance. */
    License: {
      /** @description The applications under this license. */
      applications: readonly components["schemas"]["LicensedApplication"][];
    };
    /** @description A metric that provides insight into the active licence details */
    LicenseMetric: {
      /** @description The key of a specific license metric. */
      key?: string;
      /** @description The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts. */
      value?: string;
    };
    /** @description Details about a licensed Jira application. */
    LicensedApplication: {
      /** @description The ID of the application. */
      id: string;
      /**
       * @description The licensing plan.
       * @enum {string}
       */
      plan: "UNLICENSED" | "FREE" | "PAID";
    };
    /** @description Details a link group, which defines issue operations. */
    LinkGroup: {
      groups?: components["schemas"]["LinkGroup"][];
      header?: components["schemas"]["SimpleLink"];
      id?: string;
      links?: components["schemas"]["SimpleLink"][];
      styleClass?: string;
      /** Format: int32 */
      weight?: number;
    };
    LinkIssueRequestJsonBean: {
      comment?: components["schemas"]["Comment"];
      inwardIssue: components["schemas"]["LinkedIssue"];
      outwardIssue: components["schemas"]["LinkedIssue"];
      type: components["schemas"]["IssueLinkType"];
    };
    /** @description The ID or key of a linked issue. */
    LinkedIssue: {
      /** @description The fields associated with the issue. */
      fields?: components["schemas"]["Fields"];
      /** @description The ID of an issue. Required if `key` isn't provided. */
      id?: string;
      /** @description The key of an issue. Required if `id` isn't provided. */
      key?: string;
      /**
       * Format: uri
       * @description The URL of the issue.
       */
      self?: string;
    };
    /** @description An operand that is a list of values. */
    ListOperand: {
      /** @description Encoded operand, which can be used directly in a JQL query. */
      encodedOperand?: string;
      /** @description The list of operand values. */
      values: components["schemas"]["JqlQueryUnitaryOperand"][];
    };
    ListWrapperCallbackApplicationRole: Record<string, never>;
    ListWrapperCallbackGroupName: Record<string, never>;
    /** @description Details of a locale. */
    Locale: {
      /** @description The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create. */
      locale?: string;
    };
    /** @description List of string of inputs */
    MandatoryFieldValue: {
      /**
       * @description If `true`, will try to retain original non-null issue field values on move.
       * @default true
       */
      retain?: boolean | null;
      /**
       * @description Will treat as `MandatoryFieldValue` if type is `raw` or `empty`
       * @default raw
       * @enum {string|null}
       */
      type?: "adf" | "raw" | null;
      /** @description Value for each field. Provide a `list of strings` for non-ADF fields. */
      value: string[];
    };
    /** @description An object notation input */
    MandatoryFieldValueForADF: {
      /**
       * @description If `true`, will try to retain original non-null issue field values on move.
       * @default true
       */
      retain?: boolean | null;
      /**
       * @description Will treat as `MandatoryFieldValueForADF` if type is `adf`
       * @default raw
       * @enum {string}
       */
      type: "adf" | "raw";
      /** @description Value for each field. Accepts Atlassian Document Format (ADF) for rich text fields like `description`, `environments`. For ADF format details, refer to: [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure) */
      value: Record<string, never>;
    };
    /** @description Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
    MappingsByIssueTypeOverride: {
      /** @description The ID of the issue type for this mapping. */
      issueTypeId: string;
      /** @description The list of status mappings. */
      statusMappings: components["schemas"]["WorkflowAssociationStatusMapping"][];
    };
    /** @description The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
    MappingsByWorkflow: {
      /** @description The ID of the new workflow. */
      newWorkflowId: string;
      /** @description The ID of the old workflow. */
      oldWorkflowId: string;
      /** @description The list of status mappings. */
      statusMappings: components["schemas"]["WorkflowAssociationStatusMapping"][];
    };
    MoveFieldBean: {
      /**
       * Format: uri
       * @description The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
       */
      after?: string;
      /**
       * @description The named position to which the screen tab field should be moved. Required if `after` isn't provided.
       * @enum {string}
       */
      position?: "Earlier" | "Later" | "First" | "Last";
    };
    /** @description A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information. */
    MultiIssueEntityProperties: {
      /** @description A list of issue IDs and their respective properties. */
      issues?: components["schemas"]["IssueEntityPropertiesForMultiUpdate"][];
    };
    MultipartFile: {
      bytes?: string[];
      contentType?: string;
      empty?: boolean;
      inputStream?: Record<string, never>;
      name?: string;
      originalFilename?: string;
      resource?: components["schemas"]["Resource"];
      /** Format: int64 */
      size?: number;
    };
    /** @description A custom field and its new value with a list of issue to update. */
    MultipleCustomFieldValuesUpdate: {
      /** @description The ID or key of the custom field. For example, `customfield_10010`. */
      customField: string;
      /** @description The list of issue IDs. */
      issueIds: number[];
      /**
       * @description The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
       *
       *  *  `string` the value must be a string.
       *  *  `number` the value must be a number.
       *  *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
       *  *  `user` the value must be an object that contains the `accountId` field.
       *  *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
       *
       * A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
       */
      value: unknown;
    };
    /** @description List of updates for a custom fields. */
    MultipleCustomFieldValuesUpdateDetails: {
      updates?: components["schemas"]["MultipleCustomFieldValuesUpdate"][];
    };
    NestedResponse: {
      errorCollection?: components["schemas"]["ErrorCollection"];
      /** Format: int32 */
      status?: number;
      warningCollection?: components["schemas"]["WarningCollection"];
    };
    /** @description The user details. */
    NewUserDetails: {
      /** @description Deprecated, do not use. */
      applicationKeys?: string[];
      /** @description This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account. */
      displayName?: string;
      /** @description The email address for the user. */
      emailAddress: string;
      /** @description This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      key?: string;
      /** @description This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
      /** @description This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account. */
      password?: string;
      /** @description Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. To create a user without product access, set this field to be an empty array. */
      products: string[];
      /** @description The URL of the user. */
      self?: string;
      [key: string]: unknown;
    };
    /** @description Details about a notification. */
    Notification: {
      /** @description The HTML body of the email notification for the issue. */
      htmlBody?: string;
      /** @description Restricts the notifications to users with the specified permissions. */
      restrict?: components["schemas"]["NotificationRecipientsRestrictions"];
      /** @description The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary. */
      subject?: string;
      /** @description The plain text body of the email notification for the issue. */
      textBody?: string;
      /** @description The recipients of the email notification for the issue. */
      to?: components["schemas"]["NotificationRecipients"];
      [key: string]: unknown;
    };
    /** @description Details about a notification event. */
    NotificationEvent: {
      /** @description The description of the event. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
       */
      id?: number;
      /** @description The name of the event. */
      name?: string;
      /** @description The template of the event. Only custom events configured by Jira administrators have template. */
      templateEvent?: components["schemas"]["NotificationEvent"];
    };
    /** @description Details of the users and groups to receive the notification. */
    NotificationRecipients: {
      /** @description Whether the notification should be sent to the issue's assignees. */
      assignee?: boolean;
      /** @description List of groupIds to receive the notification. */
      groupIds?: string[];
      /** @description List of groups to receive the notification. */
      groups?: components["schemas"]["GroupName"][];
      /** @description Whether the notification should be sent to the issue's reporter. */
      reporter?: boolean;
      /** @description List of users to receive the notification. */
      users?: components["schemas"]["UserDetails"][];
      /** @description Whether the notification should be sent to the issue's voters. */
      voters?: boolean;
      /** @description Whether the notification should be sent to the issue's watchers. */
      watchers?: boolean;
      [key: string]: unknown;
    };
    /** @description Details of the group membership or permissions needed to receive the notification. */
    NotificationRecipientsRestrictions: {
      /** @description List of groupId memberships required to receive the notification. */
      groupIds?: string[];
      /** @description List of group memberships required to receive the notification. */
      groups?: components["schemas"]["GroupName"][];
      /** @description List of permissions required to receive the notification. */
      permissions?: components["schemas"]["RestrictedPermission"][];
    };
    /** @description Details about a notification scheme. */
    NotificationScheme: {
      /** @description The description of the notification scheme. */
      description?: string;
      /** @description Expand options that include additional notification scheme details in the response. */
      expand?: string;
      /**
       * Format: int64
       * @description The ID of the notification scheme.
       */
      id?: number;
      /** @description The name of the notification scheme. */
      name?: string;
      /** @description The notification events and associated recipients. */
      notificationSchemeEvents?: components["schemas"]["NotificationSchemeEvent"][];
      /** @description The list of project IDs associated with the notification scheme. */
      projects?: number[];
      /** @description The scope of the notification scheme. */
      scope?: components["schemas"]["Scope"];
      self?: string;
    };
    NotificationSchemeAndProjectMappingJsonBean: {
      notificationSchemeId?: string;
      projectId?: string;
    };
    /** @description Details about a notification scheme event. */
    NotificationSchemeEvent: {
      event?: components["schemas"]["NotificationEvent"];
      notifications?: components["schemas"]["EventNotification"][];
    };
    /** @description Details of a notification scheme event. */
    NotificationSchemeEventDetails: {
      /** @description The ID of the event. */
      event: components["schemas"]["NotificationSchemeEventTypeId"];
      /** @description The list of notifications mapped to a specified event. */
      notifications: components["schemas"]["NotificationSchemeNotificationDetails"][];
      [key: string]: unknown;
    };
    /** @description The ID of an event that is being mapped to notifications. */
    NotificationSchemeEventTypeId: {
      /** @description The ID of the notification scheme event. */
      id: string;
      [key: string]: unknown;
    };
    /** @description The ID of a notification scheme. */
    NotificationSchemeId: {
      /** @description The ID of a notification scheme. */
      id: string;
      [key: string]: unknown;
    };
    /** @description Details of a notification within a notification scheme. */
    NotificationSchemeNotificationDetails: {
      /** @description The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`. */
      notificationType: string;
      /** @description The value corresponding to the specified notification type. */
      parameter?: string;
      [key: string]: unknown;
    };
    OldToNewSecurityLevelMappingsBean: {
      /** @description The new issue security level ID. Providing null will clear the assigned old level from issues. */
      newLevelId: string;
      /** @description The old issue security level ID. Providing null will remap all issues without any assigned levels. */
      oldLevelId: string;
    };
    /**
     * @example {
     *   "message": "An example message.",
     *   "statusCode": 200
     * }
     */
    OperationMessage: {
      /** @description The human-readable message that describes the result. */
      message: string;
      /** @description The status code of the response. */
      statusCode: number;
    };
    /** @description Details of the operations that can be performed on the issue. */
    Operations: {
      /** @description Details of the link groups defining issue operations. */
      linkGroups?: readonly components["schemas"]["LinkGroup"][];
      [key: string]: unknown;
    };
    /** @description An ordered list of custom field option IDs and information on where to move them. */
    OrderOfCustomFieldOptions: {
      /** @description The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided. */
      after?: string;
      /** @description A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both. */
      customFieldOptionIds: string[];
      /**
       * @description The position the custom field options should be moved to. Required if `after` isn't provided.
       * @enum {string}
       */
      position?: "First" | "Last";
    };
    /** @description An ordered list of issue type IDs and information about where to move them. */
    OrderOfIssueTypes: {
      /** @description The ID of the issue type to place the moved issue types after. Required if `position` isn't provided. */
      after?: string;
      /** @description A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move. */
      issueTypeIds: string[];
      /**
       * @description The position the issue types should be moved to. Required if `after` isn't provided.
       * @enum {string}
       */
      position?: "First" | "Last";
    };
    /** @description A page of items. */
    PageBean2ComponentJsonBean: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ComponentJsonBean"][];
    };
    /** @description A page of items. */
    PageBeanChangelog: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Changelog"][];
    };
    /** @description A page of items. */
    PageBeanComment: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Comment"][];
    };
    /** @description A page of items. */
    PageBeanComponentWithIssueCount: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ComponentWithIssueCount"][];
    };
    /** @description A page of items. */
    PageBeanContext: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Context"][];
    };
    /** @description A page of items. */
    PageBeanContextForProjectAndIssueType: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ContextForProjectAndIssueType"][];
    };
    /** @description A page of items. */
    PageBeanContextualConfiguration: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ContextualConfiguration"][];
    };
    /** @description A page of items. */
    PageBeanCustomFieldContext: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["CustomFieldContext"][];
    };
    /** @description A page of items. */
    PageBeanCustomFieldContextDefaultValue: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["CustomFieldContextDefaultValue"][];
    };
    /** @description A page of items. */
    PageBeanCustomFieldContextOption: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["CustomFieldContextOption"][];
    };
    /** @description A page of items. */
    PageBeanCustomFieldContextProjectMapping: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["CustomFieldContextProjectMapping"][];
    };
    /** @description A page of items. */
    PageBeanDashboard: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Dashboard"][];
    };
    /** @description A page of items. */
    PageBeanField: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Field"][];
    };
    /** @description A page of items. */
    PageBeanFieldConfigurationDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FieldConfigurationDetails"][];
    };
    /** @description A page of items. */
    PageBeanFieldConfigurationIssueTypeItem: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FieldConfigurationIssueTypeItem"][];
    };
    /** @description A page of items. */
    PageBeanFieldConfigurationItem: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FieldConfigurationItem"][];
    };
    /** @description A page of items. */
    PageBeanFieldConfigurationScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FieldConfigurationScheme"][];
    };
    /** @description A page of items. */
    PageBeanFieldConfigurationSchemeProjects: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FieldConfigurationSchemeProjects"][];
    };
    /** @description A page of items. */
    PageBeanFilterDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["FilterDetails"][];
    };
    /** @description A page of items. */
    PageBeanGroupDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["GroupDetails"][];
    };
    /** @description A page of items. */
    PageBeanIssueFieldOption: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueFieldOption"][];
    };
    /** @description A page of items. */
    PageBeanIssueSecurityLevelMember: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueSecurityLevelMember"][];
    };
    /** @description A page of items. */
    PageBeanIssueSecuritySchemeToProjectMapping: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueSecuritySchemeToProjectMapping"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeScheme"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeSchemeMapping: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeSchemeMapping"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeSchemeProjects: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeSchemeProjects"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeScreenScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeScreenScheme"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeScreenSchemeItem: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeScreenSchemeItem"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeScreenSchemesProjects: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeScreenSchemesProjects"][];
    };
    /** @description A page of items. */
    PageBeanIssueTypeToContextMapping: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["IssueTypeToContextMapping"][];
    };
    /** @description A page of items. */
    PageBeanJqlFunctionPrecomputationBean: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["JqlFunctionPrecomputationBean"][];
    };
    /** @description A page of items. */
    PageBeanNotificationScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["NotificationScheme"][];
    };
    /** @description A page of items. */
    PageBeanNotificationSchemeAndProjectMappingJsonBean: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["NotificationSchemeAndProjectMappingJsonBean"][];
    };
    /** @description A page of items. */
    PageBeanPriority: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Priority"][];
    };
    /** @description A page of items. */
    PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["PrioritySchemeWithPaginatedPrioritiesAndProjects"][];
    };
    /** @description A page of items. */
    PageBeanPriorityWithSequence: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["PriorityWithSequence"][];
    };
    /** @description A page of items. */
    PageBeanProject: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Project"][];
    };
    /** @description A page of items. */
    PageBeanProjectDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ProjectDetails"][];
    };
    /** @description A page of items. */
    PageBeanResolutionJsonBean: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ResolutionJsonBean"][];
    };
    /** @description A page of items. */
    PageBeanScreen: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Screen"][];
    };
    /** @description A page of items. */
    PageBeanScreenScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ScreenScheme"][];
    };
    /** @description A page of items. */
    PageBeanScreenWithTab: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["ScreenWithTab"][];
    };
    /** @description A page of items. */
    PageBeanSecurityLevel: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["SecurityLevel"][];
    };
    /** @description A page of items. */
    PageBeanSecurityLevelMember: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["SecurityLevelMember"][];
    };
    /** @description A page of items. */
    PageBeanSecuritySchemeWithProjects: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["SecuritySchemeWithProjects"][];
    };
    /** @description A page of items. */
    PageBeanString: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly string[];
    };
    /** @description A page of items. */
    PageBeanUiModificationDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["UiModificationDetails"][];
    };
    /** @description A page of items. */
    PageBeanUser: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["User"][];
    };
    /** @description A page of items. */
    PageBeanUserDetails: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["UserDetails"][];
    };
    /** @description A page of items. */
    PageBeanUserKey: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["UserKey"][];
    };
    /** @description A page of items. */
    PageBeanVersion: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Version"][];
    };
    /** @description A page of items. */
    PageBeanWebhook: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Webhook"][];
    };
    /** @description A page of items. */
    PageBeanWorkflow: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["Workflow"][];
    };
    /** @description A page of items. */
    PageBeanWorkflowScheme: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["WorkflowScheme"][];
    };
    /** @description A page of items. */
    PageBeanWorkflowTransitionRules: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: uri
       * @description If there is another page of results, the URL of the next page.
       */
      nextPage?: string;
      /**
       * Format: uri
       * @description The URL of the page.
       */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      /** @description The list of items. */
      values?: readonly components["schemas"]["WorkflowTransitionRules"][];
    };
    /** @description A page of changelogs. */
    PageOfChangelogs: {
      /** @description The list of changelogs. */
      histories?: readonly components["schemas"]["Changelog"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      maxResults?: number;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
      /**
       * Format: int32
       * @description The number of results on the page.
       */
      total?: number;
    };
    /** @description A page of comments. */
    PageOfComments: {
      /** @description The list of comments. */
      comments?: readonly components["schemas"]["Comment"][];
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The number of items returned.
       */
      total?: number;
      [key: string]: unknown;
    };
    /** @description A page of CreateMetaIssueType with Field. */
    PageOfCreateMetaIssueTypeWithField: {
      /** @description The collection of FieldCreateMetaBeans. */
      fields?: readonly components["schemas"]["FieldCreateMetadata"][];
      /**
       * Format: int32
       * @description The maximum number of items to return per page.
       */
      maxResults?: number;
      results?: components["schemas"]["FieldCreateMetadata"][];
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The total number of items in all pages.
       */
      total?: number;
      [key: string]: unknown;
    };
    /** @description A page of CreateMetaIssueTypes. */
    PageOfCreateMetaIssueTypes: {
      createMetaIssueType?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
      /** @description The list of CreateMetaIssueType. */
      issueTypes?: readonly components["schemas"]["IssueTypeIssueCreateMetadata"][];
      /**
       * Format: int32
       * @description The maximum number of items to return per page.
       */
      maxResults?: number;
      /**
       * Format: int64
       * @description The index of the first item returned.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description The total number of items in all pages.
       */
      total?: number;
      [key: string]: unknown;
    };
    /** @description A page containing dashboard details. */
    PageOfDashboards: {
      /** @description List of dashboards. */
      dashboards?: readonly components["schemas"]["Dashboard"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      maxResults?: number;
      /** @description The URL of the next page of results, if any. */
      next?: string;
      /** @description The URL of the previous page of results, if any. */
      prev?: string;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
      /**
       * Format: int32
       * @description The number of results on the page.
       */
      total?: number;
    };
    PageOfStatuses: {
      /** @description Whether this is the last page. */
      isLast?: boolean;
      /**
       * Format: int32
       * @description The maximum number of items that could be returned.
       */
      maxResults?: number;
      /** @description The URL of the next page of results, if any. */
      nextPage?: string;
      /** @description The URL of this page. */
      self?: string;
      /**
       * Format: int64
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
      /**
       * Format: int64
       * @description Number of items that satisfy the search.
       */
      total?: number;
      /** @description The list of items. */
      values?: components["schemas"]["JiraStatus"][];
    };
    /** @description Paginated list of worklog details */
    PageOfWorklogs: {
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      maxResults?: number;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
      /**
       * Format: int32
       * @description The number of results on the page.
       */
      total?: number;
      /** @description List of worklogs. */
      worklogs?: readonly components["schemas"]["Worklog"][];
      [key: string]: unknown;
    };
    /** @description A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40. */
    PagedListUserDetailsApplicationUser: {
      /**
       * Format: int32
       * @description The index of the last item returned on the page.
       */
      "end-index"?: number;
      /** @description The list of items. */
      items?: readonly components["schemas"]["UserDetails"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      "max-results"?: number;
      /**
       * Format: int32
       * @description The number of items on the page.
       */
      size?: number;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      "start-index"?: number;
    };
    PaginatedResponseComment: {
      /** Format: int32 */
      maxResults?: number;
      results?: components["schemas"]["Comment"][];
      /** Format: int64 */
      startAt?: number;
      /** Format: int64 */
      total?: number;
    };
    PaginatedResponseFieldCreateMetadata: {
      /** Format: int32 */
      maxResults?: number;
      results?: components["schemas"]["FieldCreateMetadata"][];
      /** Format: int64 */
      startAt?: number;
      /** Format: int64 */
      total?: number;
    };
    PaginatedResponseIssueTypeIssueCreateMetadata: {
      /** Format: int32 */
      maxResults?: number;
      results?: components["schemas"]["IssueTypeIssueCreateMetadata"][];
      /** Format: int64 */
      startAt?: number;
      /** Format: int64 */
      total?: number;
    };
    /** @description A list of parsed JQL queries. */
    ParsedJqlQueries: {
      /** @description A list of parsed JQL queries. */
      queries: components["schemas"]["ParsedJqlQuery"][];
    };
    /** @description Details of a parsed JQL query. */
    ParsedJqlQuery: {
      /** @description The list of syntax or validation errors. */
      errors?: string[];
      /** @description The JQL query that was parsed and validated. */
      query: string;
      /** @description The syntax tree of the query. Empty if the query was invalid. */
      structure?: components["schemas"]["JqlQuery"];
    };
    /** @description Details for permissions of shareable entities */
    PermissionDetails: {
      /** @description The edit permissions for the shareable entities. */
      editPermissions: components["schemas"]["SharePermission"][];
      /** @description The share permissions for the shareable entities. */
      sharePermissions: components["schemas"]["SharePermission"][];
    };
    /** @description Details about a permission granted to a user or group. */
    PermissionGrant: {
      /** @description The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
      holder?: components["schemas"]["PermissionHolder"];
      /**
       * Format: int64
       * @description The ID of the permission granted details.
       */
      id?: number;
      /** @description The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions. */
      permission?: string;
      /**
       * Format: uri
       * @description The URL of the permission granted details.
       */
      self?: string;
      [key: string]: unknown;
    };
    /** @description List of permission grants. */
    PermissionGrants: {
      /** @description Expand options that include additional permission grant details in the response. */
      expand?: string;
      /** @description Permission grants list. */
      permissions?: readonly components["schemas"]["PermissionGrant"][];
    };
    /** @description Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
    PermissionHolder: {
      /** @description Expand options that include additional permission holder details in the response. */
      expand?: string;
      /** @description As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission. */
      parameter?: string;
      /** @description The type of permission holder. */
      type: string;
      /** @description The identifier associated with the `type` value that defines the holder of the permission. */
      value?: string;
    };
    /** @description Details of a permission scheme. */
    PermissionScheme: {
      /** @description A description for the permission scheme. */
      description?: string;
      /** @description The expand options available for the permission scheme. */
      expand?: string;
      /**
       * Format: int64
       * @description The ID of the permission scheme.
       */
      id?: number;
      /** @description The name of the permission scheme. Must be unique. */
      name: string;
      /** @description The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information. */
      permissions?: components["schemas"]["PermissionGrant"][];
      /** @description The scope of the permission scheme. */
      scope?: components["schemas"]["Scope"];
      /**
       * Format: uri
       * @description The URL of the permission scheme.
       */
      self?: string;
      [key: string]: unknown;
    };
    /** @description List of all permission schemes. */
    PermissionSchemes: {
      /** @description Permission schemes list. */
      permissionSchemes?: readonly components["schemas"]["PermissionScheme"][];
    };
    /** @description Details about permissions. */
    Permissions: {
      /** @description List of permissions. */
      permissions?: {
        [key: string]: components["schemas"]["UserPermission"];
      };
    };
    PermissionsKeysBean: {
      /** @description A list of permission keys. */
      permissions: string[];
    };
    /** @description A list of projects in which a user is granted permissions. */
    PermittedProjects: {
      /** @description A list of projects. */
      projects?: readonly components["schemas"]["ProjectIdentifierBean"][];
    };
    /** @description An issue priority. */
    Priority: {
      /** @description The description of the issue priority. */
      description?: string;
      /** @description The URL of the icon for the issue priority. */
      iconUrl?: string;
      /** @description The ID of the issue priority. */
      id?: string;
      /** @description Whether this priority is the default. */
      isDefault?: boolean;
      /** @description The name of the issue priority. */
      name?: string;
      /** @description Priority schemes associated with the issue priority. */
      schemes?: components["schemas"]["ExpandPrioritySchemePage"];
      /** @description The URL of the issue priority. */
      self?: string;
      /** @description The color used to indicate the issue priority. */
      statusColor?: string;
      [key: string]: unknown;
    };
    /** @description The ID of an issue priority. */
    PriorityId: {
      /** @description The ID of the issue priority. */
      id: string;
      [key: string]: unknown;
    };
    /** @description Mapping of issue priorities for changes in priority schemes. */
    PriorityMapping: {
      /** @description The mapping of priorities for issues being migrated **into** this priority scheme. Key is the old priority ID, value is the new priority ID (must exist in this priority scheme). */
      in?: {
        [key: string]: number;
      };
      /** @description The mapping of priorities for issues being migrated **out of** this priority scheme. Key is the old priority ID (must exist in this priority scheme), value is the new priority ID (must exist in the default priority scheme). Required for updating an existing priority scheme. Not used when creating a new priority scheme. */
      out?: {
        [key: string]: number;
      };
    };
    PrioritySchemeChangesWithMappings: {
      /** @description Affected entity ids. */
      ids: number[];
      /** @description Instructions to migrate issues. */
      mappings?: components["schemas"]["PriorityMapping"][];
    };
    PrioritySchemeChangesWithoutMappings: {
      /** @description Affected entity ids. */
      ids: number[];
    };
    /** @description The ID of a priority scheme. */
    PrioritySchemeId: {
      /** @description The ID of the priority scheme. */
      id?: string;
      /** @description The in-progress issue migration task. */
      task?: components["schemas"]["TaskProgressBeanJsonNode"];
    };
    /** @description A priority scheme with paginated priorities and projects. */
    PrioritySchemeWithPaginatedPrioritiesAndProjects: {
      default?: boolean;
      /** @description The ID of the default issue priority. */
      defaultPriorityId?: string;
      /** @description The description of the priority scheme */
      description?: string;
      /** @description The ID of the priority scheme. */
      id: string;
      isDefault?: boolean;
      /** @description The name of the priority scheme */
      name: string;
      /** @description The paginated list of priorities. */
      priorities?: components["schemas"]["PageBeanPriorityWithSequence"];
      /** @description The paginated list of projects. */
      projects?: components["schemas"]["PageBeanProjectDetails"];
      /** @description The URL of the priority scheme. */
      self?: string;
      [key: string]: unknown;
    };
    /** @description An issue priority with sequence information. */
    PriorityWithSequence: {
      /** @description The description of the issue priority. */
      description?: string;
      /** @description The URL of the icon for the issue priority. */
      iconUrl?: string;
      /** @description The ID of the issue priority. */
      id?: string;
      /** @description Whether this priority is the default. */
      isDefault?: boolean;
      /** @description The name of the issue priority. */
      name?: string;
      /** @description The URL of the issue priority. */
      self?: string;
      /** @description The sequence of the issue priority. */
      sequence?: string;
      /** @description The color used to indicate the issue priority. */
      statusColor?: string;
    };
    /** @description Details about a project. */
    Project: {
      /** @description Whether the project is archived. */
      archived?: boolean;
      /** @description The user who archived the project. */
      archivedBy?: components["schemas"]["User"];
      /**
       * Format: date-time
       * @description The date when the project was archived.
       */
      archivedDate?: string;
      /**
       * @description The default assignee when creating issues for this project.
       * @enum {string}
       */
      assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
      /** @description The URLs of the project's avatars. */
      avatarUrls?: components["schemas"]["AvatarUrlsBean"];
      /** @description List of the components contained in the project. */
      components?: readonly components["schemas"]["ProjectComponent"][];
      /** @description Whether the project is marked as deleted. */
      deleted?: boolean;
      /** @description The user who marked the project as deleted. */
      deletedBy?: components["schemas"]["User"];
      /**
       * Format: date-time
       * @description The date when the project was marked as deleted.
       */
      deletedDate?: string;
      /** @description A brief description of the project. */
      description?: string;
      /** @description An email address associated with the project. */
      email?: string;
      /** @description Expand options that include additional project details in the response. */
      expand?: string;
      /** @description Whether the project is selected as a favorite. */
      favourite?: boolean;
      /** @description The ID of the project. */
      id?: string;
      /** @description Insights about the project. */
      insight?: components["schemas"]["ProjectInsight"];
      /** @description Whether the project is private from the user's perspective. This means the user can't see the project or any associated issues. */
      isPrivate?: boolean;
      /** @description The issue type hierarchy for the project. */
      issueTypeHierarchy?: components["schemas"]["Hierarchy"];
      /** @description List of the issue types available in the project. */
      issueTypes?: readonly components["schemas"]["IssueTypeDetails"][];
      /** @description The key of the project. */
      key?: string;
      /** @description The project landing page info. */
      landingPageInfo?: components["schemas"]["ProjectLandingPageInfo"];
      /** @description The username of the project lead. */
      lead?: components["schemas"]["User"];
      /** @description The name of the project. */
      name?: string;
      /** @description User permissions on the project */
      permissions?: components["schemas"]["ProjectPermissions"];
      /** @description The category the project belongs to. */
      projectCategory?: components["schemas"]["ProjectCategory"];
      /**
       * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
       * @enum {string}
       */
      projectTypeKey?: "software" | "service_desk" | "business";
      /** @description Map of project properties */
      properties?: {
        [key: string]: unknown;
      };
      /**
       * Format: date-time
       * @description The date when the project is deleted permanently.
       */
      retentionTillDate?: string;
      /** @description The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post). */
      roles?: {
        [key: string]: string;
      };
      /**
       * Format: uri
       * @description The URL of the project details.
       */
      self?: string;
      /** @description Whether the project is simplified. */
      simplified?: boolean;
      /**
       * @description The type of the project.
       * @enum {string}
       */
      style?: "classic" | "next-gen";
      /** @description A link to information about this project, such as project documentation. */
      url?: string;
      /**
       * Format: uuid
       * @description Unique ID for next-gen projects.
       */
      uuid?: string;
      /** @description The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post). */
      versions?: readonly components["schemas"]["Version"][];
    };
    /** @description A project and issueType ID pair that identifies a status mapping. */
    ProjectAndIssueTypePair: {
      /** @description The ID of the issue type. */
      issueTypeId: string;
      /** @description The ID of the project. */
      projectId: string;
    };
    /** @description List of project avatars. */
    ProjectAvatars: {
      /** @description List of avatars added to Jira. These avatars may be deleted. */
      custom?: readonly components["schemas"]["Avatar"][];
      /** @description List of avatars included with Jira. These avatars cannot be deleted. */
      system?: readonly components["schemas"]["Avatar"][];
    };
    /** @description A project category. */
    ProjectCategory: {
      /** @description The description of the project category. */
      description?: string;
      /** @description The ID of the project category. */
      id?: string;
      /** @description The name of the project category. Required on create, optional on update. */
      name?: string;
      /**
       * Format: uri
       * @description The URL of the project category.
       */
      self?: string;
    };
    /** @description Details about a project component. */
    ProjectComponent: {
      /** @description Compass component's ID. Can't be updated. Not required for creating a Project Component. */
      ari?: string;
      /** @description The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component. */
      assignee?: components["schemas"]["User"];
      /**
       * @description The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
       *
       *  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
       *  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
       *  *  `UNASSIGNED` an assignee is not set for issues created with this component.
       *  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
       *
       * Default value: `PROJECT_DEFAULT`.
       * Optional when creating or updating a component.
       * @enum {string}
       */
      assigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
      /** @description The description for the component. Optional when creating or updating a component. */
      description?: string;
      /** @description The unique identifier for the component. */
      id?: string;
      /** @description Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned. */
      isAssigneeTypeValid?: boolean;
      /** @description The user details for the component's lead user. */
      lead?: components["schemas"]["User"];
      /** @description The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      leadAccountId?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      leadUserName?: string;
      /** @description Compass component's metadata. Can't be updated. Not required for creating a Project Component. */
      metadata?: {
        [key: string]: string;
      };
      /** @description The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters. */
      name?: string;
      /** @description The key of the project the component is assigned to. Required when creating a component. Can't be updated. */
      project?: string;
      /**
       * Format: int64
       * @description The ID of the project the component is assigned to.
       */
      projectId?: number;
      /** @description The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee. */
      realAssignee?: components["schemas"]["User"];
      /**
       * @description The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
       *
       *  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
       *  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
       *  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
       *  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
       * @enum {string}
       */
      realAssigneeType?: "PROJECT_DEFAULT" | "COMPONENT_LEAD" | "PROJECT_LEAD" | "UNASSIGNED";
      /**
       * Format: uri
       * @description The URL of the component.
       */
      self?: string;
    };
    /** @description Details about data policies for a list of projects. */
    ProjectDataPolicies: {
      /** @description List of projects with data policies. */
      projectDataPolicies?: readonly components["schemas"]["ProjectWithDataPolicy"][];
    };
    /** @description Details about data policy. */
    ProjectDataPolicy: {
      /** @description Whether the project contains any content inaccessible to the requesting application. */
      anyContentBlocked?: boolean;
    };
    /** @description Details about a project. */
    ProjectDetails: {
      /** @description The URLs of the project's avatars. */
      avatarUrls?: components["schemas"]["AvatarUrlsBean"];
      /** @description The ID of the project. */
      id?: string;
      /** @description The key of the project. */
      key?: string;
      /** @description The name of the project. */
      name?: string;
      /** @description The category the project belongs to. */
      projectCategory?: components["schemas"]["UpdatedProjectCategory"];
      /**
       * @description The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
       * @enum {string}
       */
      projectTypeKey?: "software" | "service_desk" | "business";
      /** @description The URL of the project details. */
      self?: string;
      /** @description Whether or not the project is simplified. */
      simplified?: boolean;
    };
    /** @description A project's sender email address. */
    ProjectEmailAddress: {
      /** @description The email address. */
      emailAddress?: string;
      /** @description When using a custom domain, the status of the email address. */
      emailAddressStatus?: string[];
    };
    /** @description Details of a project feature. */
    ProjectFeature: {
      /** @description The key of the feature. */
      feature?: string;
      /** @description URI for the image representing the feature. */
      imageUri?: string;
      /** @description Localized display description for the feature. */
      localisedDescription?: string;
      /** @description Localized display name for the feature. */
      localisedName?: string;
      /** @description List of keys of the features required to enable the feature. */
      prerequisites?: string[];
      /**
       * Format: int64
       * @description The ID of the project.
       */
      projectId?: number;
      /**
       * @description The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
       * @enum {string}
       */
      state?: "ENABLED" | "DISABLED" | "COMING_SOON";
      /** @description Whether the state of the feature can be updated. */
      toggleLocked?: boolean;
    };
    /** @description Details of the feature state. */
    ProjectFeatureState: {
      /**
       * @description The feature state.
       * @enum {string}
       */
      state?: "ENABLED" | "DISABLED" | "COMING_SOON";
    };
    /** @description Project ID details. */
    ProjectId: {
      /** @description The ID of the project. */
      id: string;
    } | null;
    /** @description The identifiers for a project. */
    ProjectIdentifierBean: {
      /**
       * Format: int64
       * @description The ID of the project.
       */
      id?: number;
      /** @description The key of the project. */
      key?: string;
    };
    /** @description Identifiers for a project. */
    ProjectIdentifiers: {
      /**
       * Format: int64
       * @description The ID of the created project.
       */
      id: number;
      /** @description The key of the created project. */
      key: string;
      /**
       * Format: uri
       * @description The URL of the created project.
       */
      self: string;
    };
    /** @description A list of project IDs. */
    ProjectIds: {
      /** @description The IDs of projects. */
      projectIds: string[];
    };
    /** @description Additional details about a project. */
    ProjectInsight: {
      /**
       * Format: date-time
       * @description The last issue update time.
       */
      lastIssueUpdateTime?: string;
      /**
       * Format: int64
       * @description Total issue count.
       */
      totalIssueCount?: number;
    };
    /** @description Details of the issue creation metadata for a project. */
    ProjectIssueCreateMetadata: {
      /** @description List of the project's avatars, returning the avatar size and associated URL. */
      avatarUrls?: components["schemas"]["AvatarUrlsBean"];
      /** @description Expand options that include additional project issue create metadata details in the response. */
      expand?: string;
      /** @description The ID of the project. */
      id?: string;
      /** @description List of the issue types supported by the project. */
      issuetypes?: readonly components["schemas"]["IssueTypeIssueCreateMetadata"][];
      /** @description The key of the project. */
      key?: string;
      /** @description The name of the project. */
      name?: string;
      /** @description The URL of the project. */
      self?: string;
    };
    /** @description List of issue level security items in a project. */
    ProjectIssueSecurityLevels: {
      /** @description Issue level security items list. */
      levels: readonly components["schemas"]["SecurityLevel"][];
    };
    /** @description The hierarchy of issue types within a project. */
    ProjectIssueTypeHierarchy: {
      /** @description Details of an issue type hierarchy level. */
      hierarchy?: readonly components["schemas"]["ProjectIssueTypesHierarchyLevel"][];
      /**
       * Format: int64
       * @description The ID of the project.
       */
      projectId?: number;
    };
    /** @description The project and issue type mapping. */
    ProjectIssueTypeMapping: {
      /** @description The ID of the issue type. */
      issueTypeId: string;
      /** @description The ID of the project. */
      projectId: string;
    };
    /** @description The project and issue type mappings. */
    ProjectIssueTypeMappings: {
      /** @description The project and issue type mappings. */
      mappings: components["schemas"]["ProjectIssueTypeMapping"][];
    };
    /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows. */
    ProjectIssueTypes: {
      /** @description IDs of the issue types */
      issueTypes?: ((string | null)[]) | null;
      project?: components["schemas"]["ProjectId"];
    };
    /** @description Details of an issue type hierarchy level. */
    ProjectIssueTypesHierarchyLevel: {
      /**
       * Format: uuid
       * @description The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      entityId?: string;
      /** @description The list of issue types in the hierarchy level. */
      issueTypes?: readonly components["schemas"]["IssueTypeInfo"][];
      /**
       * Format: int32
       * @description The level of the issue type hierarchy level.
       */
      level?: number;
      /** @description The name of the issue type hierarchy level. */
      name?: string;
    };
    ProjectLandingPageInfo: {
      attributes?: {
        [key: string]: string;
      };
      /** Format: int64 */
      boardId?: number;
      boardName?: string;
      projectKey?: string;
      projectType?: string;
      queueCategory?: string;
      /** Format: int64 */
      queueId?: number;
      queueName?: string;
      simpleBoard?: boolean;
      simplified?: boolean;
      url?: string;
    };
    /** @description Permissions which a user has on a project. */
    ProjectPermissions: {
      /** @description Whether the logged user can edit the project. */
      canEdit?: boolean;
    };
    /** @description Details about the roles in a project. */
    ProjectRole: {
      /** @description The list of users who act in this role. */
      actors?: readonly components["schemas"]["RoleActor"][];
      /** @description Whether this role is the admin role for the project. */
      admin?: boolean;
      /** @description Whether the calling user is part of this role. */
      currentUserRole?: boolean;
      /** @description Whether this role is the default role for the project */
      default?: boolean;
      /** @description The description of the project role. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the project role.
       */
      id?: number;
      /** @description The name of the project role. */
      name?: string;
      /** @description Whether the roles are configurable for this project. */
      roleConfigurable?: boolean;
      /** @description The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
      scope?: components["schemas"]["Scope"];
      /**
       * Format: uri
       * @description The URL the project role details.
       */
      self?: string;
      /** @description The translated name of the project role. */
      translatedName?: string;
    };
    ProjectRoleActorsUpdateBean: {
      /**
       * @description The actors to add to the project role.
       *
       * Add groups using:
       *
       *  *  `atlassian-group-role-actor` and a list of group names.
       *  *  `atlassian-group-role-actor-id` and a list of group IDs.
       *
       * As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
       *
       * Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
       */
      categorisedActors?: {
        [key: string]: string[];
      };
      /**
       * Format: int64
       * @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
       */
      id?: number;
    };
    /** @description Details about a project role. */
    ProjectRoleDetails: {
      /** @description Whether this role is the admin role for the project. */
      admin?: boolean;
      /** @description Whether this role is the default role for the project. */
      default?: boolean;
      /** @description The description of the project role. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the project role.
       */
      id?: number;
      /** @description The name of the project role. */
      name?: string;
      /** @description Whether the roles are configurable for this project. */
      roleConfigurable?: boolean;
      /** @description The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
      scope?: components["schemas"]["Scope"];
      /**
       * Format: uri
       * @description The URL the project role details.
       */
      self?: string;
      /** @description The translated name of the project role. */
      translatedName?: string;
    };
    /** @description Details of the group associated with the role. */
    ProjectRoleGroup: {
      /** @description The display name of the group. */
      displayName?: string;
      /** @description The ID of the group. */
      groupId?: string;
      /** @description The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group. */
      name?: string;
    };
    /** @description Details of the user associated with the role. */
    ProjectRoleUser: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import. */
      accountId?: string;
    };
    ProjectScopeBean: {
      /** @description Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default. */
      attributes?: ("notSelectable" | "defaultValue")[];
      /**
       * Format: int64
       * @description The ID of the project that the option's behavior applies to.
       */
      id?: number;
    };
    /** @description Details about a project type. */
    ProjectType: {
      /** @description The color of the project type. */
      color?: string;
      /** @description The key of the project type's description. */
      descriptionI18nKey?: string;
      /** @description The formatted key of the project type. */
      formattedKey?: string;
      /** @description The icon of the project type. */
      icon?: string;
      /** @description The key of the project type. */
      key?: string;
    };
    /** @description Details about data policies for a project. */
    ProjectWithDataPolicy: {
      /** @description Data policy. */
      dataPolicy?: components["schemas"]["ProjectDataPolicy"];
      /**
       * Format: int64
       * @description The project ID.
       */
      id?: number;
    };
    /** @description Property key details. */
    PropertyKey: {
      /** @description The key of the property. */
      key?: string;
      /** @description The URL of the property. */
      self?: string;
    };
    /** @description List of property keys. */
    PropertyKeys: {
      /** @description Property key details. */
      keys?: readonly components["schemas"]["PropertyKey"][];
    };
    /** @description Details about the status mappings for publishing a draft workflow scheme. */
    PublishDraftWorkflowScheme: {
      /** @description Mappings of statuses to new statuses for issue types. */
      statusMappings?: components["schemas"]["StatusMapping"][];
    };
    /** @description Properties that identify a published workflow. */
    PublishedWorkflowId: {
      /** @description The entity ID of the workflow. */
      entityId?: string;
      /** @description The name of the workflow. */
      name: string;
    };
    /** @description ID of a registered webhook or error messages explaining why a webhook wasn't registered. */
    RegisteredWebhook: {
      /**
       * Format: int64
       * @description The ID of the webhook. Returned if the webhook is created.
       */
      createdWebhookId?: number;
      /** @description Error messages specifying why the webhook creation failed. */
      errors?: string[];
    };
    /** @description Details of an issue remote link. */
    RemoteIssueLink: {
      /** @description Details of the remote application the linked item is in. */
      application?: components["schemas"]["Application"];
      /** @description The global ID of the link, such as the ID of the item on the remote system. */
      globalId?: string;
      /**
       * Format: int64
       * @description The ID of the link.
       */
      id?: number;
      /** @description Details of the item linked to. */
      object?: components["schemas"]["RemoteObject"];
      /** @description Description of the relationship between the issue and the linked item. */
      relationship?: string;
      /**
       * Format: uri
       * @description The URL of the link.
       */
      self?: string;
    };
    /** @description Details of the identifiers for a created or updated remote issue link. */
    RemoteIssueLinkIdentifies: {
      /**
       * Format: int64
       * @description The ID of the remote issue link, such as the ID of the item on the remote system.
       */
      id?: number;
      /** @description The URL of the remote issue link. */
      self?: string;
    };
    /** @description Details of a remote issue link. */
    RemoteIssueLinkRequest: {
      /** @description Details of the remote application the linked item is in. For example, trello. */
      application?: components["schemas"]["Application"];
      /**
       * @description An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
       *
       * Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
       *
       * The maximum length is 255 characters.
       */
      globalId?: string;
      /** @description Details of the item linked to. */
      object: components["schemas"]["RemoteObject"];
      /** @description Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira. */
      relationship?: string;
      [key: string]: unknown;
    };
    /** @description The linked item. */
    RemoteObject: {
      /** @description Details of the icon for the item. If no icon is defined, the default link icon is used in Jira. */
      icon?: components["schemas"]["Icon"];
      /** @description The status of the item. */
      status?: components["schemas"]["Status"];
      /** @description The summary details of the item. */
      summary?: string;
      /** @description The title of the item. */
      title: string;
      /** @description The URL of the item. */
      url: string;
      [key: string]: unknown;
    };
    RemoveOptionFromIssuesResult: {
      /** @description A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned. */
      errors?: components["schemas"]["SimpleErrorCollection"];
      /** @description The IDs of the modified issues. */
      modifiedIssues?: number[];
      /** @description The IDs of the unchanged issues, those issues where errors prevent modification. */
      unmodifiedIssues?: number[];
    };
    /** @description Change the order of issue priorities. */
    ReorderIssuePriorities: {
      /** @description The ID of the priority. Required if `position` isn't provided. */
      after?: string;
      /** @description The list of issue IDs to be reordered. Cannot contain duplicates nor after ID. */
      ids: string[];
      /** @description The position for issue priorities to be moved to. Required if `after` isn't provided. */
      position?: string;
    };
    /** @description Change the order of issue resolutions. */
    ReorderIssueResolutionsRequest: {
      /** @description The ID of the resolution. Required if `position` isn't provided. */
      after?: string;
      /** @description The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID. */
      ids: string[];
      /** @description The position for issue resolutions to be moved to. Required if `after` isn't provided. */
      position?: string;
    };
    /** @description The list of required status mappings by issue type. */
    RequiredMappingByIssueType: {
      /** @description The ID of the issue type. */
      issueTypeId?: string;
      /** @description The status IDs requiring mapping. */
      statusIds?: string[];
    };
    /** @description The list of required status mappings by workflow. */
    RequiredMappingByWorkflows: {
      /** @description The ID of the source workflow. */
      sourceWorkflowId?: string;
      /** @description The status IDs requiring mapping. */
      statusIds?: string[];
      /** @description The ID of the target workflow. */
      targetWorkflowId?: string;
    };
    /** @description Details of an issue resolution. */
    Resolution: {
      /** @description The description of the issue resolution. */
      description?: string;
      /** @description The ID of the issue resolution. */
      id?: string;
      /** @description The name of the issue resolution. */
      name?: string;
      /**
       * Format: uri
       * @description The URL of the issue resolution.
       */
      self?: string;
    };
    /** @description The ID of an issue resolution. */
    ResolutionId: {
      /** @description The ID of the issue resolution. */
      id: string;
      [key: string]: unknown;
    };
    ResolutionJsonBean: {
      default?: boolean;
      description?: string;
      iconUrl?: string;
      id?: string;
      name?: string;
      self?: string;
    };
    Resource: {
      description?: string;
      /** Format: binary */
      file?: string;
      filename?: string;
      inputStream?: Record<string, never>;
      open?: boolean;
      readable?: boolean;
      /** Format: uri */
      uri?: string;
      /** Format: url */
      url?: string;
    };
    /** @description Details of the permission. */
    RestrictedPermission: {
      /** @description The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
      id?: string;
      /** @description The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
      key?: string;
      [key: string]: unknown;
    };
    RichText: {
      empty?: boolean;
      emptyAdf?: boolean;
      finalised?: boolean;
      valueSet?: boolean;
    };
    /** @description Details about a user assigned to a project role. */
    RoleActor: {
      actorGroup?: components["schemas"]["ProjectRoleGroup"];
      actorUser?: components["schemas"]["ProjectRoleUser"];
      /**
       * Format: uri
       * @description The avatar of the role actor.
       */
      avatarUrl?: string;
      /** @description The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name. */
      displayName?: string;
      /**
       * Format: int64
       * @description The ID of the role actor.
       */
      id?: number;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
      /**
       * @description The type of role actor.
       * @enum {string}
       */
      type?: "atlassian-group-role-actor" | "atlassian-user-role-actor";
    };
    /** @description A rule configuration. */
    RuleConfiguration: {
      /**
       * @description Whether the rule is disabled.
       * @default false
       */
      disabled?: boolean;
      /** @description A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get). */
      tag?: string;
      /** @description Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page. */
      value: string;
    };
    /** @description The sanitized JQL queries for the given account IDs. */
    SanitizedJqlQueries: {
      /** @description The list of sanitized JQL queries. */
      queries?: components["schemas"]["SanitizedJqlQuery"][];
    };
    /** @description Details of the sanitized JQL query. */
    SanitizedJqlQuery: {
      /** @description The account ID of the user for whom sanitization was performed. */
      accountId?: string | null;
      /** @description The list of errors. */
      errors?: components["schemas"]["ErrorCollection"];
      /** @description The initial query. */
      initialQuery?: string;
      /** @description The sanitized query, if there were no errors. */
      sanitizedQuery?: string | null;
    };
    /** @description The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO). */
    Scope: {
      /** @description The project the item has scope in. */
      project?: components["schemas"]["ProjectDetails"];
      /**
       * @description The type of scope.
       * @enum {string}
       */
      type?: "PROJECT" | "TEMPLATE";
      [key: string]: unknown;
    };
    /** @description A screen. */
    Screen: {
      /** @description The description of the screen. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the screen.
       */
      id?: number;
      /** @description The name of the screen. */
      name?: string;
      /** @description The scope of the screen. */
      scope?: components["schemas"]["Scope"];
    };
    /** @description Details of a screen. */
    ScreenDetails: {
      /** @description The description of the screen. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the screen. The name must be unique. The maximum length is 255 characters. */
      name: string;
    };
    /** @description A screen scheme. */
    ScreenScheme: {
      /** @description The description of the screen scheme. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the screen scheme.
       */
      id?: number;
      /** @description Details of the issue type screen schemes associated with the screen scheme. */
      issueTypeScreenSchemes?: components["schemas"]["PageBeanIssueTypeScreenScheme"];
      /** @description The name of the screen scheme. */
      name?: string;
      /** @description The IDs of the screens for the screen types of the screen scheme. */
      screens?: components["schemas"]["ScreenTypes"];
    };
    /** @description Details of a screen scheme. */
    ScreenSchemeDetails: {
      /** @description The description of the screen scheme. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the screen scheme. The name must be unique. The maximum length is 255 characters. */
      name: string;
      /** @description The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted. */
      screens: components["schemas"]["ScreenTypes"];
    };
    /** @description The ID of a screen scheme. */
    ScreenSchemeId: {
      /**
       * Format: int64
       * @description The ID of the screen scheme.
       */
      id: number;
    };
    /** @description The IDs of the screens for the screen types of the screen scheme. */
    ScreenTypes: {
      /**
       * Format: int64
       * @description The ID of the create screen.
       */
      create?: number;
      /**
       * Format: int64
       * @description The ID of the default screen. Required when creating a screen scheme.
       */
      default: number;
      /**
       * Format: int64
       * @description The ID of the edit screen.
       */
      edit?: number;
      /**
       * Format: int64
       * @description The ID of the view screen.
       */
      view?: number;
    };
    /** @description A screen with tab details. */
    ScreenWithTab: {
      /** @description The description of the screen. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the screen.
       */
      id?: number;
      /** @description The name of the screen. */
      name?: string;
      /** @description The scope of the screen. */
      scope?: components["schemas"]["Scope"];
      /** @description The tab for the screen. */
      tab?: components["schemas"]["ScreenableTab"];
    };
    /** @description A screen tab field. */
    ScreenableField: {
      /** @description The ID of the screen tab field. */
      id?: string;
      /** @description The name of the screen tab field. Required on create and update. The maximum length is 255 characters. */
      name?: string;
    };
    /** @description A screen tab. */
    ScreenableTab: {
      /**
       * Format: int64
       * @description The ID of the screen tab.
       */
      id?: number;
      /** @description The name of the screen tab. The maximum length is 255 characters. */
      name: string;
    };
    /** @description Details of how to filter and list search auto complete information. */
    SearchAutoCompleteFilter: {
      /**
       * @description Include collapsed fields for fields that have non-unique names.
       * @default false
       */
      includeCollapsedFields?: boolean;
      /** @description List of project IDs used to filter the visible field details returned. */
      projectIds?: number[];
    };
    SearchRequestBean: {
      /**
       * @description Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
       *
       *  *  `renderedFields` Returns field values rendered in HTML format.
       *  *  `names` Returns the display name of each field.
       *  *  `schema` Returns the schema describing a field type.
       *  *  `transitions` Returns all possible transitions for the issue.
       *  *  `operations` Returns all possible operations for the issue.
       *  *  `editmeta` Returns information about how each field can be edited.
       *  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
       *  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
       */
      expand?: string[];
      /**
       * @description A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
       *
       *  *  `*all` Returns all fields.
       *  *  `*navigable` Returns navigable fields.
       *  *  Any issue field, prefixed with a minus to exclude.
       *
       * The default is `*navigable`.
       *
       * Examples:
       *
       *  *  `summary,comment` Returns the summary and comments fields only.
       *  *  `-description` Returns all navigable (default) fields except description.
       *  *  `*all,-comment` Returns all fields except comments.
       *
       * Multiple `fields` parameters can be included in a request.
       *
       * Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
       */
      fields?: string[];
      /** @description Reference fields by their key (rather than ID). The default is `false`. */
      fieldsByKeys?: boolean;
      /** @description A [JQL](https://confluence.atlassian.com/x/egORLQ) expression. */
      jql?: string;
      /**
       * Format: int32
       * @description The maximum number of items to return per page.
       * @default 50
       */
      maxResults?: number;
      /** @description A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list. */
      properties?: string[];
      /**
       * Format: int32
       * @description The index of the first item to return in the page of results (page offset). The base index is `0`.
       */
      startAt?: number;
      /**
       * @description Determines how to validate the JQL query and treat the validation results. Supported values:
       *
       *  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
       *  *  `warn` Returns all errors as warnings.
       *  *  `none` No validation is performed.
       *  *  `true` *Deprecated* A legacy synonym for `strict`.
       *  *  `false` *Deprecated* A legacy synonym for `warn`.
       *
       * The default is `strict`.
       *
       * Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
       * @enum {string}
       */
      validateQuery?: "strict" | "warn" | "none" | "true" | "false";
    };
    /** @description The result of a JQL search. */
    SearchResults: {
      /** @description Expand options that include additional search result details in the response. */
      expand?: string;
      /** @description The list of issues found by the search. */
      issues?: readonly components["schemas"]["IssueBean"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      maxResults?: number;
      /** @description The ID and name of each field in the search results. */
      names?: {
        [key: string]: string;
      };
      /** @description The schema describing the field types in the search results. */
      schema?: {
        [key: string]: components["schemas"]["JsonTypeBean"];
      };
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
      /**
       * Format: int32
       * @description The number of results on the page.
       */
      total?: number;
      /** @description Any warnings related to the JQL query. */
      warningMessages?: readonly string[];
    };
    /** @description Details of an issue level security item. */
    SecurityLevel: {
      /** @description The description of the issue level security item. */
      description?: string;
      /** @description The ID of the issue level security item. */
      id?: string;
      /** @description Whether the issue level security item is the default. */
      isDefault?: boolean;
      /** @description The ID of the issue level security scheme. */
      issueSecuritySchemeId?: string;
      /** @description The name of the issue level security item. */
      name?: string;
      /** @description The URL of the issue level security item. */
      self?: string;
    };
    /** @description Issue security level member. */
    SecurityLevelMember: {
      /** @description The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information. */
      holder: components["schemas"]["PermissionHolder"];
      /** @description The ID of the issue security level member. */
      id: string;
      /** @description The ID of the issue security level. */
      issueSecurityLevelId: string;
      /** @description The ID of the issue security scheme. */
      issueSecuritySchemeId: string;
      managed?: boolean;
      [key: string]: unknown;
    };
    /** @description Details about a security scheme. */
    SecurityScheme: {
      /**
       * Format: int64
       * @description The ID of the default security level.
       */
      defaultSecurityLevelId?: number;
      /** @description The description of the issue security scheme. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the issue security scheme.
       */
      id?: number;
      levels?: components["schemas"]["SecurityLevel"][];
      /** @description The name of the issue security scheme. */
      name?: string;
      /** @description The URL of the issue security scheme. */
      self?: string;
    };
    /** @description The ID of the issue security scheme. */
    SecuritySchemeId: {
      /** @description The ID of the issue security scheme. */
      id: string;
      [key: string]: unknown;
    };
    SecuritySchemeLevelBean: {
      /** @description The description of the issue security scheme level. */
      description?: string;
      /** @description Specifies whether the level is the default level. False by default. */
      isDefault?: boolean;
      /** @description The list of level members which should be added to the issue security scheme level. */
      members?: components["schemas"]["SecuritySchemeLevelMemberBean"][];
      /** @description The name of the issue security scheme level. Must be unique. */
      name: string;
    };
    SecuritySchemeLevelMemberBean: {
      /** @description The value corresponding to the specified member type. */
      parameter?: string;
      /** @description The issue security level member type, e.g `reporter`, `group`, `user`. */
      type: string;
    };
    /** @description Details of issue security scheme level new members. */
    SecuritySchemeMembersRequest: {
      /** @description The list of level members which should be added to the issue security scheme level. */
      members?: components["schemas"]["SecuritySchemeLevelMemberBean"][];
    };
    /** @description Details about an issue security scheme. */
    SecuritySchemeWithProjects: {
      /**
       * Format: int64
       * @description The default level ID of the issue security scheme.
       */
      defaultLevel?: number;
      /** @description The description of the issue security scheme. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the issue security scheme.
       */
      id: number;
      /** @description The name of the issue security scheme. */
      name: string;
      /** @description The list of project IDs associated with the issue security scheme. */
      projectIds?: readonly number[];
      /** @description The URL of the issue security scheme. */
      self: string;
      [key: string]: unknown;
    };
    /** @description List of security schemes. */
    SecuritySchemes: {
      /** @description List of security schemes. */
      issueSecuritySchemes?: readonly components["schemas"]["SecurityScheme"][];
    };
    /** @description Details about the Jira instance. */
    ServerInformation: {
      /** @description The base URL of the Jira instance. */
      baseUrl?: string;
      /**
       * Format: date-time
       * @description The timestamp when the Jira version was built.
       */
      buildDate?: string;
      /**
       * Format: int32
       * @description The build number of the Jira version.
       */
      buildNumber?: number;
      /** @description The type of server deployment. This is always returned as *Cloud*. */
      deploymentType?: string;
      /** @description The display URL of the Jira instance. */
      displayUrl?: string;
      /** @description The display URL of the Servicedesk Help Center. */
      displayUrlServicedeskHelpCenter?: string;
      /** @description Jira instance health check results. Deprecated and no longer returned. */
      healthChecks?: components["schemas"]["HealthCheckResult"][];
      /** @description The unique identifier of the Jira version. */
      scmInfo?: string;
      /**
       * Format: date-time
       * @description The time in Jira when this request was responded to.
       */
      serverTime?: string;
      /** @description The default timezone of the Jira server. In a format known as Olson Time Zones, IANA Time Zones or TZ Database Time Zones. */
      serverTimeZone?: {
        displayName?: string;
        /** Format: int32 */
        dstsavings?: number;
        id?: string;
        /** Format: int32 */
        rawOffset?: number;
      };
      /** @description The name of the Jira instance. */
      serverTitle?: string;
      /** @description The version of Jira. */
      version?: string;
      /** @description The major, minor, and revision version numbers of the Jira version. */
      versionNumbers?: number[];
    };
    ServiceManagementNavigationInfo: {
      queueCategory?: string;
      /** Format: int64 */
      queueId?: number;
      queueName?: string;
    };
    ServiceRegistry: {
      /** @description service description */
      description?: string | null;
      /**
       * Format: uuid
       * @description service ID
       */
      id?: string;
      /** @description service name */
      name?: string;
      /** @description organization ID */
      organizationId?: string;
      /** @description service revision */
      revision?: string;
      serviceTier?: components["schemas"]["ServiceRegistryTier"];
    };
    ServiceRegistryTier: {
      /** @description tier description */
      description?: string | null;
      /**
       * Format: uuid
       * @description tier ID
       */
      id?: string;
      /** @description tier level */
      level?: number;
      /** @description tier name */
      name?: string | null;
      /**
       * @description name key of the tier
       * @example service-registry.tier1.name
       */
      nameKey?: string;
    };
    /** @description Details of new default levels. */
    SetDefaultLevelsRequest: {
      /** @description List of objects with issue security scheme ID and new default level ID. */
      defaultValues: components["schemas"]["DefaultLevelValue"][];
      [key: string]: unknown;
    };
    /** @description The new default issue priority. */
    SetDefaultPriorityRequest: {
      /** @description The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting. */
      id: string;
    };
    /** @description The new default issue resolution. */
    SetDefaultResolutionRequest: {
      /** @description The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting. */
      id: string;
    };
    /** @description Details of a share permission for the filter. */
    SharePermission: {
      /** @description The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended. */
      group?: components["schemas"]["GroupName"];
      /**
       * Format: int64
       * @description The unique identifier of the share permission.
       */
      id?: number;
      /**
       * @description The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.
       * For a request, specify the `id` for the project.
       */
      project?: components["schemas"]["Project"];
      /**
       * @description The project role that the filter is shared with.
       * For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
       */
      role?: components["schemas"]["ProjectRole"];
      /**
       * @description The type of share permission:
       *
       *  *  `user` Shared with a user.
       *  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
       *  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
       *  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
       *  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
       *  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
       *  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
       * @enum {string}
       */
      type: "user" | "group" | "project" | "projectRole" | "global" | "loggedin" | "authenticated" | "project-unknown";
      /** @description The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user. */
      user?: components["schemas"]["UserBean"];
    };
    SharePermissionInputBean: {
      /** @description The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user. */
      accountId?: string;
      /** @description The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`. */
      groupId?: string;
      /** @description The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`. */
      groupname?: string;
      /** @description The ID of the project to share the filter with. Set `type` to `project`. */
      projectId?: string;
      /** @description The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in. */
      projectRoleId?: string;
      /**
       * Format: int32
       * @description The rights for the share permission.
       */
      rights?: number;
      /**
       * @description The type of the share permission.Specify the type as follows:
       *
       *  *  `user` Share with a user.
       *  *  `group` Share with a group. Specify `groupname` as well.
       *  *  `project` Share with a project. Specify `projectId` as well.
       *  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
       *  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
       *  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
       * @enum {string}
       */
      type: "user" | "project" | "group" | "projectRole" | "global" | "authenticated";
    };
    SimpleApplicationPropertyBean: {
      /** @description The ID of the application property. */
      id?: string;
      /** @description The new value. */
      value?: string;
    };
    SimpleErrorCollection: {
      /** @description The list of error messages produced by this operation. For example, "input parameter 'key' must be provided" */
      errorMessages?: string[];
      /** @description The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters." */
      errors?: {
        [key: string]: string;
      };
      /** Format: int32 */
      httpStatusCode?: number;
    };
    /** @description Details about the operations available in this version. */
    SimpleLink: {
      href?: string;
      iconClass?: string;
      id?: string;
      label?: string;
      styleClass?: string;
      title?: string;
      /** Format: int32 */
      weight?: number;
    };
    SimpleListWrapperApplicationRole: {
      callback?: components["schemas"]["ListWrapperCallbackApplicationRole"];
      items?: components["schemas"]["ApplicationRole"][];
      /** Format: int32 */
      "max-results"?: number;
      pagingCallback?: components["schemas"]["ListWrapperCallbackApplicationRole"];
      /** Format: int32 */
      size?: number;
    };
    SimpleListWrapperGroupName: {
      callback?: components["schemas"]["ListWrapperCallbackGroupName"];
      items?: components["schemas"]["GroupName"][];
      /** Format: int32 */
      "max-results"?: number;
      pagingCallback?: components["schemas"]["ListWrapperCallbackGroupName"];
      /** Format: int32 */
      size?: number;
    };
    /** @description Represents a usage of an entity by a project ID and related issue type IDs. */
    SimpleUsage: {
      /** @description The issue type IDs for the usage. */
      issueTypeIds: string[];
      /** @description The project ID for the usage. */
      projectId: string;
    };
    SimplifiedHierarchyLevel: {
      /**
       * Format: int64
       * @description The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      aboveLevelId?: number;
      /**
       * Format: int64
       * @description The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      belowLevelId?: number;
      /**
       * Format: uuid
       * @description The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      externalUuid?: string;
      /** Format: int32 */
      hierarchyLevelNumber?: number;
      /**
       * Format: int64
       * @description The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      id?: number;
      /** @description The issue types available in this hierarchy level. */
      issueTypeIds?: number[];
      /**
       * Format: int32
       * @description The level of this item in the hierarchy.
       */
      level?: number;
      /** @description The name of this hierarchy level. */
      name?: string;
      /**
       * Format: int64
       * @description The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
       */
      projectConfigurationId?: number;
    };
    SoftwareNavigationInfo: {
      /** Format: int64 */
      boardId?: number;
      boardName?: string;
      simpleBoard?: boolean;
      /** Format: int64 */
      totalBoardsInProject?: number;
    };
    /** @description The status of the item. */
    Status: {
      /** @description Details of the icon representing the status. If not provided, no status icon displays in Jira. */
      icon?: components["schemas"]["Icon"];
      /** @description Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font. */
      resolved?: boolean;
      [key: string]: unknown;
    };
    /** @description A status category. */
    StatusCategory: {
      /** @description The name of the color used to represent the status category. */
      colorName?: string;
      /**
       * Format: int64
       * @description The ID of the status category.
       */
      id?: number;
      /** @description The key of the status category. */
      key?: string;
      /** @description The name of the status category. */
      name?: string;
      /** @description The URL of the status category. */
      self?: string;
      [key: string]: unknown;
    };
    /** @description Details of the status being created. */
    StatusCreate: {
      /** @description The description of the status. */
      description?: string;
      /** @description The name of the status. */
      name: string;
      /**
       * @description The category of the status.
       * @enum {string}
       */
      statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
    };
    /** @description Details of the statuses being created and their scope. */
    StatusCreateRequest: {
      scope: components["schemas"]["StatusScope"];
      /** @description Details of the statuses being created. */
      statuses: components["schemas"]["StatusCreate"][];
    };
    /** @description A status. */
    StatusDetails: {
      /** @description The description of the status. */
      description?: string;
      /** @description The URL of the icon used to represent the status. */
      iconUrl?: string;
      /** @description The ID of the status. */
      id?: string;
      /** @description The name of the status. */
      name?: string;
      /** @description The scope of the field. */
      scope?: components["schemas"]["Scope"];
      /** @description The URL of the status. */
      self?: string;
      /** @description The category assigned to the status. */
      statusCategory?: components["schemas"]["StatusCategory"];
      [key: string]: unknown;
    };
    /** @description The statuses associated with this workflow. */
    StatusLayoutUpdate: {
      layout?: components["schemas"]["WorkflowLayout"];
      /** @description The properties for this status layout. */
      properties: {
        [key: string]: string;
      };
      /** @description A unique ID which the status will use to refer to this layout configuration. */
      statusReference: string;
      [key: string]: unknown;
    };
    /** @description Details about the mapping from a status to a new status for an issue type. */
    StatusMapping: {
      /** @description The ID of the issue type. */
      issueTypeId: string;
      /** @description The ID of the new status. */
      newStatusId: string;
      /** @description The ID of the status. */
      statusId: string;
    };
    /** @description The mapping of old to new status ID for a specific project and issue type. */
    StatusMappingDTO: {
      /** @description The issue type for the status mapping. */
      issueTypeId: string;
      /** @description The project for the status mapping. */
      projectId: string;
      /** @description The list of old and new status ID mappings for the specified project and issue type. */
      statusMigrations: components["schemas"]["StatusMigration"][];
      [key: string]: unknown;
    };
    /** @description The details of the statuses in the associated workflows. */
    StatusMetadata: {
      /**
       * @description The category of the status.
       * @enum {string}
       */
      category?: "TODO" | "IN_PROGRESS" | "DONE";
      /** @description The ID of the status. */
      id?: string;
      /** @description The name of the status. */
      name?: string;
    };
    /** @description The mapping of old to new status ID. */
    StatusMigration: {
      /** @description The new status ID. */
      newStatusReference: string;
      /** @description The old status ID. */
      oldStatusReference: string;
      [key: string]: unknown;
    };
    /**
     * @deprecated
     * @description The status reference and port that a transition is connected to.
     */
    StatusReferenceAndPort: {
      /**
       * Format: int32
       * @description The port this transition uses to connect to this status.
       */
      port?: number;
      /** @description The reference of this status. */
      statusReference: string;
    } | null;
    /** @description The scope of the status. */
    StatusScope: {
      project?: components["schemas"]["ProjectId"];
      /**
       * @description The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
       * @enum {string}
       */
      type: "PROJECT" | "GLOBAL";
    };
    /** @description Details of the status being updated. */
    StatusUpdate: {
      /** @description The description of the status. */
      description?: string;
      /** @description The ID of the status. */
      id: string;
      /** @description The name of the status. */
      name: string;
      /**
       * @description The category of the status.
       * @enum {string}
       */
      statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
      [key: string]: unknown;
    };
    /** @description The list of statuses that will be updated. */
    StatusUpdateRequest: {
      /** @description The list of statuses that will be updated. */
      statuses: components["schemas"]["StatusUpdate"][];
    };
    /** @description The statuses associated with each workflow. */
    StatusesPerWorkflow: {
      /** @description The ID of the initial status for the workflow. */
      initialStatusId?: string;
      /** @description The status IDs associated with the workflow. */
      statuses?: string[];
      /** @description The ID of the workflow. */
      workflowId?: string;
    };
    StreamingResponseBody: Record<string, never>;
    StringList: Record<string, never>;
    SubmittedBulkOperation: {
      taskId?: string;
    };
    /** @description An issue suggested for use in the issue picker auto-completion. */
    SuggestedIssue: {
      /**
       * Format: int64
       * @description The ID of the issue.
       */
      id?: number;
      /** @description The URL of the issue type's avatar. */
      img?: string;
      /** @description The key of the issue. */
      key?: string;
      /** @description The key of the issue in HTML format. */
      keyHtml?: string;
      /** @description The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags. */
      summary?: string;
      /** @description The phrase containing the query string, as plain text. */
      summaryText?: string;
    };
    /** @description Details of changes to a priority scheme's priorities that require suggested priority mappings. */
    SuggestedMappingsForPrioritiesRequestBean: {
      /** @description The ids of priorities being removed from the scheme. */
      add?: number[];
      /** @description The ids of priorities being removed from the scheme. */
      remove?: number[];
    };
    /** @description Details of changes to a priority scheme's projects that require suggested priority mappings. */
    SuggestedMappingsForProjectsRequestBean: {
      /** @description The ids of projects being added to the scheme. */
      add?: number[];
    };
    /** @description Details of changes to a priority scheme that require suggested priority mappings. */
    SuggestedMappingsRequestBean: {
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      maxResults?: number;
      /** @description The priority changes in the scheme. */
      priorities?: components["schemas"]["SuggestedMappingsForPrioritiesRequestBean"];
      /** @description The project changes in the scheme. */
      projects?: components["schemas"]["SuggestedMappingsForProjectsRequestBean"];
      /**
       * Format: int64
       * @description The id of the priority scheme.
       */
      schemeId?: number;
      /**
       * Format: int64
       * @description The index of the first item returned on the page.
       */
      startAt?: number;
    };
    /** @description List of system avatars. */
    SystemAvatars: {
      /** @description A list of avatar details. */
      system?: readonly components["schemas"]["Avatar"][];
    };
    /** @description Details about a task. */
    TaskProgressBeanJsonNode: {
      /** @description The description of the task. */
      description?: string;
      /**
       * Format: int64
       * @description The execution time of the task, in milliseconds.
       */
      elapsedRuntime: number;
      /**
       * Format: int64
       * @description A timestamp recording when the task was finished.
       */
      finished?: number;
      /** @description The ID of the task. */
      id: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task progress was last updated.
       */
      lastUpdate: number;
      /** @description Information about the progress of the task. */
      message?: string;
      /**
       * Format: int64
       * @description The progress of the task, as a percentage complete.
       */
      progress: number;
      /** @description The result of the task execution. */
      result?: components["schemas"]["JsonNode"];
      /**
       * Format: uri
       * @description The URL of the task.
       */
      self: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task was started.
       */
      started?: number;
      /**
       * @description The status of the task.
       * @enum {string}
       */
      status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
      /**
       * Format: int64
       * @description A timestamp recording when the task was submitted.
       */
      submitted: number;
      /**
       * Format: int64
       * @description The ID of the user who submitted the task.
       */
      submittedBy: number;
    };
    /** @description Details about a task. */
    TaskProgressBeanObject: {
      /** @description The description of the task. */
      description?: string;
      /**
       * Format: int64
       * @description The execution time of the task, in milliseconds.
       */
      elapsedRuntime: number;
      /**
       * Format: int64
       * @description A timestamp recording when the task was finished.
       */
      finished?: number;
      /** @description The ID of the task. */
      id: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task progress was last updated.
       */
      lastUpdate: number;
      /** @description Information about the progress of the task. */
      message?: string;
      /**
       * Format: int64
       * @description The progress of the task, as a percentage complete.
       */
      progress: number;
      /** @description The result of the task execution. */
      result?: unknown;
      /**
       * Format: uri
       * @description The URL of the task.
       */
      self: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task was started.
       */
      started?: number;
      /**
       * @description The status of the task.
       * @enum {string}
       */
      status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
      /**
       * Format: int64
       * @description A timestamp recording when the task was submitted.
       */
      submitted: number;
      /**
       * Format: int64
       * @description The ID of the user who submitted the task.
       */
      submittedBy: number;
    };
    /** @description Details about a task. */
    TaskProgressBeanRemoveOptionFromIssuesResult: {
      /** @description The description of the task. */
      description?: string;
      /**
       * Format: int64
       * @description The execution time of the task, in milliseconds.
       */
      elapsedRuntime: number;
      /**
       * Format: int64
       * @description A timestamp recording when the task was finished.
       */
      finished?: number;
      /** @description The ID of the task. */
      id: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task progress was last updated.
       */
      lastUpdate: number;
      /** @description Information about the progress of the task. */
      message?: string;
      /**
       * Format: int64
       * @description The progress of the task, as a percentage complete.
       */
      progress: number;
      /** @description The result of the task execution. */
      result?: components["schemas"]["RemoveOptionFromIssuesResult"];
      /**
       * Format: uri
       * @description The URL of the task.
       */
      self: string;
      /**
       * Format: int64
       * @description A timestamp recording when the task was started.
       */
      started?: number;
      /**
       * @description The status of the task.
       * @enum {string}
       */
      status: "ENQUEUED" | "RUNNING" | "COMPLETE" | "FAILED" | "CANCEL_REQUESTED" | "CANCELLED" | "DEAD";
      /**
       * Format: int64
       * @description A timestamp recording when the task was submitted.
       */
      submitted: number;
      /**
       * Format: int64
       * @description The ID of the user who submitted the task.
       */
      submittedBy: number;
    };
    /** @description Details of the time tracking configuration. */
    TimeTrackingConfiguration: {
      /**
       * @description The default unit of time applied to logged time.
       * @enum {string}
       */
      defaultUnit: "minute" | "hour" | "day" | "week";
      /**
       * @description The format that will appear on an issue's *Time Spent* field.
       * @enum {string}
       */
      timeFormat: "pretty" | "days" | "hours";
      /**
       * Format: double
       * @description The number of days in a working week.
       */
      workingDaysPerWeek: number;
      /**
       * Format: double
       * @description The number of hours in a working day.
       */
      workingHoursPerDay: number;
    };
    /** @description Time tracking details. */
    TimeTrackingDetails: {
      /** @description The original estimate of time needed for this issue in readable format. */
      originalEstimate?: string;
      /**
       * Format: int64
       * @description The original estimate of time needed for this issue in seconds.
       */
      originalEstimateSeconds?: number;
      /** @description The remaining estimate of time needed for this issue in readable format. */
      remainingEstimate?: string;
      /**
       * Format: int64
       * @description The remaining estimate of time needed for this issue in seconds.
       */
      remainingEstimateSeconds?: number;
      /** @description Time worked on this issue in readable format. */
      timeSpent?: string;
      /**
       * Format: int64
       * @description Time worked on this issue in seconds.
       */
      timeSpentSeconds?: number;
    };
    /** @description Details about the time tracking provider. */
    TimeTrackingProvider: {
      /** @description The key for the time tracking provider. For example, *JIRA*. */
      key: string;
      /** @description The name of the time tracking provider. For example, *JIRA provided time tracking*. */
      name?: string;
      /** @description The URL of the configuration page for the time tracking provider app. For example, *\/example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app. */
      url?: string;
    };
    /** @description Details of a workflow transition. */
    Transition: {
      /** @description The description of the transition. */
      description: string;
      /** @description The statuses the transition can start from. */
      from: string[];
      /** @description The ID of the transition. */
      id: string;
      /** @description The name of the transition. */
      name: string;
      /** @description The properties of the transition. */
      properties?: {
        [key: string]: unknown;
      };
      rules?: components["schemas"]["WorkflowRules"];
      screen?: components["schemas"]["TransitionScreenDetails"];
      /** @description The status the transition goes to. */
      to: string;
      /**
       * @description The type of the transition.
       * @enum {string}
       */
      type: "global" | "initial" | "directed";
    };
    /** @description The details of a transition screen. */
    TransitionScreenDetails: {
      /** @description The ID of the screen. */
      id: string;
      /** @description The name of the screen. */
      name?: string;
    };
    /** @description The transition update data. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
    TransitionUpdateDTO: {
      /** @description The post-functions of the transition. */
      actions?: components["schemas"]["WorkflowRuleConfiguration"][];
      conditions?: components["schemas"]["ConditionGroupUpdate"];
      /** @description The custom event ID of the transition. */
      customIssueEventId?: string;
      /** @description The description of the transition. */
      description?: string;
      /**
       * @deprecated
       * @description The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
       */
      from?: components["schemas"]["StatusReferenceAndPort"][];
      /** @description The ID of the transition. */
      id: string;
      /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
      links?: components["schemas"]["WorkflowTransitionLinks"][];
      /** @description The name of the transition. */
      name: string;
      /** @description The properties of the transition. */
      properties?: {
        [key: string]: string;
      };
      to?: components["schemas"]["StatusReferenceAndPort"];
      /** @description The status the transition goes to. */
      toStatusReference?: string;
      transitionScreen?: components["schemas"]["WorkflowRuleConfiguration"];
      /** @description The triggers of the transition. */
      triggers?: components["schemas"]["WorkflowTrigger"][];
      /**
       * @description The transition type.
       * @enum {string}
       */
      type: "INITIAL" | "GLOBAL" | "DIRECTED";
      /** @description The validators of the transition. */
      validators?: components["schemas"]["WorkflowRuleConfiguration"][];
      [key: string]: unknown;
    };
    /** @description List of issue transitions. */
    Transitions: {
      /** @description Expand options that include additional transitions details in the response. */
      expand?: string;
      /** @description List of issue transitions. */
      transitions?: readonly components["schemas"]["IssueTransition"][];
    };
    /** @description The details of a UI modification's context, which define where to activate the UI modification. */
    UiModificationContextDetails: {
      /** @description The ID of the UI modification context. */
      id?: string;
      /** @description Whether a context is available. For example, when a project is deleted the context becomes unavailable. */
      isAvailable?: boolean;
      /** @description The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard. */
      issueTypeId?: string;
      /** @description The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard. */
      projectId?: string;
      /**
       * @description The view type of the context. Only `GIC`(Global Issue Create) and `IssueView` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
       * @enum {string}
       */
      viewType?: "GIC" | "IssueView";
    };
    /** @description The details of a UI modification. */
    UiModificationDetails: {
      /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. */
      contexts?: readonly components["schemas"]["UiModificationContextDetails"][];
      /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
      data?: string;
      /** @description The description of the UI modification. The maximum length is 255 characters. */
      description?: string;
      /** @description The ID of the UI modification. */
      id: string;
      /** @description The name of the UI modification. The maximum length is 255 characters. */
      name: string;
      /** @description The URL of the UI modification. */
      self: string;
    };
    /** @description Identifiers for a UI modification. */
    UiModificationIdentifiers: {
      /** @description The ID of the UI modification. */
      id: string;
      /** @description The URL of the UI modification. */
      self: string;
    };
    UnrestrictedUserEmail: {
      /** @description The accountId of the user */
      accountId?: string;
      /** @description The email of the user */
      email?: string;
      [key: string]: unknown;
    };
    /** @description Details of a custom field. */
    UpdateCustomFieldDetails: {
      /** @description The description of the custom field. The maximum length is 40000 characters. */
      description?: string;
      /** @description The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters. */
      name?: string;
      /**
       * @description The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
       *
       *  *  `cascadingselect`: `cascadingselectsearcher`
       *  *  `datepicker`: `daterange`
       *  *  `datetime`: `datetimerange`
       *  *  `float`: `exactnumber` or `numberrange`
       *  *  `grouppicker`: `grouppickersearcher`
       *  *  `importid`: `exactnumber` or `numberrange`
       *  *  `labels`: `labelsearcher`
       *  *  `multicheckboxes`: `multiselectsearcher`
       *  *  `multigrouppicker`: `multiselectsearcher`
       *  *  `multiselect`: `multiselectsearcher`
       *  *  `multiuserpicker`: `userpickergroupsearcher`
       *  *  `multiversion`: `versionsearcher`
       *  *  `project`: `projectsearcher`
       *  *  `radiobuttons`: `multiselectsearcher`
       *  *  `readonlyfield`: `textsearcher`
       *  *  `select`: `multiselectsearcher`
       *  *  `textarea`: `textsearcher`
       *  *  `textfield`: `textsearcher`
       *  *  `url`: `exacttextsearcher`
       *  *  `userpicker`: `userpickergroupsearcher`
       *  *  `version`: `versionsearcher`
       * @enum {string}
       */
      searcherKey?: "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:daterange" | "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange" | "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber" | "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:numberrange" | "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher" | "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher";
    };
    /** @description The request for updating the default project classification level. */
    UpdateDefaultProjectClassificationBean: {
      /** @description The ID of the project classification. */
      id: string;
    };
    /** @description The ID of a screen scheme. */
    UpdateDefaultScreenScheme: {
      /** @description The ID of the screen scheme. */
      screenSchemeId: string;
    };
    /** @description The details of the field configuration scheme. */
    UpdateFieldConfigurationSchemeDetails: {
      /** @description The description of the field configuration scheme. */
      description?: string;
      /** @description The name of the field configuration scheme. The name must be unique. */
      name: string;
    };
    /** @description Details of issue security scheme level. */
    UpdateIssueSecurityLevelDetails: {
      /** @description The description of the issue security scheme level. */
      description?: string;
      /** @description The name of the issue security scheme level. Must be unique. */
      name?: string;
      [key: string]: unknown;
    };
    UpdateIssueSecuritySchemeRequestBean: {
      /** @description The description of the security scheme scheme. */
      description?: string;
      /** @description The name of the security scheme scheme. Must be unique. */
      name?: string;
    };
    /** @description Details of a notification scheme. */
    UpdateNotificationSchemeDetails: {
      /** @description The description of the notification scheme. */
      description?: string;
      /** @description The name of the notification scheme. Must be unique. */
      name?: string;
      [key: string]: unknown;
    };
    /** @description Update priorities in a scheme */
    UpdatePrioritiesInSchemeRequestBean: {
      /** @description Priorities to add to a scheme */
      add?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
      /** @description Priorities to remove from a scheme */
      remove?: components["schemas"]["PrioritySchemeChangesWithMappings"];
      [key: string]: unknown;
    };
    /** @description Details of an issue priority. */
    UpdatePriorityDetails: {
      /** @description The description of the priority. */
      description?: string;
      /**
       * @description The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
       * @enum {string}
       */
      iconUrl?: "/images/icons/priorities/blocker.png" | "/images/icons/priorities/critical.png" | "/images/icons/priorities/high.png" | "/images/icons/priorities/highest.png" | "/images/icons/priorities/low.png" | "/images/icons/priorities/lowest.png" | "/images/icons/priorities/major.png" | "/images/icons/priorities/medium.png" | "/images/icons/priorities/minor.png" | "/images/icons/priorities/trivial.png" | "/images/icons/priorities/blocker_new.png" | "/images/icons/priorities/critical_new.png" | "/images/icons/priorities/high_new.png" | "/images/icons/priorities/highest_new.png" | "/images/icons/priorities/low_new.png" | "/images/icons/priorities/lowest_new.png" | "/images/icons/priorities/major_new.png" | "/images/icons/priorities/medium_new.png" | "/images/icons/priorities/minor_new.png" | "/images/icons/priorities/trivial_new.png";
      /** @description The name of the priority. Must be unique. */
      name?: string;
      /** @description The status color of the priority in 3-digit or 6-digit hexadecimal format. */
      statusColor?: string;
      [key: string]: unknown;
    };
    /** @description Details of a priority scheme. */
    UpdatePrioritySchemeRequestBean: {
      /**
       * Format: int64
       * @description The default priority of the scheme.
       */
      defaultPriorityId?: number;
      /** @description The description of the priority scheme. */
      description?: string;
      /** @description Instructions to migrate issues. */
      mappings?: components["schemas"]["PriorityMapping"];
      /** @description The name of the priority scheme. Must be unique. */
      name?: string;
      /** @description The priorities in the scheme. */
      priorities?: components["schemas"]["UpdatePrioritiesInSchemeRequestBean"];
      /** @description The projects in the scheme. */
      projects?: components["schemas"]["UpdateProjectsInSchemeRequestBean"];
    };
    /** @description Details of the updated priority scheme. */
    UpdatePrioritySchemeResponseBean: {
      priorityScheme?: components["schemas"]["PrioritySchemeWithPaginatedPrioritiesAndProjects"];
      /** @description The in-progress issue migration task. */
      task?: components["schemas"]["TaskProgressBeanJsonNode"];
      [key: string]: unknown;
    };
    /** @description Details about the project. */
    UpdateProjectDetails: {
      /**
       * @description The default assignee when creating issues for this project.
       * @enum {string}
       */
      assigneeType?: "PROJECT_LEAD" | "UNASSIGNED";
      /**
       * Format: int64
       * @description An integer value for the project's avatar.
       */
      avatarId?: number;
      /**
       * Format: int64
       * @description The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
       */
      categoryId?: number;
      /** @description A brief description of the project. */
      description?: string;
      /**
       * Format: int64
       * @description The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
       */
      issueSecurityScheme?: number;
      /** @description Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. */
      key?: string;
      /** @description This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`. */
      lead?: string;
      /** @description The account ID of the project lead. Cannot be provided with `lead`. */
      leadAccountId?: string;
      /** @description The name of the project. */
      name?: string;
      /**
       * Format: int64
       * @description The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
       */
      notificationScheme?: number;
      /**
       * Format: int64
       * @description The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
       */
      permissionScheme?: number;
      /** @description A link to information about this project, such as project documentation */
      url?: string;
    };
    /** @description Update projects in a scheme */
    UpdateProjectsInSchemeRequestBean: {
      /** @description Projects to add to a scheme */
      add?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
      /** @description Projects to remove from a scheme */
      remove?: components["schemas"]["PrioritySchemeChangesWithoutMappings"];
      [key: string]: unknown;
    };
    /** @description Details of an issue resolution. */
    UpdateResolutionDetails: {
      /** @description The description of the resolution. */
      description?: string;
      /** @description The name of the resolution. Must be unique. */
      name: string;
      [key: string]: unknown;
    };
    /** @description Details of a screen. */
    UpdateScreenDetails: {
      /** @description The description of the screen. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the screen. The name must be unique. The maximum length is 255 characters. */
      name?: string;
    };
    /** @description Details of a screen scheme. */
    UpdateScreenSchemeDetails: {
      /** @description The description of the screen scheme. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the screen scheme. The name must be unique. The maximum length is 255 characters. */
      name?: string;
      /** @description The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted. */
      screens?: components["schemas"]["UpdateScreenTypes"];
    };
    /** @description The IDs of the screens for the screen types of the screen scheme. */
    UpdateScreenTypes: {
      /** @description The ID of the create screen. To remove the screen association, pass a null. */
      create?: string;
      /** @description The ID of the default screen. When specified, must include a screen ID as a default screen is required. */
      default?: string;
      /** @description The ID of the edit screen. To remove the screen association, pass a null. */
      edit?: string;
      /** @description The ID of the view screen. To remove the screen association, pass a null. */
      view?: string;
    };
    /** @description The details of a UI modification. */
    UpdateUiModificationDetails: {
      /** @description List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts. */
      contexts?: components["schemas"]["UiModificationContextDetails"][];
      /** @description The data of the UI modification. The maximum size of the data is 50000 characters. */
      data?: string;
      /** @description The description of the UI modification. The maximum length is 255 characters. */
      description?: string;
      /** @description The name of the UI modification. The maximum length is 255 characters. */
      name?: string;
    };
    UpdateUserToGroupBean: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      accountId?: string;
      /** @description This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
      [key: string]: unknown;
    };
    /** @description A project category. */
    UpdatedProjectCategory: {
      /** @description The name of the project category. */
      description?: string;
      /** @description The ID of the project category. */
      id?: string;
      /** @description The description of the project category. */
      name?: string;
      /** @description The URL of the project category. */
      self?: string;
    };
    /**
     * @description A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
     *
     *  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
     *  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
     *  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
     */
    User: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests. */
      accountId?: string;
      /**
       * @description The user account type. Can take the following values:
       *
       *  *  `atlassian` regular Atlassian user account
       *  *  `app` system account used for Connect applications and OAuth to represent external systems
       *  *  `customer` Jira Service Desk account representing an external service desk
       * @enum {string}
       */
      accountType?: "atlassian" | "app" | "customer" | "unknown";
      /** @description Whether the user is active. */
      active?: boolean;
      /** @description The application roles the user is assigned to. */
      applicationRoles?: components["schemas"]["SimpleListWrapperApplicationRole"];
      /** @description The avatars of the user. */
      avatarUrls?: components["schemas"]["AvatarUrlsBean"];
      /** @description The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. */
      displayName?: string;
      /** @description The email address of the user. Depending on the user’s privacy setting, this may be returned as null. */
      emailAddress?: string;
      /** @description Expand options that include additional user details in the response. */
      expand?: string;
      /** @description The groups that the user belongs to. */
      groups?: components["schemas"]["SimpleListWrapperGroupName"];
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      key?: string;
      /** @description The locale of the user. Depending on the user’s privacy setting, this may be returned as null. */
      locale?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
      /**
       * Format: uri
       * @description The URL of the user.
       */
      self?: string;
      /** @description The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null. */
      timeZone?: string;
    };
    UserBean: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      accountId?: string;
      /** @description Whether the user is active. */
      active?: boolean;
      /** @description The avatars of the user. */
      avatarUrls?: components["schemas"]["UserBeanAvatarUrls"];
      /** @description The display name of the user. Depending on the user’s privacy setting, this may return an alternative value. */
      displayName?: string;
      /**
       * @description This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
       * The key of the user.
       */
      key?: string;
      /**
       * @description This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
       * The username of the user.
       */
      name?: string;
      /**
       * Format: uri
       * @description The URL of the user.
       */
      self?: string;
    };
    UserBeanAvatarUrls: {
      /**
       * Format: uri
       * @description The URL of the user's 16x16 pixel avatar.
       */
      "16x16"?: string;
      /**
       * Format: uri
       * @description The URL of the user's 24x24 pixel avatar.
       */
      "24x24"?: string;
      /**
       * Format: uri
       * @description The URL of the user's 32x32 pixel avatar.
       */
      "32x32"?: string;
      /**
       * Format: uri
       * @description The URL of the user's 48x48 pixel avatar.
       */
      "48x48"?: string;
    };
    UserColumnRequestBody: {
      columns?: string[];
    };
    /** @description A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID. */
    UserContextVariable: {
      /** @description The account ID of the user. */
      accountId: string;
      /** @description Type of custom context variable. */
      type: string;
    };
    /**
     * @description User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
     *
     *  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
     *  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
     *  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
     */
    UserDetails: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      accountId?: string;
      /** @description The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user) */
      accountType?: string;
      /** @description Whether the user is active. */
      active?: boolean;
      /** @description The avatars of the user. */
      avatarUrls?: components["schemas"]["AvatarUrlsBean"];
      /** @description The display name of the user. Depending on the user’s privacy settings, this may return an alternative value. */
      displayName?: string;
      /** @description The email address of the user. Depending on the user’s privacy settings, this may be returned as null. */
      emailAddress?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      key?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
      /** @description The URL of the user. */
      self?: string;
      /** @description The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null. */
      timeZone?: string;
    };
    /** @description Filter for a User Picker (single) custom field. */
    UserFilter: {
      /** @description Whether the filter is enabled. */
      enabled: boolean;
      /** @description User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided. */
      groups?: string[];
      /** @description Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided. */
      roleIds?: number[];
    };
    /** @description List of user account IDs. */
    UserKey: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import. */
      accountId?: string;
      /** @description This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      key?: string;
    };
    /** @description A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with. */
    UserList: {
      /**
       * Format: int32
       * @description The index of the last item returned on the page.
       */
      "end-index"?: number;
      /** @description The list of items. */
      items?: readonly components["schemas"]["User"][];
      /**
       * Format: int32
       * @description The maximum number of results that could be on the page.
       */
      "max-results"?: number;
      /**
       * Format: int32
       * @description The number of items on the page.
       */
      size?: number;
      /**
       * Format: int32
       * @description The index of the first item returned on the page.
       */
      "start-index"?: number;
    };
    UserMigrationBean: {
      accountId?: string;
      key?: string;
      username?: string;
    };
    /** @description Details of a permission and its availability to a user. */
    UserPermission: {
      /** @description Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.` */
      deprecatedKey?: boolean;
      /** @description The description of the permission. */
      description?: string;
      /** @description Whether the permission is available to the user in the queried context. */
      havePermission?: boolean;
      /** @description The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
      id?: string;
      /** @description The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions. */
      key?: string;
      /** @description The name of the permission. */
      name?: string;
      /**
       * @description The type of the permission.
       * @enum {string}
       */
      type?: "GLOBAL" | "PROJECT";
      [key: string]: unknown;
    };
    /** @description A user found in a search. */
    UserPickerUser: {
      /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
      accountId?: string;
      /**
       * Format: uri
       * @description The avatar URL of the user.
       */
      avatarUrl?: string;
      /** @description The display name of the user. Depending on the user’s privacy setting, this may be returned as null. */
      displayName?: string;
      /** @description The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag. */
      html?: string;
      /** @description This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      key?: string;
      /** @description This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
      name?: string;
    };
    /** @description The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results. */
    ValidationOptionsForCreate: {
      levels?: ("WARNING" | "ERROR")[];
    };
    /** @description The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results. */
    ValidationOptionsForUpdate: {
      levels?: ("WARNING" | "ERROR")[];
    };
    /** @description An operand that is a user-provided value. */
    ValueOperand: {
      /** @description Encoded value, which can be used directly in a JQL query. */
      encodedValue?: string;
      /** @description The operand value. */
      value: string;
    };
    /** @description Details about a project version. */
    Version: {
      /** @description If the expand option `approvers` is used, returns a list containing the approvers for this version. */
      approvers?: readonly components["schemas"]["VersionApprover"][];
      /** @description Indicates that the version is archived. Optional when creating or updating a version. */
      archived?: boolean;
      /** @description The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes. */
      description?: string;
      /** @description If the expand option `driver` is used, returns the Atlassian account ID of the driver. */
      driver?: string;
      /**
       * @description Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
       *
       *  *  `operations` Returns the list of operations available for this version.
       *  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
       *  *  `driver` Returns the Atlassian account ID of the version driver.
       *  *  `approvers` Returns a list containing approvers for this version.
       *
       * Optional for create and update.
       */
      expand?: string;
      /** @description The ID of the version. */
      id?: string;
      /** @description If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. */
      issuesStatusForFixVersion?: components["schemas"]["VersionIssuesStatus"];
      /**
       * Format: uri
       * @description The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
       */
      moveUnfixedIssuesTo?: string;
      /** @description The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters. */
      name?: string;
      /** @description If the expand option `operations` is used, returns the list of operations available for this version. */
      operations?: readonly components["schemas"]["SimpleLink"][];
      /** @description Indicates that the version is overdue. */
      overdue?: boolean;
      /** @description Deprecated. Use `projectId`. */
      project?: string;
      /**
       * Format: int64
       * @description The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
       */
      projectId?: number;
      /**
       * Format: date
       * @description The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
       */
      releaseDate?: string;
      /** @description Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version. */
      released?: boolean;
      /**
       * Format: uri
       * @description The URL of the version.
       */
      self?: string;
      /**
       * Format: date
       * @description The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
       */
      startDate?: string;
      /** @description The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format. */
      userReleaseDate?: string;
      /** @description The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format. */
      userStartDate?: string;
    };
    /** @description Contains details about a version approver. */
    VersionApprover: {
      /** @description The Atlassian account ID of the approver. */
      accountId?: string;
      /** @description A description of why the user is declining the approval. */
      declineReason?: string;
      /** @description A description of what the user is approving within the specified version. */
      description?: string;
      /** @description The status of the approval, which can be *PENDING*, *APPROVED*, or *DECLINED* */
      status?: string;
      [key: string]: unknown;
    };
    /** @description Various counts of issues within a version. */
    VersionIssueCounts: {
      /** @description List of custom fields using the version. */
      customFieldUsage?: readonly components["schemas"]["VersionUsageInCustomField"][];
      /**
       * Format: int64
       * @description Count of issues where a version custom field is set to the version.
       */
      issueCountWithCustomFieldsShowingVersion?: number;
      /**
       * Format: int64
       * @description Count of issues where the `affectedVersion` is set to the version.
       */
      issuesAffectedCount?: number;
      /**
       * Format: int64
       * @description Count of issues where the `fixVersion` is set to the version.
       */
      issuesFixedCount?: number;
      /**
       * Format: uri
       * @description The URL of these count details.
       */
      self?: string;
    };
    /** @description Counts of the number of issues in various statuses. */
    VersionIssuesStatus: {
      /**
       * Format: int64
       * @description Count of issues with status *done*.
       */
      done?: number;
      /**
       * Format: int64
       * @description Count of issues with status *in progress*.
       */
      inProgress?: number;
      /**
       * Format: int64
       * @description Count of issues with status *to do*.
       */
      toDo?: number;
      /**
       * Format: int64
       * @description Count of issues with a status other than *to do*, *in progress*, and *done*.
       */
      unmapped?: number;
      [key: string]: unknown;
    };
    VersionMoveBean: {
      /**
       * Format: uri
       * @description The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
       */
      after?: string;
      /**
       * @description An absolute position in which to place the moved version. Cannot be used with `after`.
       * @enum {string}
       */
      position?: "Earlier" | "Later" | "First" | "Last";
    };
    /** @description Associated related work to a version */
    VersionRelatedWork: {
      /** @description The category of the related work */
      category: string;
      /**
       * Format: int64
       * @description The ID of the issue associated with the related work (if there is one). Cannot be updated via the Rest API.
       */
      issueId?: number;
      /** @description The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it. */
      relatedWorkId?: string;
      /** @description The title of the related work */
      title?: string;
      /**
       * Format: uri
       * @description The URL of the related work. Will be null for the native release note related work item, but is otherwise required.
       */
      url?: string;
    };
    /** @description Count of a version's unresolved issues. */
    VersionUnresolvedIssuesCount: {
      /**
       * Format: int64
       * @description Count of issues.
       */
      issuesCount?: number;
      /**
       * Format: int64
       * @description Count of unresolved issues.
       */
      issuesUnresolvedCount?: number;
      /**
       * Format: uri
       * @description The URL of these count details.
       */
      self?: string;
    };
    /** @description List of custom fields using the version. */
    VersionUsageInCustomField: {
      /**
       * Format: int64
       * @description The ID of the custom field.
       */
      customFieldId?: number;
      /** @description The name of the custom field. */
      fieldName?: string;
      /**
       * Format: int64
       * @description Count of the issues where the custom field contains the version.
       */
      issueCountWithVersionInCustomField?: number;
    };
    /** @description The group or role to which this item is visible. */
    Visibility: {
      /** @description The ID of the group or the name of the role that visibility of this item is restricted to. */
      identifier?: string | null;
      /**
       * @description Whether visibility of this item is restricted to a group or role.
       * @enum {string}
       */
      type?: "group" | "role";
      /** @description The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`. */
      value?: string;
      [key: string]: unknown;
    };
    /** @description The details of votes on an issue. */
    Votes: {
      /** @description Whether the user making this request has voted on the issue. */
      hasVoted?: boolean;
      /**
       * Format: uri
       * @description The URL of these issue vote details.
       */
      self?: string;
      /** @description List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission. */
      voters?: readonly components["schemas"]["User"][];
      /**
       * Format: int64
       * @description The number of votes on the issue.
       */
      votes?: number;
    };
    WarningCollection: {
      warnings?: string[];
    };
    /** @description The details of watchers on an issue. */
    Watchers: {
      /** @description Whether the calling user is watching this issue. */
      isWatching?: boolean;
      /** @description The URL of these issue watcher details. */
      self?: string;
      /**
       * Format: int32
       * @description The number of users watching this issue.
       */
      watchCount?: number;
      /** @description Details of the users watching this issue. */
      watchers?: readonly components["schemas"]["UserDetails"][];
    };
    /** @description A webhook. */
    Webhook: {
      /** @description The Jira events that trigger the webhook. */
      events: ("jira:issue_created" | "jira:issue_updated" | "jira:issue_deleted" | "comment_created" | "comment_updated" | "comment_deleted" | "issue_property_set" | "issue_property_deleted")[];
      /**
       * Format: int64
       * @description The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
       */
      expirationDate?: number;
      /** @description A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates. */
      fieldIdsFilter?: string[];
      /**
       * Format: int64
       * @description The ID of the webhook.
       */
      id: number;
      /** @description A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates. */
      issuePropertyKeysFilter?: string[];
      /** @description The JQL filter that specifies which issues the webhook is sent for. */
      jqlFilter: string;
    };
    /** @description A list of webhooks. */
    WebhookDetails: {
      /** @description The Jira events that trigger the webhook. */
      events: ("jira:issue_created" | "jira:issue_updated" | "jira:issue_deleted" | "comment_created" | "comment_updated" | "comment_deleted" | "issue_property_set" | "issue_property_deleted")[];
      /** @description A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates. */
      fieldIdsFilter?: string[];
      /** @description A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates. */
      issuePropertyKeysFilter?: string[];
      /**
       * @description The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
       *
       *  *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
       *  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
       */
      jqlFilter: string;
    };
    /** @description Details of webhooks to register. */
    WebhookRegistrationDetails: {
      /** @description The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered. */
      url: string;
      /** @description A list of webhooks. */
      webhooks: components["schemas"]["WebhookDetails"][];
    };
    /** @description The date the refreshed webhooks expire. */
    WebhooksExpirationDate: {
      /**
       * Format: int64
       * @description The expiration date of all the refreshed webhooks.
       */
      expirationDate: number;
    };
    WorkManagementNavigationInfo: {
      boardName?: string;
    };
    /** @description Details about a workflow. */
    Workflow: {
      /**
       * Format: date-time
       * @description The creation date of the workflow.
       */
      created?: string;
      /** @description The description of the workflow. */
      description: string;
      /** @description Whether the workflow has a draft version. */
      hasDraftWorkflow?: boolean;
      id: components["schemas"]["PublishedWorkflowId"];
      /** @description Whether this is the default workflow. */
      isDefault?: boolean;
      operations?: components["schemas"]["WorkflowOperations"];
      /** @description The projects the workflow is assigned to, through workflow schemes. */
      projects?: components["schemas"]["ProjectDetails"][];
      /** @description The workflow schemes the workflow is assigned to. */
      schemes?: components["schemas"]["WorkflowSchemeIdName"][];
      /** @description The statuses of the workflow. */
      statuses?: components["schemas"]["WorkflowStatus"][];
      /** @description The transitions of the workflow. */
      transitions?: components["schemas"]["Transition"][];
      /**
       * Format: date-time
       * @description The last edited date of the workflow.
       */
      updated?: string;
    };
    /** @description The list of status mappings. */
    WorkflowAssociationStatusMapping: {
      /** @description The ID of the status in the new workflow. */
      newStatusId: string;
      /** @description The ID of the status in the old workflow that isn't present in the new workflow. */
      oldStatusId: string;
    };
    WorkflowCapabilities: {
      /** @description The Connect provided ecosystem rules available. */
      connectRules?: components["schemas"]["AvailableWorkflowConnectRule"][];
      /**
       * @description The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
       * @enum {string}
       */
      editorScope?: "PROJECT" | "GLOBAL";
      /** @description The Forge provided ecosystem rules available. */
      forgeRules?: components["schemas"]["AvailableWorkflowForgeRule"][];
      /** @description The types of projects that this capability set is available for. */
      projectTypes?: ("software" | "service_desk" | "product_discovery" | "business" | "unknown")[];
      /** @description The Atlassian provided system rules available. */
      systemRules?: components["schemas"]["AvailableWorkflowSystemRule"][];
      /** @description The trigger rules available. */
      triggerRules?: components["schemas"]["AvailableWorkflowTriggers"][];
    };
    /** @description A compound workflow transition rule condition. This object returns `nodeType` as `compound`. */
    WorkflowCompoundCondition: {
      /** @description The list of workflow conditions. */
      conditions: components["schemas"]["WorkflowCondition"][];
      nodeType: string;
      /**
       * @description The compound condition operator.
       * @enum {string}
       */
      operator: "AND" | "OR";
    };
    /** @description The workflow transition rule conditions tree. */
    WorkflowCondition: components["schemas"]["WorkflowSimpleCondition"] | components["schemas"]["WorkflowCompoundCondition"];
    /** @description The details of the workflows to create. */
    WorkflowCreate: {
      /** @description The description of the workflow to create. */
      description?: string;
      /** @description The name of the workflow to create. */
      name: string;
      startPointLayout?: components["schemas"]["WorkflowLayout"];
      /** @description The statuses associated with this workflow. */
      statuses: components["schemas"]["StatusLayoutUpdate"][];
      /** @description The transitions of this workflow. */
      transitions: components["schemas"]["TransitionUpdateDTO"][];
    };
    /** @description The create workflows payload. */
    WorkflowCreateRequest: {
      scope: components["schemas"]["WorkflowScope"];
      /** @description The statuses to associate with the workflows. */
      statuses: components["schemas"]["WorkflowStatusUpdate"][];
      /** @description The details of the workflows to create. */
      workflows: components["schemas"]["WorkflowCreate"][];
    };
    /** @description Details of the created workflows and statuses. */
    WorkflowCreateResponse: {
      /** @description List of created statuses. */
      statuses?: components["schemas"]["JiraWorkflowStatus"][];
      /** @description List of created workflows. */
      workflows?: components["schemas"]["JiraWorkflow"][];
    };
    WorkflowCreateValidateRequest: {
      payload: components["schemas"]["WorkflowCreateRequest"];
      validationOptions?: components["schemas"]["ValidationOptionsForCreate"];
    };
    /** @description A reference to the location of the error. This will be null if the error does not refer to a specific element. */
    WorkflowElementReference: {
      /** @description A property key. */
      propertyKey?: string;
      /** @description A rule ID. */
      ruleId?: string;
      statusMappingReference?: components["schemas"]["ProjectAndIssueTypePair"];
      /** @description A status reference. */
      statusReference?: string;
      /** @description A transition ID. */
      transitionId?: string;
    };
    /** @description The classic workflow identifiers. */
    WorkflowIDs: {
      /** @description The entity ID of the workflow. */
      entityId?: string;
      /** @description The name of the workflow. */
      name: string;
    };
    /** @description Properties that identify a workflow. */
    WorkflowId: {
      /** @description Whether the workflow is in the draft state. */
      draft: boolean;
      /** @description The name of the workflow. */
      name: string;
    };
    /** @description The starting point for the statuses in the workflow. */
    WorkflowLayout: {
      /**
       * Format: double
       * @description The x axis location.
       */
      x?: number;
      /**
       * Format: double
       * @description The y axis location.
       */
      y?: number;
    } | null;
    /** @description The workflow metadata and issue type IDs which use this workflow. */
    WorkflowMetadataAndIssueTypeRestModel: {
      /** @description The list of issue type IDs for the mapping. */
      issueTypeIds: string[];
      workflow: components["schemas"]["WorkflowMetadataRestModel"];
    };
    /** @description Workflow metadata and usage detail. */
    WorkflowMetadataRestModel: {
      /** @description The description of the workflow. */
      description: string;
      /** @description The ID of the workflow. */
      id: string;
      /** @description The name of the workflow. */
      name: string;
      /** @description Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme. */
      usage: components["schemas"]["SimpleUsage"][];
      version: components["schemas"]["DocumentVersion"];
    };
    /** @description Operations allowed on a workflow */
    WorkflowOperations: {
      /** @description Whether the workflow can be deleted. */
      canDelete: boolean;
      /** @description Whether the workflow can be updated. */
      canEdit: boolean;
    };
    WorkflowReadRequest: {
      /** @description The list of projects and issue types to query. */
      projectAndIssueTypes?: components["schemas"]["ProjectAndIssueTypePair"][];
      /** @description The list of workflow IDs to query. */
      workflowIds?: string[];
      /** @description The list of workflow names to query. */
      workflowNames?: string[];
    };
    /** @description Details of workflows and related statuses. */
    WorkflowReadResponse: {
      /** @description List of statuses. */
      statuses?: components["schemas"]["JiraWorkflowStatus"][];
      /** @description List of workflows. */
      workflows?: components["schemas"]["JiraWorkflow"][];
    };
    /** @description The statuses referenced in the workflow. */
    WorkflowReferenceStatus: {
      /** @description Indicates if the status is deprecated. */
      deprecated?: boolean;
      layout?: components["schemas"]["WorkflowStatusLayout"];
      /** @description The properties associated with the status. */
      properties?: {
        [key: string]: string;
      };
      /** @description The reference of the status. */
      statusReference?: string;
    };
    /** @description The configuration of the rule. */
    WorkflowRuleConfiguration: ({
      /** @description The ID of the rule. */
      id?: string | null;
      /** @description The parameters related to the rule. */
      parameters?: {
        [key: string]: string;
      };
      /** @description The rule key of the rule. */
      ruleKey: string;
    }) | null;
    /** @description A collection of transition rules. */
    WorkflowRules: {
      conditionsTree?: components["schemas"]["WorkflowCondition"];
      /** @description The workflow post functions. */
      postFunctions?: components["schemas"]["WorkflowTransitionRule"][];
      /** @description The workflow validators. */
      validators?: components["schemas"]["WorkflowTransitionRule"][];
    };
    /** @description Details of the workflow and its transition rules. */
    WorkflowRulesSearch: {
      /**
       * @description Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
       * @example transition
       */
      expand?: string;
      /** @description The list of workflow rule IDs. */
      ruleIds: string[];
      /**
       * Format: uuid
       * @description The workflow ID.
       * @example a498d711-685d-428d-8c3e-bc03bb450ea7
       */
      workflowEntityId: string;
    };
    /** @description Details of workflow transition rules. */
    WorkflowRulesSearchDetails: {
      /** @description List of workflow rule IDs that do not belong to the workflow or can not be found. */
      invalidRules?: string[];
      /** @description List of valid workflow transition rules. */
      validRules?: components["schemas"]["WorkflowTransitionRules"][];
      /**
       * Format: uuid
       * @description The workflow ID.
       * @example a498d711-685d-428d-8c3e-bc03bb450ea7
       */
      workflowEntityId?: string;
    };
    /** @description Details about a workflow scheme. */
    WorkflowScheme: {
      /** @description The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*. */
      defaultWorkflow?: string;
      /** @description The description of the workflow scheme. */
      description?: string;
      /** @description Whether the workflow scheme is a draft or not. */
      draft?: boolean;
      /**
       * Format: int64
       * @description The ID of the workflow scheme.
       */
      id?: number;
      /** @description The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. */
      issueTypeMappings?: {
        [key: string]: string;
      };
      /** @description The issue types available in Jira. */
      issueTypes?: {
        [key: string]: components["schemas"]["IssueTypeDetails"];
      };
      /** @description The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. */
      lastModified?: string;
      /** @description The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows. */
      lastModifiedUser?: components["schemas"]["User"];
      /** @description The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme. */
      name?: string;
      /** @description For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. */
      originalDefaultWorkflow?: string;
      /** @description For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme. */
      originalIssueTypeMappings?: {
        [key: string]: string;
      };
      /** Format: uri */
      self?: string;
      /**
       * @description Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
       *
       *  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
       *  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
       *  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
       *
       * Defaults to `false`.
       */
      updateDraftIfNeeded?: boolean;
    };
    /** @description The explicit association between issue types and a workflow in a workflow scheme. */
    WorkflowSchemeAssociation: {
      /** @description The issue types assigned to the workflow. */
      issueTypeIds: string[];
      /** @description The ID of the workflow. */
      workflowId: string;
    };
    /** @description A workflow scheme along with a list of projects that use it. */
    WorkflowSchemeAssociations: {
      /** @description The list of projects that use the workflow scheme. */
      projectIds: string[];
      /** @description The workflow scheme. */
      workflowScheme: components["schemas"]["WorkflowScheme"];
    };
    /** @description The ID and the name of the workflow scheme. */
    WorkflowSchemeIdName: {
      /** @description The ID of the workflow scheme. */
      id: string;
      /** @description The name of the workflow scheme. */
      name: string;
    };
    /** @description An associated workflow scheme and project. */
    WorkflowSchemeProjectAssociation: {
      /** @description The ID of the project. */
      projectId: string;
      /** @description The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme. */
      workflowSchemeId?: string;
    };
    /** @description The workflow scheme read request body. */
    WorkflowSchemeReadRequest: {
      /** @description The list of project IDs to query. */
      projectIds?: ((string | null)[]) | null;
      /** @description The list of workflow scheme IDs to query. */
      workflowSchemeIds?: ((string | null)[]) | null;
    };
    WorkflowSchemeReadResponse: {
      defaultWorkflow?: components["schemas"]["WorkflowMetadataRestModel"];
      /** @description The description of the workflow scheme. */
      description?: string | null;
      /** @description The ID of the workflow scheme. */
      id: string;
      /** @description The name of the workflow scheme. */
      name: string;
      /** @description The IDs of projects using the workflow scheme. */
      projectIdsUsingScheme: string[];
      scope: components["schemas"]["WorkflowScope"];
      /** @description Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme. */
      taskId?: string | null;
      version: components["schemas"]["DocumentVersion"];
      /** @description Mappings from workflows to issue types. */
      workflowsForIssueTypes: components["schemas"]["WorkflowMetadataAndIssueTypeRestModel"][];
    };
    /** @description The update workflow scheme payload. */
    WorkflowSchemeUpdateRequest: {
      /** @description The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*. */
      defaultWorkflowId?: string;
      /** @description The new description for this workflow scheme. */
      description: string;
      /** @description The ID of this workflow scheme. */
      id: string;
      /** @description The new name for this workflow scheme. */
      name: string;
      /** @description Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
      statusMappingsByIssueTypeOverride?: components["schemas"]["MappingsByIssueTypeOverride"][];
      /** @description The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`. */
      statusMappingsByWorkflows?: components["schemas"]["MappingsByWorkflow"][];
      version: components["schemas"]["DocumentVersion"];
      /** @description Mappings from workflows to issue types. */
      workflowsForIssueTypes?: components["schemas"]["WorkflowSchemeAssociation"][];
      [key: string]: unknown;
    };
    /** @description The request payload to get the required mappings for updating a workflow scheme. */
    WorkflowSchemeUpdateRequiredMappingsRequest: {
      /** @description The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*. */
      defaultWorkflowId?: string | null;
      /** @description The ID of the workflow scheme. */
      id: string;
      /** @description The new workflow to issue type mappings for this workflow scheme. */
      workflowsForIssueTypes: components["schemas"]["WorkflowSchemeAssociation"][];
    };
    WorkflowSchemeUpdateRequiredMappingsResponse: {
      /** @description The list of required status mappings by issue type. */
      statusMappingsByIssueTypes?: components["schemas"]["RequiredMappingByIssueType"][];
      /** @description The list of required status mappings by workflow. */
      statusMappingsByWorkflows?: components["schemas"]["RequiredMappingByWorkflows"][];
      /** @description The details of the statuses in the associated workflows. */
      statuses?: components["schemas"]["StatusMetadata"][];
      /** @description The statuses associated with each workflow. */
      statusesPerWorkflow?: components["schemas"]["StatusesPerWorkflow"][];
    };
    /** @description The scope of the workflow. */
    WorkflowScope: {
      project?: components["schemas"]["ProjectId"];
      /**
       * @description The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
       * @enum {string}
       */
      type: "PROJECT" | "GLOBAL";
    };
    /** @description A workflow transition rule condition. This object returns `nodeType` as `simple`. */
    WorkflowSimpleCondition: {
      /** @description EXPERIMENTAL. The configuration of the transition rule. */
      configuration?: Record<string, never>;
      nodeType: string;
      /** @description The type of the transition rule. */
      type: string;
    };
    /** @description Details of a workflow status. */
    WorkflowStatus: {
      /** @description The ID of the issue status. */
      id: string;
      /** @description The name of the status in the workflow. */
      name: string;
      /** @description Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable. */
      properties?: {
        [key: string]: unknown;
      };
    };
    /**
     * @deprecated
     * @description The status reference and port that a transition is connected to.
     */
    WorkflowStatusAndPort: ({
      /**
       * Format: int32
       * @description The port the transition is connected to this status.
       */
      port?: number | null;
      /** @description The reference of this status. */
      statusReference?: string;
    }) | null;
    /** @description The x and y location of the status in the workflow. */
    WorkflowStatusLayout: ({
      /**
       * Format: double
       * @description The x axis location.
       */
      x?: number | null;
      /**
       * Format: double
       * @description The y axis location.
       */
      y?: number | null;
    }) | null;
    /** @description Details of the status being updated. */
    WorkflowStatusUpdate: {
      /** @description The description of the status. */
      description?: string;
      /** @description The ID of the status. */
      id?: string;
      /** @description The name of the status. */
      name: string;
      /**
       * @description The category of the status.
       * @enum {string}
       */
      statusCategory: "TODO" | "IN_PROGRESS" | "DONE";
      /** @description The reference of the status. */
      statusReference: string;
      [key: string]: unknown;
    };
    /** @description A workflow transition. */
    WorkflowTransition: {
      /**
       * Format: int32
       * @description The transition ID.
       */
      id: number;
      /** @description The transition name. */
      name: string;
    };
    /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
    WorkflowTransitionLinks: ({
      /**
       * Format: int32
       * @description The port that the transition starts from.
       */
      fromPort?: number | null;
      /** @description The status that the transition starts from. */
      fromStatusReference?: string | null;
      /**
       * Format: int32
       * @description The port that the transition goes to.
       */
      toPort?: number | null;
    }) | null;
    /** @description Details about the server Jira is running on. */
    WorkflowTransitionProperty: {
      /** @description The ID of the transition property. */
      id?: string;
      /** @description The key of the transition property. Also known as the name of the transition property. */
      key?: string;
      /** @description The value of the transition property. */
      value: string;
      [key: string]: unknown;
    };
    /** @description A workflow transition rule. */
    WorkflowTransitionRule: {
      /** @description EXPERIMENTAL. The configuration of the transition rule. */
      configuration?: unknown;
      /** @description The type of the transition rule. */
      type: string;
    };
    /** @description A workflow with transition rules. */
    WorkflowTransitionRules: {
      /** @description The list of conditions within the workflow. */
      conditions?: components["schemas"]["AppWorkflowTransitionRule"][];
      /** @description The list of post functions within the workflow. */
      postFunctions?: components["schemas"]["AppWorkflowTransitionRule"][];
      /** @description The list of validators within the workflow. */
      validators?: components["schemas"]["AppWorkflowTransitionRule"][];
      workflowId: components["schemas"]["WorkflowId"];
    };
    /** @description Details about a workflow configuration update request. */
    WorkflowTransitionRulesDetails: {
      workflowId: components["schemas"]["WorkflowId"];
      /** @description The list of connect workflow rule IDs. */
      workflowRuleIds: string[];
    };
    /** @description Details about a workflow configuration update request. */
    WorkflowTransitionRulesUpdate: {
      /** @description The list of workflows with transition rules to update. */
      workflows: components["schemas"]["WorkflowTransitionRules"][];
    };
    /** @description Details of any errors encountered while updating workflow transition rules for a workflow. */
    WorkflowTransitionRulesUpdateErrorDetails: {
      /** @description A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated. */
      ruleUpdateErrors: {
        [key: string]: string[];
      };
      /** @description The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries. */
      updateErrors: string[];
      workflowId: components["schemas"]["WorkflowId"];
    };
    /** @description Details of any errors encountered while updating workflow transition rules. */
    WorkflowTransitionRulesUpdateErrors: {
      /** @description A list of workflows. */
      updateResults: components["schemas"]["WorkflowTransitionRulesUpdateErrorDetails"][];
    };
    /** @description The transitions of the workflow. Note that a transition can have either the deprecated `to`/`from` fields or the `toStatusReference`/`links` fields, but never both nor a combination. */
    WorkflowTransitions: {
      /** @description The post-functions of the transition. */
      actions?: components["schemas"]["WorkflowRuleConfiguration"][];
      conditions?: components["schemas"]["ConditionGroupConfiguration"];
      /** @description The custom event ID of the transition. */
      customIssueEventId?: string | null;
      /** @description The description of the transition. */
      description?: string;
      /**
       * @deprecated
       * @description The statuses and ports that the transition can start from. This field is deprecated - use `toStatusReference`/`links` instead.
       */
      from?: components["schemas"]["WorkflowStatusAndPort"][];
      /** @description The ID of the transition. */
      id?: string;
      /** @description The statuses the transition can start from, and the mapping of ports between the statuses. */
      links?: components["schemas"]["WorkflowTransitionLinks"][];
      /** @description The name of the transition. */
      name?: string;
      /** @description The properties of the transition. */
      properties?: {
        [key: string]: string;
      };
      to?: components["schemas"]["WorkflowStatusAndPort"];
      /** @description The status the transition goes to. */
      toStatusReference?: string;
      transitionScreen?: components["schemas"]["WorkflowRuleConfiguration"];
      /** @description The triggers of the transition. */
      triggers?: components["schemas"]["WorkflowTrigger"][];
      /**
       * @description The transition type.
       * @enum {string}
       */
      type?: "INITIAL" | "GLOBAL" | "DIRECTED";
      /** @description The validators of the transition. */
      validators?: components["schemas"]["WorkflowRuleConfiguration"][];
    };
    /** @description The trigger configuration associated with a workflow. */
    WorkflowTrigger: {
      /** @description The ID of the trigger. */
      id?: string;
      /** @description The parameters of the trigger. */
      parameters: {
        [key: string]: string;
      };
      /** @description The rule key of the trigger. */
      ruleKey: string;
    };
    /** @description The details of the workflows to update. */
    WorkflowUpdate: {
      /** @description The mapping of old to new status ID. */
      defaultStatusMappings?: components["schemas"]["StatusMigration"][];
      /** @description The new description for this workflow. */
      description?: string;
      /** @description The ID of this workflow. */
      id: string;
      startPointLayout?: components["schemas"]["WorkflowLayout"];
      /** @description The mapping of old to new status ID for a specific project and issue type. */
      statusMappings?: components["schemas"]["StatusMappingDTO"][];
      /** @description The statuses associated with this workflow. */
      statuses: components["schemas"]["StatusLayoutUpdate"][];
      /** @description The transitions of this workflow. */
      transitions: components["schemas"]["TransitionUpdateDTO"][];
      version: components["schemas"]["DocumentVersion"];
      [key: string]: unknown;
    };
    /** @description The update workflows payload. */
    WorkflowUpdateRequest: {
      /** @description The statuses to associate with the workflows. */
      statuses: components["schemas"]["WorkflowStatusUpdate"][];
      /** @description The details of the workflows to update. */
      workflows: components["schemas"]["WorkflowUpdate"][];
    };
    WorkflowUpdateResponse: {
      /** @description List of updated statuses. */
      statuses?: components["schemas"]["JiraWorkflowStatus"][];
      /** @description If there is a [asynchronous task](#async-operations) operation, as a result of this update. */
      taskId?: string | null;
      /** @description List of updated workflows. */
      workflows?: components["schemas"]["JiraWorkflow"][];
    };
    WorkflowUpdateValidateRequestBean: {
      payload: components["schemas"]["WorkflowUpdateRequest"];
      validationOptions?: components["schemas"]["ValidationOptionsForUpdate"];
    };
    /** @description The workflows that use this status. Only available if the `workflowUsages` expand is requested. */
    WorkflowUsages: {
      /** @description Workflow ID. */
      workflowId?: string;
      /** @description Workflow name. */
      workflowName?: string;
    };
    /** @description The details about a workflow validation error. */
    WorkflowValidationError: {
      /** @description An error code. */
      code?: string;
      elementReference?: components["schemas"]["WorkflowElementReference"];
      /**
       * @description The validation error level.
       * @enum {string}
       */
      level?: "WARNING" | "ERROR";
      /** @description An error message. */
      message?: string;
      /**
       * @description The type of element the error or warning references.
       * @enum {string}
       */
      type?: "RULE" | "STATUS" | "STATUS_LAYOUT" | "STATUS_PROPERTY" | "WORKFLOW" | "TRANSITION" | "TRANSITION_PROPERTY" | "SCOPE" | "STATUS_MAPPING" | "TRIGGER";
    };
    WorkflowValidationErrorList: {
      /** @description The list of validation errors. */
      errors?: components["schemas"]["WorkflowValidationError"][];
    };
    /** @description Details of workflows and their transition rules to delete. */
    WorkflowsWithTransitionRulesDetails: {
      /** @description The list of workflows with transition rules to delete. */
      workflows: components["schemas"]["WorkflowTransitionRulesDetails"][];
    };
    /** @description Details of a worklog. */
    Worklog: {
      /** @description Details of the user who created the worklog. */
      author?: components["schemas"]["UserDetails"];
      /** @description A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog. */
      comment?: unknown;
      /**
       * Format: date-time
       * @description The datetime on which the worklog was created.
       */
      created?: string;
      /** @description The ID of the worklog record. */
      id?: string;
      /** @description The ID of the issue this worklog is for. */
      issueId?: string;
      /** @description Details of properties for the worklog. Optional when creating or updating a worklog. */
      properties?: components["schemas"]["EntityProperty"][];
      /**
       * Format: uri
       * @description The URL of the worklog item.
       */
      self?: string;
      /**
       * Format: date-time
       * @description The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
       */
      started?: string;
      /** @description The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided. */
      timeSpent?: string;
      /**
       * Format: int64
       * @description The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
       */
      timeSpentSeconds?: number;
      /** @description Details of the user who last updated the worklog. */
      updateAuthor?: components["schemas"]["UserDetails"];
      /**
       * Format: date-time
       * @description The datetime on which the worklog was last updated.
       */
      updated?: string;
      /** @description Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog. */
      visibility?: components["schemas"]["Visibility"];
      [key: string]: unknown;
    };
    WorklogIdsRequestBean: {
      /** @description A list of worklog IDs. */
      ids: number[];
    };
    /** @description Details about data policy. */
    WorkspaceDataPolicy: {
      /** @description Whether the workspace contains any content inaccessible to the requesting application. */
      anyContentBlocked?: boolean;
    };
    /** @description Can contain multiple field values of following types depending on `type` key */
    fields: ({
      /**
       * @description If `true`, will try to retain original non-null issue field values on move.
       * @default true
       */
      retain?: boolean | null;
      /** @enum {string} */
      type?: "adf" | "raw";
      value?: Record<string, never>;
    }) & (components["schemas"]["MandatoryFieldValue"] | components["schemas"]["MandatoryFieldValueForADF"]);
    /** @description Field mapping for mandatory fields in target */
    targetMandatoryFields: {
      /** @description Contains the value of mandatory fields */
      fields: {
        [key: string]: components["schemas"]["fields"];
      };
    } | null;
    /** @description Status mapping for statuses in source workflow to respective target status in target workflow. */
    targetStatus: {
      /** @description An object with the key as the ID of the target status and value with the list of the IDs of the current source statuses. */
      statuses: {
        [key: string]: string[];
      };
    } | null;
    /** @description An object representing the mapping of issues and data related to destination entities, like fields and statuses, that are required during a bulk move. */
    targetToSourcesMapping: {
      /**
       * @description If `true`, values from the source issues will be retained for the mandatory fields in the field configuration of the destination project. The `targetMandatoryFields` property shouldn't be defined.
       *
       * If `false`, the user is required to set values for mandatory fields present in the field configuration of the destination project. Provide input by defining the `targetMandatoryFields` property
       */
      inferFieldDefaults: boolean;
      /**
       * @description If `true`, the statuses of issues being moved in this target group that are not present in the target workflow will be changed to the default status of the target workflow (see below). Leave `targetStatus` empty when using this.
       *
       * If `false`, you must provide a `targetStatus` for each status not present in the target workflow.
       *
       * The default status in a workflow is referred to as the "initial status". Each workflow has its own unique initial status. When an issue is created, it is automatically assigned to this initial status. Read more about configuring initial statuses: [Configure the initial status | Atlassian Support.](https://support.atlassian.com/jira-cloud-administration/docs/configure-the-initial-status/)
       */
      inferStatusDefaults: boolean;
      /**
       * @description When an issue is moved, its subtasks (if there are any) need to be moved with it. `inferSubtaskTypeDefault` helps with moving the subtasks by picking a random subtask type in the target project.
       *
       * If `true`, subtasks will automatically move to the same project as their parent.
       *
       * When they move:
       *
       *  *  Their `issueType` will be set to the default for subtasks in the target project.
       *  *  Values for mandatory fields will be retained from the source issues
       *  *  Specifying separate mapping for implicit subtasks won’t be allowed.
       *
       * If `false`, you must manually move the subtasks. They will retain the parent which they had in the current project after being moved.
       */
      inferSubtaskTypeDefault: boolean;
      /** @description List of issue IDs or keys to be moved. These issues must be from the same project, have the same issue type, and be from the same parent (if they’re subtasks). */
      issueIdsOrKeys?: string[];
      /**
       * @description List of objects containing mandatory fields in the target field configuration and new values that need to be set during the bulk move operation.
       *
       * The new values will only be applied if the field is mandatory in the target project and at least one issue from the source has that field empty, or if the field context is different in the target project (e.g. project-scoped version fields).
       *
       * **You should only define this property when `inferFieldDefaults` is `false`.**
       */
      targetMandatoryFields?: components["schemas"]["targetMandatoryFields"][] | null;
      /**
       * @description List of the objects containing statuses in the source workflow and their new values which need to be set during the bulk move operation.
       *
       * The new values will only be applied if the source status is invalid for the target project and issue type.
       *
       * **You should only define this property when `inferStatusDefaults` is `false`.**
       */
      targetStatus?: components["schemas"]["targetStatus"][] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Get announcement banner configuration
   * @description Returns the current announcement banner configuration.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getBanner: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AnnouncementBannerConfiguration"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Update announcement banner configuration
   * @description Updates the announcement banner configuration.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setBanner: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "isDismissible": false,
         *   "isEnabled": true,
         *   "message": "This is a public, enabled, non-dismissible banner, set using the API",
         *   "visibility": "public"
         * }
         */
        "application/json": components["schemas"]["AnnouncementBannerConfigurationUpdate"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if an invalid parameter is passed. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Update custom fields
   * @description Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request.
   *
   * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
   *
   * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
   */
  updateMultipleCustomFieldValues: {
    parameters: {
      query?: {
        /** @description Whether to generate a changelog for this update. */
        generateChangelog?: boolean;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "updates": [
         *     {
         *       "customField": "customfield_10010",
         *       "issueIds": [
         *         10010,
         *         10011
         *       ],
         *       "value": "new value"
         *     },
         *     {
         *       "customField": "customfield_10011",
         *       "issueIds": [
         *         10010
         *       ],
         *       "value": 1000
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["MultipleCustomFieldValuesUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as the app that provided all the fields. */
      403: {
        content: never;
      };
      /** @description Returned if any field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get custom field configurations
   * @description Returns a [paginated](#pagination) list of configurations for a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
   *
   * The result can be filtered by one of these criteria:
   *
   *  *  `id`.
   *  *  `fieldContextId`.
   *  *  `issueId`.
   *  *  `projectKeyOrId` and `issueTypeId`.
   *
   * Otherwise, all configurations are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that provided the custom field type.
   */
  getCustomFieldConfiguration: {
    parameters: {
      query?: {
        /** @description The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */
        id?: number[];
        /** @description The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */
        fieldContextId?: number[];
        /** @description The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`. */
        issueId?: number;
        /** @description The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`. */
        projectKeyOrId?: string;
        /** @description The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`. */
        issueTypeId?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID or key of the custom field, for example `customfield_10000`. */
        fieldIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanContextualConfiguration"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update custom field configurations
   * @description Update the configuration for contexts of a custom field of a [type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) created by a [Forge app](https://developer.atlassian.com/platform/forge/).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field type.
   */
  updateCustomFieldConfiguration: {
    parameters: {
      path: {
        /** @description The ID or key of the custom field, for example `customfield_10000`. */
        fieldIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "configurations": [
         *     {
         *       "id": "10000"
         *     },
         *     {
         *       "configuration": {
         *         "maxValue": 10000,
         *         "minValue": 0
         *       },
         *       "id": "10001",
         *       "schema": {
         *         "properties": {
         *           "amount": {
         *             "type": "number"
         *           },
         *           "currency": {
         *             "type": "string"
         *           }
         *         },
         *         "required": [
         *           "amount",
         *           "currency"
         *         ]
         *       }
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["CustomFieldConfigurations"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user is not a Jira admin or the request is not authenticated as from the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update custom field value
   * @description Updates the value of a custom field on one or more issues.
   *
   * Apps can only perform this operation on [custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/) and [custom field types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/) declared in their own manifests.
   *
   * **[Permissions](#permissions) required:** Only the app that owns the custom field or custom field type can update its values with this operation.
   */
  updateCustomFieldValue: {
    parameters: {
      query?: {
        /** @description Whether to generate a changelog for this update. */
        generateChangelog?: boolean;
      };
      path: {
        /** @description The ID or key of the custom field. For example, `customfield_10010`. */
        fieldIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "updates": [
         *     {
         *       "issueIds": [
         *         10010
         *       ],
         *       "value": "new value"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["CustomFieldValueUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get application property
   * @description Returns all application properties or an application property.
   *
   * If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getApplicationProperty: {
    parameters: {
      query?: {
        /** @description The key of the application property. */
        key?: string;
        /** @description The permission level of all items being returned in the list. */
        permissionLevel?: string;
        /** @description When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*. */
        keyFilter?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationProperty"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the application property is not found or the user does not have permission to view it. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get advanced settings
   * @description Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon > **Jira settings** > **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAdvancedSettings: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationProperty"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user is not an administrator. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Set application property
   * @description Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
   *
   * #### Advanced settings ####
   *
   * The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
   *
   * | Key | Description | Default value |
   * | -- | -- | -- |
   * | `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |
   * | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |
   * | `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |
   * | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |
   * | `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |
   * | `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |
   * | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |
   * | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |
   * | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |
   *
   *
   * #### Look and feel ####
   *
   * The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
   *
   * | Key | Description | Default value |
   * | -- | -- | -- |
   * | `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |
   * | `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |
   * | `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |
   * | `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |
   * | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |
   * | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |
   * | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |
   * | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |
   * | `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |
   * | `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |
   * | `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |
   * | `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |
   * | `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |
   * | `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |
   * | `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |
   *
   *
   * #### Other settings ####
   *
   * | Key | Description | Default value |
   * | -- | -- | -- |
   * | `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |
   *
   *
   * *Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setApplicationProperty: {
    parameters: {
      path: {
        /** @description The key of the application property to update. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": "jira.home",
         *   "value": "/var/jira/jira-home"
         * }
         */
        "application/json": components["schemas"]["SimpleApplicationPropertyBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationProperty"];
        };
      };
      /** @description Returned if the data type of the `value` does not match the application property's data type. For example, a string is provided instead of an integer. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have permission to edit the property. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the property is not found or the user does not have permission to view it. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all application roles
   * @description Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllApplicationRoles: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationRole"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user is not an administrator. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get application role
   * @description Returns an application role.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getApplicationRole: {
    parameters: {
      path: {
        /** @description The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role. */
        key: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationRole"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user is not an administrator. */
      403: {
        content: never;
      };
      /** @description Returned if the role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get attachment content
   * @description Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.
   *
   * To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** For the issue containing the attachment:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getAttachmentContent: {
    parameters: {
      query?: {
        /** @description Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */
        redirect?: boolean;
      };
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful when `redirect` is set to `false`. */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Returned if the request is successful when a `Range` header is provided and `redirect` is set to `false`. */
      206: {
        content: never;
      };
      /** @description Returned if the request is successful. See the `Location` header for the download URL. */
      303: {
        content: never;
      };
      /** @description Returned if the range supplied in the `Range` header is malformed. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description The user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       */
      404: {
        content: never;
      };
      /** @description Returned if the server is unable to satisfy the range of bytes provided. */
      416: {
        content: never;
      };
    };
  };
  /**
   * Get Jira attachment settings
   * @description Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
   *
   * Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAttachmentMeta: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentSettings"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get attachment thumbnail
   * @description Returns the thumbnail of an attachment.
   *
   * To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** For the issue containing the attachment:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getAttachmentThumbnail: {
    parameters: {
      query?: {
        /** @description Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */
        redirect?: boolean;
        /** @description Whether a default thumbnail is returned when the requested thumbnail is not found. */
        fallbackToDefault?: boolean;
        /** @description The maximum width to scale the thumbnail to. */
        width?: number;
        /** @description The maximum height to scale the thumbnail to. */
        height?: number;
      };
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful when `redirect` is set to `false`. */
      200: {
        content: {
          "application/json": unknown[];
        };
      };
      /** @description Returned if the request is successful. See the `Location` header for the download URL. */
      303: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description The user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       *  *  `fallbackToDefault` is `false` and the request thumbnail cannot be downloaded.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get attachment metadata
   * @description Returns the metadata for an attachment. Note that the attachment itself is not returned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getAttachment: {
    parameters: {
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentMetadata"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete attachment
   * @description Deletes an attachment from an issue.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
   *
   *  *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
   *  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
   */
  removeAttachment: {
    parameters: {
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all metadata for an expanded attachment
   * @description Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
   *
   * Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** For the issue containing the attachment:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  expandAttachmentForHumans: {
    parameters: {
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentArchiveMetadataReadable"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description The user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       */
      404: {
        content: never;
      };
      /** @description Returned if the attachment is an archive, but not a supported archive format. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get contents metadata for an expanded attachment
   * @description Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
   *
   * Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** For the issue containing the attachment:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  expandAttachmentForMachines: {
    parameters: {
      path: {
        /** @description The ID of the attachment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive. */
      200: {
        content: {
          "application/json": components["schemas"]["AttachmentArchiveImpl"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description The user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the attachment is not found.
       *  *  attachments are disabled in the Jira settings.
       */
      404: {
        content: never;
      };
      /** @description Returned if the attachment is an archive, but not a supported archive format. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get audit records
   * @description Returns a list of audit records. The list can be filtered to include items:
   *
   *  *  where each item in `filter` has at least one match in any of these fields:
   *
   *      *  `summary`
   *      *  `category`
   *      *  `eventSource`
   *      *  `objectItem.name` If the object is a user, account ID is available to filter.
   *      *  `objectItem.parentName`
   *      *  `objectItem.typeName`
   *      *  `changedValues.changedFrom`
   *      *  `changedValues.changedTo`
   *      *  `remoteAddress`
   *
   *     For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
   *  *  created on or after a date and time.
   *  *  created or or before a date and time.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAuditRecords: {
    parameters: {
      query?: {
        /** @description The number of records to skip before returning the first result. */
        offset?: number;
        /** @description The maximum number of results to return. */
        limit?: number;
        /** @description The strings to match with audit field content, space separated. */
        filter?: string;
        /** @description The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned. */
        from?: string;
        /** @description The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned. */
        to?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AuditRecords"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the user does not have the required permissions.
       *  *  all Jira products are on free plans. Audit logs are available when at least one Jira product is on a paid plan.
       */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get system avatars by type
   * @description Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllSystemAvatars: {
    parameters: {
      path: {
        /** @description The avatar type. */
        type: "issuetype" | "project" | "user";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SystemAvatars"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if an error occurs while retrieving the list of avatars. */
      500: {
        content: never;
      };
    };
  };
  /**
   * Get bulk editable fields
   * @description Use this API to get a list of fields visible to the user to perform bulk edit operations. You can pass single or multiple issues in the query to get eligible editable fields. This API uses pagination to return responses, delivering 50 fields at a time.
   *
   * This method is experimental and may change.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
   *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
   */
  getBulkEditableFields: {
    parameters: {
      query: {
        /** @description The IDs or keys of the issues to get editable fields from. */
        issueIdsOrKeys: string;
        /** @description (Optional)The text to search for in the editable fields. */
        searchText?: string;
        /** @description (Optional)The end cursor for use in pagination. */
        endingBefore?: string;
        /** @description (Optional)The start cursor for use in pagination. */
        startingAfter?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["BulkEditGetFields"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
      /** @description Returned if no editable fields are found for the provided issue IDs. */
      404: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
    };
  };
  /**
   * Bulk edit issues
   * @description Use this API to submit a bulk edit request and simultaneously edit multiple issues. There are limits applied to the number of issues and fields that can be edited. A single request can accommodate a maximum of 1000 issues (including subtasks) and 200 fields.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
   *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in all projects that contain the selected issues.
   */
  submitBulkEdit: {
    parameters: {
      query?: {
        /** @description A boolean value that indicates whether to send a bulk change notification when the issues are being edited. */
        sendBulkNotification?: boolean;
      };
    };
    /** @description The request body containing the issues to be edited and the new field values. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["IssueBulkEditPayload"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["SubmittedBulkOperation"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
    };
  };
  /**
   * Bulk move issues
   * @description Use this API to submit a bulk issue move request. You can move multiple issues, but they must all be moved to and from a single project, issue type, and parent. You can't move more than 1000 issues (including subtasks) at once.
   *
   * #### Scenarios: ####
   *
   * This is an early version of the API and it doesn't have full feature parity with the Bulk Move UI experience.
   *
   *  *  Moving issue of type A to issue of type B in the same project or a different project: `SUPPORTED`
   *  *  Moving multiple issues of type A in one project to multiple issues of type B in the same project or a different project: **`SUPPORTED`**
   *  *  Moving a standard parent issue of type A with its multiple subtask issue types in one project to standard issue of type B and multiple subtask issue types in the same project or a different project: `SUPPORTED`
   *  *  Moving an epic issue with its child issues to a different project without losing their relation: `NOT SUPPORTED`
   *     (Workaround: Move them individually and stitch the relationship back with the Bulk Edit API)
   *
   * #### Limits applied to bulk issue moves: ####
   *
   * When using the bulk move, keep in mind that there are limits on the number of issues and fields you can include.
   *
   *  *  You can move up to 1,000 issues in a single operation, including any subtasks.
   *  *  All issues must originate from the same project and share the same issue type and parent.
   *  *  The total combined number of fields across all issues must not exceed 1,500,000. For example, if each issue includes 15,000 fields, then the maximum number of issues that can be moved is 100.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
   *  *  Move [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in source projects.
   *  *  Create [issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects.
   *  *  Browse [project permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/) in destination projects, if moving subtasks only.
   */
  submitBulkMove: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "targetToSourcesMapping": {
         *     "PROJECT-KEY,10001": {
         *       "inferFieldDefaults": false,
         *       "inferStatusDefaults": false,
         *       "inferSubtaskTypeDefault": true,
         *       "issueIdsOrKeys": [
         *         "ISSUE-1"
         *       ],
         *       "targetMandatoryFields": [
         *         {
         *           "fields": {
         *             "customfield_10000": {
         *               "retain": false,
         *               "type": "raw",
         *               "value": [
         *                 "value-1",
         *                 "value-2"
         *               ]
         *             },
         *             "description": {
         *               "retain": true,
         *               "type": "adf",
         *               "value": {
         *                 "content": [
         *                   {
         *                     "content": [
         *                       {
         *                         "text": "New description value",
         *                         "type": "text"
         *                       }
         *                     ],
         *                     "type": "paragraph"
         *                   }
         *                 ],
         *                 "type": "doc",
         *                 "version": 1
         *               }
         *             },
         *             "fixVersions": {
         *               "retain": false,
         *               "type": "raw",
         *               "value": [
         *                 "10009"
         *               ]
         *             },
         *             "labels": {
         *               "retain": false,
         *               "type": "raw",
         *               "value": [
         *                 "label-1",
         *                 "label-2"
         *               ]
         *             }
         *           }
         *         }
         *       ],
         *       "targetStatus": [
         *         {
         *           "statuses": {
         *             "10001": [
         *               "10002",
         *               "10003"
         *             ]
         *           }
         *         }
         *       ]
         *     }
         *   }
         * }
         */
        "application/json": components["schemas"]["IssueBulkMovePayload"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SubmittedBulkOperation"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["BulkOperationErrorResponse"];
        };
      };
    };
  };
  /**
   * Get bulk issue operation progress
   * @description Use this to get the progress state for the specified bulk operation `taskId`.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  Global bulk change [permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/).
   *  *  Administer Jira [global permission](https://support.atlassian.com/jira-cloud-administration/docs/manage-global-permissions/), or be the creator of the task.
   *
   * If the task is running, this resource will return:
   *
   *     {"taskId":"10779","status":"RUNNING","progressPercent":65,"submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"created":1690180055963,"started":1690180056206,"updated":169018005829}
   *
   * If the task has completed, then this resource will return:
   *
   *     {"processedAccessibleIssues":[10001,10002],"created":1709189449954,"progressPercent":100,"started":1709189450154,"status":"COMPLETE","submittedBy":{"accountId":"5b10a2844c20165700ede21g"},"invalidOrInaccessibleIssueCount":0,"taskId":"10000","totalIssueCount":2,"updated":1709189450354}
   *
   * **Note:** You can view task progress for up to 14 days from creation.
   */
  getBulkOperationProgress: {
    parameters: {
      path: {
        /** @description The ID of the task. */
        taskId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["BulkOperationProgress"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all classification levels
   * @description Returns all classification levels.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllUserDataClassificationLevels: {
    parameters: {
      query?: {
        /** @description Optional set of statuses to filter by. */
        status?: ("PUBLISHED" | "ARCHIVED" | "DRAFT")[];
        /** @description Ordering of the results by a given field. If not provided, values will not be sorted. */
        orderBy?: "rank" | "-rank" | "+rank";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DataClassificationLevelsBean"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get comments by IDs
   * @description Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Comments are returned where the user:
   *
   *  *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getCommentsByIds: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `renderedBody` Returns the comment body rendered in HTML.
         *  *  `properties` Returns the comment's properties.
         */
        expand?: string;
      };
    };
    /** @description The list of comment IDs. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "ids": [
         *     1,
         *     2,
         *     5,
         *     10
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueCommentListRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanComment"];
        };
      };
      /** @description Returned if the request contains more than 1000 IDs or is empty. */
      400: {
        content: never;
      };
    };
  };
  /**
   * Get comment property keys
   * @description Returns the keys of all the properties of a comment.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getCommentPropertyKeys: {
    parameters: {
      path: {
        /** @description The ID of the comment. */
        commentId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the comment ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the comment is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get comment property
   * @description Returns the value of a comment property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getCommentProperty: {
    parameters: {
      path: {
        /** @description The ID of the comment. */
        commentId: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the comment or the property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set comment property
   * @description Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
   *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
   *
   * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
   */
  setCommentProperty: {
    parameters: {
      path: {
        /** @description The ID of the comment. */
        commentId: string;
        /** @description The key of the property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the comment property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the comment property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the comment is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete comment property
   * @description Deletes a comment property.
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
   *  *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
   *
   * Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
   */
  deleteCommentProperty: {
    parameters: {
      path: {
        /** @description The ID of the comment. */
        commentId: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the comment or the property is not found or the user has the necessary project permissions but isn't a member of the role or group visibility of the comment is restricted to. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Find components for projects
   * @description Returns a [paginated](#pagination) list of all components in a project, including global (Compass) components when applicable.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  findComponentsForProjects: {
    parameters: {
      query?: {
        /** @description The project IDs and/or project keys (case sensitive). */
        projectIdsOrKeys?: string[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `description` Sorts by the component description.
         *  *  `name` Sorts by component name.
         */
        orderBy?: "description" | "-description" | "+description" | "name" | "-name" | "+name";
        /** @description Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive). */
        query?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBean2ComponentJsonBean"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create component
   * @description Creates a component. Use components to provide containers for issues within a project. Use components to provide containers for issues within a project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createComponent: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "assigneeType": "PROJECT_LEAD",
         *   "description": "This is a Jira component",
         *   "isAssigneeTypeValid": false,
         *   "leadAccountId": "5b10a2844c20165700ede21g",
         *   "name": "Component 1",
         *   "project": "HSP"
         * }
         */
        "application/json": components["schemas"]["ProjectComponent"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectComponent"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the user is not found.
       *  *  `name` is not provided.
       *  *  `name` is over 255 characters in length.
       *  *  `projectId` is not provided.
       *  *  `assigneeType` is an invalid value.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to browse the project containing the component. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get component
   * @description Returns a component.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
   */
  getComponent: {
    parameters: {
      path: {
        /** @description The ID of the component. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectComponent"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the component is not found or the user does not have permission to browse the project containing the component. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update component
   * @description Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateComponent: {
    parameters: {
      path: {
        /** @description The ID of the component. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "assigneeType": "PROJECT_LEAD",
         *   "description": "This is a Jira component",
         *   "isAssigneeTypeValid": false,
         *   "leadAccountId": "5b10a2844c20165700ede21g",
         *   "name": "Component 1"
         * }
         */
        "application/json": components["schemas"]["ProjectComponent"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectComponent"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the user is not found.
       *  *  `assigneeType` is an invalid value.
       *  *  `name` is over 255 characters in length.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. */
      403: {
        content: never;
      };
      /** @description Returned if the component is not found or the user does not have permission to browse the project containing the component. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete component
   * @description Deletes a component.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteComponent: {
    parameters: {
      query?: {
        /** @description The ID of the component to replace the deleted component. If this value is null no replacement is made. */
        moveIssuesTo?: string;
      };
      path: {
        /** @description The ID of the component. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the component is not found.
       *  *  the replacement component is not found.
       *  *  the user does not have permission to browse the project containing the component.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get component issues count
   * @description Returns the counts of issues assigned to the component.
   *
   * This operation can be accessed anonymously.
   *
   * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
   *
   *  *  **Classic**: `read:jira-work`
   *  *  **Granular**: `read:field:jira`, `read:project.component:jira`
   *
   * **[Permissions](#permissions) required:** None.
   */
  getComponentRelatedIssues: {
    parameters: {
      path: {
        /** @description The ID of the component. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ComponentIssuesCount"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the component is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get global settings
   * @description Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getConfiguration: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Configuration"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get selected time tracking provider
   * @description Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getSelectedTimeTrackingImplementation: {
    responses: {
      /** @description Returned if the request is successful and time tracking is enabled. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeTrackingProvider"];
        };
      };
      /** @description Returned if the request is successful but time tracking is disabled. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Select time tracking provider
   * @description Selects a time tracking provider.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  selectTimeTrackingImplementation: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "key": "Jira"
         * }
         */
        "application/json": components["schemas"]["TimeTrackingProvider"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the time tracking provider is not found. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get all time tracking providers
   * @description Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAvailableTimeTrackingImplementations: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeTrackingProvider"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get time tracking settings
   * @description Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getSharedTimeTrackingConfiguration: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeTrackingConfiguration"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Set time tracking settings
   * @description Sets the time tracking settings.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setSharedTimeTrackingConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultUnit": "hour",
         *   "timeFormat": "pretty",
         *   "workingDaysPerWeek": 5.5,
         *   "workingHoursPerDay": 7.6
         * }
         */
        "application/json": components["schemas"]["TimeTrackingConfiguration"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["TimeTrackingConfiguration"];
        };
      };
      /** @description Returned if the request object is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get custom field option
   * @description Returns a custom field option. For example, an option in a select list.
   *
   * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The custom field option is returned as follows:
   *
   *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
   */
  getCustomFieldOption: {
    parameters: {
      path: {
        /** @description The ID of the custom field option. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldOption"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the custom field option is not found.
       *  *  the user does not have permission to view the custom field.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all dashboards
   * @description Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllDashboards: {
    parameters: {
      query?: {
        /**
         * @description The filter applied to the list of dashboards. Valid values are:
         *
         *  *  `favourite` Returns dashboards the user has marked as favorite.
         *  *  `my` Returns dashboards owned by the user.
         */
        filter?: "my" | "favourite";
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfDashboards"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Create dashboard
   * @description Creates a dashboard.
   *
   * **[Permissions](#permissions) required:** None.
   */
  createDashboard: {
    parameters: {
      query?: {
        /** @description Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) */
        extendAdminPermissions?: boolean;
      };
    };
    /** @description Dashboard details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A dashboard to help auditors identify sample of issues to check.",
         *   "editPermissions": [],
         *   "name": "Auditors dashboard",
         *   "sharePermissions": [
         *     {
         *       "type": "global"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["DashboardDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Bulk edit dashboards
   * @description Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.
   *
   * **[Permissions](#permissions) required:** None
   *
   * The dashboards to be updated must be owned by the user, or the user must be an administrator.
   */
  bulkEditDashboards: {
    /** @description The details of dashboards being updated in bulk. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "action": "changePermission",
         *   "entityIds": [
         *     10001,
         *     10002
         *   ],
         *   "extendAdminPermissions": true,
         *   "permissionDetails": {
         *     "editPermissions": [
         *       {
         *         "group": {
         *           "groupId": "276f955c-63d7-42c8-9520-92d01dca0625",
         *           "name": "jira-administrators",
         *           "self": "https://your-domain.atlassian.net/rest/api/~ver~/group?groupId=276f955c-63d7-42c8-9520-92d01dca0625"
         *         },
         *         "id": 10010,
         *         "type": "group"
         *       }
         *     ],
         *     "sharePermissions": [
         *       {
         *         "id": 10000,
         *         "type": "global"
         *       }
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["BulkEditShareableEntityRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["BulkEditShareableEntityResponse"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get available gadgets
   * @description Gets a list of all available gadgets that can be added to all dashboards.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllAvailableDashboardGadgets: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AvailableDashboardGadgetsResponse"];
        };
      };
      /** @description 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Search for dashboards
   * @description Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
   *
   *  *  Dashboards owned by the user. Not returned for anonymous users.
   *  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
   *  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
   *  *  Dashboards shared with a public project.
   *  *  Dashboards shared with the public.
   */
  getDashboardsPaginated: {
    parameters: {
      query?: {
        /** @description String used to perform a case-insensitive partial match with `name`. */
        dashboardName?: string;
        /** @description User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter. */
        accountId?: string;
        /** @description This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter. */
        owner?: string;
        /** @description As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter. */
        groupname?: string;
        /** @description Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */
        groupId?: string;
        /** @description Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`. */
        projectId?: number;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
         *  *  `favourite_count` Sorts by dashboard popularity.
         *  *  `id` Sorts by dashboard ID.
         *  *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
         *  *  `name` Sorts by dashboard name.
         *  *  `owner` Sorts by dashboard owner name.
         */
        orderBy?: "description" | "-description" | "+description" | "favorite_count" | "-favorite_count" | "+favorite_count" | "id" | "-id" | "+id" | "is_favorite" | "-is_favorite" | "+is_favorite" | "name" | "-name" | "+name" | "owner" | "-owner" | "+owner";
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The status to filter by. It may be active, archived or deleted. */
        status?: "active" | "archived" | "deleted";
        /**
         * @description Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `description` Returns the description of the dashboard.
         *  *  `owner` Returns the owner of the dashboard.
         *  *  `viewUrl` Returns the URL that is used to view the dashboard.
         *  *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
         *  *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
         *  *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
         *  *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
         *  *  `isWritable` Returns whether the current user has permission to edit the dashboard.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanDashboard"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `orderBy` is invalid.
       *  *  `expand` includes an invalid value.
       *  *  `accountId` and `owner` are provided.
       *  *  `groupname` and `groupId` are provided.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description 401 response */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get gadgets
   * @description Returns a list of dashboard gadgets on a dashboard.
   *
   * This operation returns:
   *
   *  *  Gadgets from a list of IDs, when `id` is set.
   *  *  Gadgets with a module key, when `moduleKey` is set.
   *  *  Gadgets from a list of URIs, when `uri` is set.
   *  *  All gadgets, when no other parameters are set.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllGadgets: {
    parameters: {
      query?: {
        /** @description The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`. */
        moduleKey?: string[];
        /** @description The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`. */
        uri?: string[];
        /** @description The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`. */
        gadgetId?: number[];
      };
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardGadgetResponse"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the dashboard is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Add gadget to dashboard
   * @description Adds a gadget to a dashboard.
   *
   * **[Permissions](#permissions) required:** None.
   */
  addGadget: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "color": "blue",
         *   "ignoreUriAndModuleKeyValidation": false,
         *   "moduleKey": "com.atlassian.plugins.atlassian-connect-plugin:com.atlassian.connect.node.sample-addon__sample-dashboard-item",
         *   "position": {
         *     "column": 1,
         *     "row": 0
         *   },
         *   "title": "Issue statistics"
         * }
         */
        "application/json": components["schemas"]["DashboardGadgetSettings"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardGadget"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the dashboard is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Update gadget on dashboard
   * @description Changes the title, position, and color of the gadget on a dashboard.
   *
   * **[Permissions](#permissions) required:** None.
   */
  updateGadget: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: number;
        /** @description The ID of the gadget. */
        gadgetId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "color": "red",
         *   "position": {
         *     "column": 1,
         *     "row": 1
         *   },
         *   "title": "My new gadget title"
         * }
         */
        "application/json": components["schemas"]["DashboardGadgetUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the gadget or the dashboard is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Remove gadget from dashboard
   * @description Removes a dashboard gadget from a dashboard.
   *
   * When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.
   *
   * **[Permissions](#permissions) required:** None.
   */
  removeGadget: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: number;
        /** @description The ID of the gadget. */
        gadgetId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the gadget or the dashboard is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get dashboard item property keys
   * @description Returns the keys of all properties for a dashboard item.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
   */
  getDashboardItemPropertyKeys: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: string;
        /** @description The ID of the dashboard item. */
        itemId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get dashboard item property
   * @description Returns the key and value of a dashboard item property.
   *
   * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
   *
   * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
   *
   * There is no resource to set or get dashboard items.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira\\u2019s anonymous access is permitted.
   */
  getDashboardItemProperty: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: string;
        /** @description The ID of the dashboard item. */
        itemId: string;
        /** @description The key of the dashboard item property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Set dashboard item property
   * @description Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
   *
   * A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
   *
   * When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
   *
   * There is no resource to set or get dashboard items.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
   */
  setDashboardItemProperty: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: string;
        /** @description The ID of the dashboard item. */
        itemId: string;
        /** @description The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body's JSON must be an object with all keys and values as strings. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "number": 5,
         *   "string": "string-value"
         * }
         */
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the dashboard item property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the dashboard item property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  Request is invalid
       *  *  Or if all of these conditions are met in the request:
       *
       *      *  The dashboard item has a spec URI and no complete module key
       *      *  The value of propertyKey is equal to "config"
       *      *  The request body contains a JSON object whose keys and values are not strings.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user is not the owner of the dashboard. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard item is not found or the dashboard is not shared with the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete dashboard item property
   * @description Deletes a dashboard item property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
   */
  deleteDashboardItemProperty: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        dashboardId: string;
        /** @description The ID of the dashboard item. */
        itemId: string;
        /** @description The key of the dashboard item property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the dashboard item property is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the dashboard or dashboard item ID is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user is not the owner of the dashboard. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard item is not found or the dashboard is not shared with the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get dashboard
   * @description Returns a dashboard.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   *
   * However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
   */
  getDashboard: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      /** @description 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update dashboard
   * @description Updates a dashboard, replacing all the dashboard details with those provided.
   *
   * **[Permissions](#permissions) required:** None
   *
   * The dashboard to be updated must be owned by the user.
   */
  updateDashboard: {
    parameters: {
      query?: {
        /** @description Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) */
        extendAdminPermissions?: boolean;
      };
      path: {
        /** @description The ID of the dashboard to update. */
        id: string;
      };
    };
    /** @description Replacement dashboard details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A dashboard to help auditors identify sample of issues to check.",
         *   "editPermissions": [],
         *   "name": "Auditors dashboard",
         *   "sharePermissions": [
         *     {
         *       "type": "global"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["DashboardDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard is not found or the dashboard is not owned by the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete dashboard
   * @description Deletes a dashboard.
   *
   * **[Permissions](#permissions) required:** None
   *
   * The dashboard to be deleted must be owned by the user.
   */
  deleteDashboard: {
    parameters: {
      path: {
        /** @description The ID of the dashboard. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the dashboard is deleted. */
      204: {
        content: never;
      };
      /** @description 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Copy dashboard
   * @description Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.
   *
   * **[Permissions](#permissions) required:** None
   *
   * The dashboard to be copied must be owned by or shared with the user.
   */
  copyDashboard: {
    parameters: {
      query?: {
        /** @description Whether admin level permissions are used. It should only be true if the user has *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) */
        extendAdminPermissions?: boolean;
      };
      path: {
        id: string;
      };
    };
    /** @description Dashboard details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A dashboard to help auditors identify sample of issues to check.",
         *   "editPermissions": [],
         *   "name": "Auditors dashboard",
         *   "sharePermissions": [
         *     {
         *       "type": "global"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["DashboardDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the dashboard is not found or the dashboard is not owned by or shared with the user. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get data policy for the workspace
   * @description Returns data policy for the workspace.
   */
  getPolicy: {
    responses: {
      /** @description Returned if the request is successful */
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceDataPolicy"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the client is not authorized to make the request. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get data policy for projects
   * @description Returns data policies for the projects specified in the request.
   */
  getPolicies: {
    parameters: {
      query?: {
        /** @description A list of project identifiers. This parameter accepts a comma-separated list. */
        ids?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectDataPolicies"];
        };
      };
      /** @description Returned if the request is not valid or includes invalid or not-permitted project identifiers. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the client is not authorized to make the request. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get events
   * @description Returns all issue events.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getEvents: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueEvent"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to complete this request. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Analyse Jira expression
   * @description Analyses and validates Jira expressions.
   *
   * As an experimental feature, this operation can also attempt to type-check the expressions.
   *
   * Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
   *
   * **[Permissions](#permissions) required**: None.
   */
  analyseExpression: {
    parameters: {
      query?: {
        /**
         * @description The check to perform:
         *
         *  *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
         *  *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
         *  *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.
         */
        check?: "syntax" | "type" | "complexity";
      };
    };
    /** @description The Jira expressions to analyse. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "contextVariables": {
         *     "listOfStrings": "List<String>",
         *     "record": "{ a: Number, b: String }",
         *     "value": "User"
         *   },
         *   "expressions": [
         *     "issues.map(issue => issue.properties['property_key'])"
         *   ]
         * }
         */
        "application/json": components["schemas"]["JiraExpressionForAnalysis"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["JiraExpressionsAnalysis"];
        };
      };
      /** @description 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description 404 response */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Evaluate Jira expression
   * @description Evaluates a Jira expression and returns its value.
   *
   * This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
   *
   * #### Context variables ####
   *
   * The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
   *
   *  *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
   *  *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
   *  *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
   *  *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
   *  *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
   *  *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
   *  *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
   *  *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
   *  *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
   *
   * Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:
   *
   *  *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
   *  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
   *  *  `json`: A JSON object containing custom content.
   *  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.
   * Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
   */
  evaluateJiraExpression: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions. */
        expand?: string;
      };
    };
    /** @description The Jira expression and the evaluation context. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "context": {
         *     "board": 10100,
         *     "custom": {
         *       "config": {
         *         "type": "json",
         *         "value": {
         *           "userId": "10002"
         *         }
         *       },
         *       "issuesList": [
         *         {
         *           "key": "ACJIRA-1471",
         *           "type": "issue"
         *         },
         *         {
         *           "id": 100001,
         *           "type": "issue"
         *         }
         *       ],
         *       "myUser": {
         *         "accountId": "100001",
         *         "type": "user"
         *       },
         *       "nullField": {
         *         "type": "json"
         *       }
         *     },
         *     "customerRequest": 1450,
         *     "issue": {
         *       "key": "ACJIRA-1470"
         *     },
         *     "issues": {
         *       "jql": {
         *         "maxResults": 100,
         *         "query": "project = HSP",
         *         "startAt": 0,
         *         "validation": "strict"
         *       }
         *     },
         *     "project": {
         *       "key": "ACJIRA"
         *     },
         *     "serviceDesk": 10023,
         *     "sprint": 10001
         *   },
         *   "expression": "{ key: issue.key, type: issue.issueType.name, links: issue.links.map(link => link.linkedIssue.id), listCustomVariable: issuesList.includes(issue), customVariables: myUser.accountId == config.userId}"
         * }
         */
        "application/json": components["schemas"]["JiraExpressionEvalRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object. */
      200: {
        content: {
          "application/json": components["schemas"]["JiraExpressionResult"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the request is invalid, that is:
       *
       *      *  invalid data is provided, such as a request including issue ID and key.
       *      *  the expression is invalid and can not be parsed.
       *  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression `issue.id` where `issue` is `null`). In this case an error message is provided.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if any object provided in the request context is not found or the user does not have permission to view it. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get fields
   * @description Returns system and custom issue fields according to the following rules:
   *
   *  *  Fields that cannot be added to the issue navigator are always returned.
   *  *  Fields that cannot be placed on an issue screen are always returned.
   *  *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
   *  *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getFields: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FieldDetails"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create custom field
   * @description Creates a custom field.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createCustomField: {
    /** @description Definition of the custom field to be created */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Custom field for picking groups",
         *   "name": "New custom field",
         *   "searcherKey": "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher",
         *   "type": "com.atlassian.jira.plugin.system.customfieldtypes:grouppicker"
         * }
         */
        "application/json": components["schemas"]["CustomFieldDefinitionJsonBean"];
      };
    };
    responses: {
      /** @description Returned if the custom field is created. */
      201: {
        content: {
          "application/json": components["schemas"]["FieldDetails"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the user does not have permission to create custom fields.
       *  *  any of the request object properties have invalid or missing values.
       */
      400: {
        content: never;
      };
    };
  };
  /**
   * Get fields paginated
   * @description Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:
   *
   *  *  all fields
   *  *  specific fields, by defining `id`
   *  *  fields that contain a string in the field name or description, by defining `query`
   *  *  specific fields that contain a string in the field name or description, by defining `id` and `query`
   *
   * Only custom fields can be queried, `type` must be set to `custom`.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getFieldsPaginated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The type of fields to search. */
        type?: ("custom" | "system")[];
        /** @description The IDs of the custom fields to return or, where `query` is specified, filter. */
        id?: string[];
        /** @description String used to perform a case-insensitive partial match with field names or descriptions. */
        query?: string;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `contextsCount` sorts by the number of contexts related to a field
         *  *  `lastUsed` sorts by the date when the value of the field last changed
         *  *  `name` sorts by the field name
         *  *  `screensCount` sorts by the number of screens related to a field
         */
        orderBy?: "contextsCount" | "-contextsCount" | "+contextsCount" | "lastUsed" | "-lastUsed" | "+lastUsed" | "name" | "-name" | "+name" | "screensCount" | "-screensCount" | "+screensCount" | "projectsCount" | "-projectsCount" | "+projectsCount";
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `key` returns the key for each field
         *  *  `stableId` returns the stableId for each field
         *  *  `lastUsed` returns the date when the value of the field last changed
         *  *  `screensCount` returns the number of screens related to a field
         *  *  `contextsCount` returns the number of contexts related to a field
         *  *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)
         *  *  `searcherKey` returns the searcher key for each custom field
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanField"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get fields in trash paginated
   * @description Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.
   *
   * Only custom fields can be queried, `type` must be set to `custom`.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getTrashedFieldsPaginated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        id?: string[];
        /** @description String used to perform a case-insensitive partial match with field names or descriptions. */
        query?: string;
        expand?: "name" | "-name" | "+name" | "trashDate" | "-trashDate" | "+trashDate" | "plannedDeletionDate" | "-plannedDeletionDate" | "+plannedDeletionDate" | "projectsCount" | "-projectsCount" | "+projectsCount";
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `name` sorts by the field name
         *  *  `trashDate` sorts by the date the field was moved to the trash
         *  *  `plannedDeletionDate` sorts by the planned deletion date
         */
        orderBy?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanField"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Update custom field
   * @description Updates a custom field.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateCustomField: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    /** @description The custom field update details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Select the manager and the corresponding employee.",
         *   "name": "Managers and employees list",
         *   "searcherKey": "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"
         * }
         */
        "application/json": components["schemas"]["UpdateCustomFieldDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get custom field contexts
   * @description Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
   *
   *  *  With no other parameters set, all contexts.
   *  *  By defining `id` only, all contexts from the list of IDs.
   *  *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
   *  *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getContextsForField: {
    parameters: {
      query?: {
        /** @description Whether to return contexts that apply to all issue types. */
        isAnyIssueType?: boolean;
        /** @description Whether to return contexts that apply to all projects. */
        isGlobalContext?: boolean;
        /** @description The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`. */
        contextId?: number[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanCustomFieldContext"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field was not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Create custom field context
   * @description Creates a custom field context.
   *
   * If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createCustomFieldContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A context used to define the custom field options for bugs.",
         *   "issueTypeIds": [
         *     "10010"
         *   ],
         *   "name": "Bug fields context",
         *   "projectIds": []
         * }
         */
        "application/json": components["schemas"]["CreateCustomFieldContext"];
      };
    };
    responses: {
      /** @description Returned if the custom field context is created. */
      201: {
        content: {
          "application/json": components["schemas"]["CreateCustomFieldContext"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the field, project, or issue type is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. */
      409: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get custom field contexts default values
   * @description Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.
   * The returned object depends on type of the custom field:
   *
   *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
   *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
   *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
   *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
   *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
   *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
   *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
   *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
   *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
   *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
   *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
   *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
   *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
   *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
   *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
   *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
   *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
   *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
   *
   * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
   *
   *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
   *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
   *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
   *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
   *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
   *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getDefaultValues: {
    parameters: {
      query?: {
        /** @description The IDs of the contexts. */
        contextId?: number[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field, for example `customfield\_10000`. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanCustomFieldContextDefaultValue"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Set custom field contexts default values
   * @description Sets default for contexts of a custom field. Default are defined using these objects:
   *
   *  *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
   *  *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
   *  *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
   *  *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
   *  *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
   *  *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
   *  *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
   *  *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
   *  *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
   *  *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
   *  *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
   *  *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
   *  *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
   *  *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
   *  *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
   *  *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
   *  *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
   *  *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
   *
   * Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
   *
   *  *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
   *  *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
   *  *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
   *  *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
   *  *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
   *  *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
   *  *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
   *
   * Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setDefaultValues: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultValues": [
         *     {
         *       "contextId": "10100",
         *       "optionId": "10001",
         *       "type": "option.single"
         *     },
         *     {
         *       "contextId": "10101",
         *       "optionId": "10003",
         *       "type": "option.single"
         *     },
         *     {
         *       "contextId": "10103",
         *       "optionId": "10005",
         *       "type": "option.single"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["CustomFieldContextDefaultValueUpdate"];
      };
    };
    responses: {
      /** @description Returned if operation is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, a context, an option, or a cascading option is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue types for custom field context
   * @description Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeMappingsForContexts: {
    parameters: {
      query?: {
        /** @description The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`. */
        contextId?: number[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if operation is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeToContextMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get custom field contexts for projects and issue types
   * @description Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
   *
   * If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
   *
   * Duplicate project and issue type mappings cannot be provided in the request.
   *
   * The order of the returned values is the same as provided in the request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getCustomFieldContextsForProjectsAndIssueTypes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
      };
    };
    /** @description The list of project and issue type mappings. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "mappings": [
         *     {
         *       "issueTypeId": "10000",
         *       "projectId": "10000"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "projectId": "10000"
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "projectId": "10001"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["ProjectIssueTypeMappings"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanContextForProjectAndIssueType"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, project, or issue type is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get project mappings for custom field context
   * @description Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectContextMapping: {
    parameters: {
      query?: {
        /** @description The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`. */
        contextId?: number[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field, for example `customfield\_10000`. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanCustomFieldContextProjectMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update custom field context
   * @description Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateCustomFieldContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A context used to define the custom field options for bugs.",
         *   "name": "Bug fields context"
         * }
         */
        "application/json": components["schemas"]["CustomFieldContextUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the context is updated. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field or the context is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete custom field context
   * @description Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteCustomFieldContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    responses: {
      /** @description Returned if the context is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field or the context is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Add issue types to context
   * @description Adds issue types to a custom field context, appending the issue types to the issue types list.
   *
   * A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.
   *
   * If any of the issue types exists in the custom field context, the operation fails and no issue types are added.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addIssueTypesToContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeIds": [
         *     "10001",
         *     "10005",
         *     "10006"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeIds"];
      };
    };
    responses: {
      /** @description Returned if operation is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, context, or one or more issue types are not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. */
      409: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Remove issue types from context
   * @description Removes issue types from a custom field context.
   *
   * A custom field context without any issue types applies to all issue types.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeIssueTypesFromContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeIds": [
         *     "10001",
         *     "10005",
         *     "10006"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeIds"];
      };
    };
    responses: {
      /** @description Returned if operation is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, context, or one or more issue types are not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get custom field options (context)
   * @description Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.
   *
   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getOptionsForContext: {
    parameters: {
      query?: {
        /** @description The ID of the option. */
        optionId?: number;
        /** @description Whether only options are returned. */
        onlyOptions?: boolean;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanCustomFieldContextOption"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field is not found or the context doesn't match the custom field. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update custom field options (context)
   * @description Updates the options of a custom field.
   *
   * If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.
   *
   * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateCustomFieldOption: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "options": [
         *     {
         *       "disabled": false,
         *       "id": "10001",
         *       "value": "Scranton"
         *     },
         *     {
         *       "disabled": true,
         *       "id": "10002",
         *       "value": "Manhattan"
         *     },
         *     {
         *       "disabled": false,
         *       "id": "10003",
         *       "value": "The Electric City"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["BulkCustomFieldOptionUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldUpdatedContextOptionsList"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field, context, or one or more options is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Create custom field options (context)
   * @description Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.
   *
   * The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.
   *
   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createCustomFieldOption: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "options": [
         *     {
         *       "disabled": false,
         *       "value": "Scranton"
         *     },
         *     {
         *       "disabled": true,
         *       "optionId": "10000",
         *       "value": "Manhattan"
         *     },
         *     {
         *       "disabled": false,
         *       "value": "The Electric City"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["BulkCustomFieldOptionCreateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["CustomFieldCreatedContextOptionsList"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field is not found or the context doesn't match the custom field. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Reorder custom field options (context)
   * @description Changes the order of custom field options or cascading options in a context.
   *
   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  reorderCustomFieldOptions: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "customFieldOptionIds": [
         *     "10001",
         *     "10002"
         *   ],
         *   "position": "First"
         * }
         */
        "application/json": components["schemas"]["OrderOfCustomFieldOptions"];
      };
    };
    responses: {
      /** @description Returned if options are reordered. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field, the context, or one or more of the options is not found.. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete custom field options (context)
   * @description Deletes a custom field option.
   *
   * Options with cascading options cannot be deleted without deleting the cascading options first.
   *
   * This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteCustomFieldOption: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context from which an option should be deleted. */
        contextId: number;
        /** @description The ID of the option to delete. */
        optionId: number;
      };
    };
    responses: {
      /** @description Returned if the option is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field, the context, or the option is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Replace custom field options
   * @description Replaces the options of a custom field.
   *
   * Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect or Forge apps.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  replaceCustomFieldOption: {
    parameters: {
      query?: {
        /** @description The ID of the option that will replace the currently selected option. */
        replaceWith?: number;
        /** @description A JQL query that specifies the issues to be updated. For example, *project=10000*. */
        jql?: string;
      };
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the option to be deselected. */
        optionId: number;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    responses: {
      /** @description Returned if the long-running task to deselect the option is started. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanRemoveOptionFromIssuesResult"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field is not found or does not support options, or the options to be replaced are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Assign custom field context to projects
   * @description Assigns a custom field context to projects.
   *
   * If any project in the request is assigned to any context of the custom field, the operation fails.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  assignProjectsToCustomFieldContext: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "projectIds": [
         *     "10001",
         *     "10005",
         *     "10006"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ProjectIds"];
      };
    };
    responses: {
      /** @description Returned if operation is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, context, or project is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Remove custom field context from projects
   * @description Removes a custom field context from projects.
   *
   * A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.
   *
   * If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeCustomFieldContextFromProjects: {
    parameters: {
      path: {
        /** @description The ID of the custom field. */
        fieldId: string;
        /** @description The ID of the context. */
        contextId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "projectIds": [
         *     "10001",
         *     "10005",
         *     "10006"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ProjectIds"];
      };
    };
    responses: {
      /** @description Returned if the custom field context is removed from the projects. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the custom field, context, or one or more projects are not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get contexts for a field
   * @deprecated
   * @description Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getContextsForFieldDeprecated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the field to return contexts for. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanContext"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get screens for a field
   * @description Returns a [paginated](#pagination) list of the screens a field is used in.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getScreensForField: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in. */
        expand?: string;
      };
      path: {
        /** @description The ID of the field to return screens for. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanScreenWithTab"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get all issue field options
   * @description Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  getAllIssueFieldOptions: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueFieldOption"];
        };
      };
      /** @description Returned if the field is not found or does not support options. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as a Jira administrator or the app that provided the field. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create issue field option
   * @description Creates an option for a select list issue field.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * Each field can have a maximum of 10000 options, and each option can have a maximum of 10000 scopes.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  createIssueFieldOption: {
    parameters: {
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "config": {
         *     "attributes": [],
         *     "scope": {
         *       "global": {},
         *       "projects": [],
         *       "projects2": [
         *         {
         *           "attributes": [
         *             "notSelectable"
         *           ],
         *           "id": 1001
         *         },
         *         {
         *           "attributes": [
         *             "notSelectable"
         *           ],
         *           "id": 1002
         *         }
         *       ]
         *     }
         *   },
         *   "properties": {
         *     "description": "The team's description",
         *     "founded": "2016-06-06",
         *     "leader": {
         *       "email": "lname@example.com",
         *       "name": "Leader Name"
         *     },
         *     "members": 42
         *   },
         *   "value": "Team 1"
         * }
         */
        "application/json": components["schemas"]["IssueFieldOptionCreateBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueFieldOption"];
        };
      };
      /** @description Returned if the option is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as a Jira administrator or the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the field is not found or does not support options. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get selectable issue field options
   * @description Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getSelectableIssueFieldOptions: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description Filters the results to options that are only available in the specified project. */
        projectId?: number;
      };
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueFieldOption"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the field is not found or does not support options. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get visible issue field options
   * @description Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getVisibleIssueFieldOptions: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description Filters the results to options that are only available in the specified project. */
        projectId?: number;
      };
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueFieldOption"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the field is not found or does not support options. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue field option
   * @description Returns an option from a select list issue field.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  getIssueFieldOption: {
    parameters: {
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
        /** @description The ID of the option to be returned. */
        optionId: number;
      };
    };
    responses: {
      /** @description Returned if the requested option is returned. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueFieldOption"];
        };
      };
      /** @description Returned if the field is not found or does not support options. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as a Jira administrator or the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the option is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update issue field option
   * @description Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  updateIssueFieldOption: {
    parameters: {
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
        /** @description The ID of the option to be updated. */
        optionId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "config": {
         *     "attributes": [],
         *     "scope": {
         *       "global": {},
         *       "projects": [],
         *       "projects2": [
         *         {
         *           "attributes": [
         *             "notSelectable"
         *           ],
         *           "id": 1001
         *         },
         *         {
         *           "attributes": [
         *             "notSelectable"
         *           ],
         *           "id": 1002
         *         }
         *       ]
         *     }
         *   },
         *   "id": 1,
         *   "properties": {
         *     "description": "The team's description",
         *     "founded": "2016-06-06",
         *     "leader": {
         *       "email": "lname@example.com",
         *       "name": "Leader Name"
         *     },
         *     "members": 42
         *   },
         *   "value": "Team 1"
         * }
         */
        "application/json": components["schemas"]["IssueFieldOption"];
      };
    };
    responses: {
      /** @description Returned if the option is updated or created. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueFieldOption"];
        };
      };
      /** @description Returned if the option is invalid, or the *ID* in the request object does not match the *optionId* parameter. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as a Jira administrator or the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue field option
   * @description Deletes an option from a select list issue field.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  deleteIssueFieldOption: {
    parameters: {
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
        /** @description The ID of the option to be deleted. */
        optionId: number;
      };
    };
    responses: {
      /** @description Returned if the field option is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not authenticated as a Jira administrator or the app that provided the field. */
      403: {
        content: never;
      };
      /** @description Returned if the field or option is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the option is selected for the field in any issue. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Replace issue field option
   * @description Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
   *
   * Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
   *
   * This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
   *
   * Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
   */
  replaceIssueFieldOption: {
    parameters: {
      query?: {
        /** @description The ID of the option that will replace the currently selected option. */
        replaceWith?: number;
        /** @description A JQL query that specifies the issues to be updated. For example, *project=10000*. */
        jql?: string;
        /** @description Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission. */
        overrideScreenSecurity?: boolean;
        /** @description Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideEditableFlag?: boolean;
      };
      path: {
        /**
         * @description The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
         *
         *  *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
         *  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
         */
        fieldKey: string;
        /** @description The ID of the option to be deselected. */
        optionId: number;
      };
    };
    responses: {
      /** @description Returned if the long-running task to deselect the option is started. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanRemoveOptionFromIssuesResult"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field is not found or does not support options, or the options to be replaced are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete custom field
   * @description Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteCustomField: {
    parameters: {
      path: {
        /** @description The ID of a custom field. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /**
       * @description Returned if any of these are true:
       *
       *  *  The custom field is locked.
       *  *  The custom field is used in a issue security scheme or a permission scheme.
       *  *  The custom field ID format is incorrect.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a task to delete the custom field is running. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Restore custom field from trash
   * @description Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  restoreCustomField: {
    parameters: {
      path: {
        /** @description The ID of a custom field. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Move custom field to trash
   * @description Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  trashCustomField: {
    parameters: {
      path: {
        /** @description The ID of a custom field. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the custom field is not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all field configurations
   * @description Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:
   *
   *  *  a list of field configuration item IDs.
   *  *  whether the field configuration is a default.
   *  *  whether the field configuration name or description contains a query string.
   *
   * Only field configurations used in company-managed (classic) projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllFieldConfigurations: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
        /** @description If *true* returns default field configurations only. */
        isDefault?: boolean;
        /** @description The query string used to match against field configuration names and descriptions. */
        query?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFieldConfigurationDetails"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create field configuration
   * @description Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.
   *
   * This operation can only create configurations for use in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createFieldConfiguration: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My field configuration description",
         *   "name": "My Field Configuration"
         * }
         */
        "application/json": components["schemas"]["FieldConfigurationDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FieldConfiguration"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update field configuration
   * @description Updates a field configuration. The name and the description provided in the request override the existing values.
   *
   * This operation can only update configurations used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateFieldConfiguration: {
    parameters: {
      path: {
        /** @description The ID of the field configuration. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A brand new description",
         *   "name": "My Modified Field Configuration"
         * }
         */
        "application/json": components["schemas"]["FieldConfigurationDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete field configuration
   * @description Deletes a field configuration.
   *
   * This operation can only delete configurations used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteFieldConfiguration: {
    parameters: {
      path: {
        /** @description The ID of the field configuration. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get field configuration items
   * @description Returns a [paginated](#pagination) list of all fields for a configuration.
   *
   * Only the fields from configurations used in company-managed (classic) projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getFieldConfigurationItems: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID of the field configuration. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFieldConfigurationItem"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update field configuration items
   * @description Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.
   *
   * This operation can only update field configurations used in company-managed (classic) projects.
   *
   * The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateFieldConfigurationItems: {
    parameters: {
      path: {
        /** @description The ID of the field configuration. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fieldConfigurationItems": [
         *     {
         *       "description": "The new description of this item.",
         *       "id": "customfield_10012",
         *       "isHidden": false
         *     },
         *     {
         *       "id": "customfield_10011",
         *       "isRequired": true
         *     },
         *     {
         *       "description": "Another new description.",
         *       "id": "customfield_10010",
         *       "isHidden": false,
         *       "isRequired": false,
         *       "renderer": "wiki-renderer"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["FieldConfigurationItemsDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all field configuration schemes
   * @description Returns a [paginated](#pagination) list of field configuration schemes.
   *
   * Only field configuration schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllFieldConfigurationSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFieldConfigurationScheme"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create field configuration scheme
   * @description Creates a field configuration scheme.
   *
   * This operation can only create field configuration schemes used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createFieldConfigurationScheme: {
    /** @description The details of the field configuration scheme. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "We can use this one for software projects.",
         *   "name": "Field Configuration Scheme for software related projects"
         * }
         */
        "application/json": components["schemas"]["UpdateFieldConfigurationSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["FieldConfigurationScheme"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get field configuration issue type items
   * @description Returns a [paginated](#pagination) list of field configuration issue type items.
   *
   * Only items used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getFieldConfigurationSchemeMappings: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`. */
        fieldConfigurationSchemeId?: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFieldConfigurationIssueTypeItem"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if no field configuration schemes are found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get field configuration schemes for projects
   * @description Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.
   *
   * The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.
   *
   * Only field configuration schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getFieldConfigurationSchemeProjectMapping: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */
        projectId: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFieldConfigurationSchemeProjects"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Assign field configuration scheme to project
   * @description Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
   *
   * Field configuration schemes can only be assigned to classic projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  assignFieldConfigurationSchemeToProject: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "fieldConfigurationSchemeId": "10000",
         *   "projectId": "10000"
         * }
         */
        "application/json": components["schemas"]["FieldConfigurationSchemeProjectAssociation"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the project is not a classic project. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the project is missing. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update field configuration scheme
   * @description Updates a field configuration scheme.
   *
   * This operation can only update field configuration schemes used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateFieldConfigurationScheme: {
    parameters: {
      path: {
        /** @description The ID of the field configuration scheme. */
        id: number;
      };
    };
    /** @description The details of the field configuration scheme. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "We can use this one for software projects.",
         *   "name": "Field Configuration Scheme for software related projects"
         * }
         */
        "application/json": components["schemas"]["UpdateFieldConfigurationSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the field configuration scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete field configuration scheme
   * @description Deletes a field configuration scheme.
   *
   * This operation can only delete field configuration schemes used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteFieldConfigurationScheme: {
    parameters: {
      path: {
        /** @description The ID of the field configuration scheme. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Assign issue types to field configurations
   * @description Assigns issue types to field configurations on field configuration scheme.
   *
   * This operation can only modify field configuration schemes used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setFieldConfigurationSchemeMapping: {
    parameters: {
      path: {
        /** @description The ID of the field configuration scheme. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "mappings": [
         *     {
         *       "fieldConfigurationId": "10000",
         *       "issueTypeId": "default"
         *     },
         *     {
         *       "fieldConfigurationId": "10002",
         *       "issueTypeId": "10001"
         *     },
         *     {
         *       "fieldConfigurationId": "10001",
         *       "issueTypeId": "10002"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["AssociateFieldConfigurationsWithIssueTypesRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field configuration scheme, the field configuration, or the issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Remove issue types from field configuration scheme
   * @description Removes issue types from the field configuration scheme.
   *
   * This operation can only modify field configuration schemes used in company-managed (classic) projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeIssueTypesFromGlobalFieldConfigurationScheme: {
    parameters: {
      path: {
        /** @description The ID of the field configuration scheme. */
        id: number;
      };
    };
    /** @description The issue type IDs to remove. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeIds": [
         *     "10000",
         *     "10001",
         *     "10002"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeIdsToRemove"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the field configuration scheme or the issue types are not found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Create filter
   * @description Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  createFilter: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
        /** @description EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideSharePermissions?: boolean;
      };
    };
    /** @description The filter to create. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Lists all open bugs",
         *   "jql": "type = Bug and resolution is empty",
         *   "name": "All Open Bugs"
         * }
         */
        "application/json": components["schemas"]["Filter"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"];
        };
      };
      /** @description Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get default share scope
   * @description Returns the default sharing settings for new filters and dashboards for a user.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getDefaultShareScope: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultShareScope"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Set default share scope
   * @description Sets the default sharing for new filters and dashboards for a user.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  setDefaultShareScope: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "scope": "GLOBAL"
         * }
         */
        "application/json": components["schemas"]["DefaultShareScope"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultShareScope"];
        };
      };
      /** @description Returned if an invalid scope is set. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get favorite filters
   * @description Returns the visible favorite filters of the user.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
   *
   *  *  owned by the user.
   *  *  shared with a group that the user is a member of.
   *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  shared with a public project.
   *  *  shared with the public.
   *
   * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
   */
  getFavouriteFilters: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get my filters
   * @description Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
   *
   *  *  owned by the user.
   *  *  shared with a group that the user is a member of.
   *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  shared with a public project.
   *  *  shared with the public.
   *
   * For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
   */
  getMyFilters: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
        /** @description Include the user's favorite filters in the response. */
        includeFavourites?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Search for filters
   * @description Returns a [paginated](#pagination) list of filters. Use this operation to get:
   *
   *  *  specific filters, by defining `id` only.
   *  *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  getFiltersPaginated: {
    parameters: {
      query?: {
        /** @description String used to perform a case-insensitive partial match with `name`. */
        filterName?: string;
        /** @description User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`. */
        accountId?: string;
        /** @description This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`. */
        owner?: string;
        /** @description As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter. */
        groupname?: string;
        /** @description Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */
        groupId?: string;
        /** @description Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`. */
        projectId?: number;
        /** @description The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs. */
        id?: number[];
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
         *  *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
         *  *  `is_favourite` Sorts by whether the filter is marked as a favorite.
         *  *  `id` Sorts by filter ID.
         *  *  `name` Sorts by filter name.
         *  *  `owner` Sorts by the ID of the filter owner.
         *  *  `is_shared` Sorts by whether the filter is shared.
         */
        orderBy?: "description" | "-description" | "+description" | "favourite_count" | "-favourite_count" | "+favourite_count" | "id" | "-id" | "+id" | "is_favourite" | "-is_favourite" | "+is_favourite" | "name" | "-name" | "+name" | "owner" | "-owner" | "+owner" | "is_shared" | "-is_shared" | "+is_shared";
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `description` Returns the description of the filter.
         *  *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
         *  *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
         *  *  `jql` Returns the JQL query that the filter uses.
         *  *  `owner` Returns the owner of the filter.
         *  *  `searchUrl` Returns a URL to perform the filter's JQL query.
         *  *  `sharePermissions` Returns the share permissions defined for the filter.
         *  *  `editPermissions` Returns the edit permissions defined for the filter.
         *  *  `isWritable` Returns whether the current user has permission to edit the filter.
         *  *  `approximateLastUsed` \[Experimental\] Returns the approximate date and time when the filter was last evaluated.
         *  *  `subscriptions` Returns the users that are subscribed to the filter.
         *  *  `viewUrl` Returns a URL to view the filter.
         */
        expand?: string;
        /** @description EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideSharePermissions?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanFilterDetails"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `owner` and `accountId` are provided.
       *  *  `expand` includes an invalid value.
       *  *  `orderBy` is invalid.
       *  *  `id` identifies more than 200 filter IDs.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get filter
   * @description Returns a filter.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
   *
   *  *  owned by the user.
   *  *  shared with a group that the user is a member of.
   *  *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  shared with a public project.
   *  *  shared with the public.
   */
  getFilter: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
        /** @description EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideSharePermissions?: boolean;
      };
      path: {
        /** @description The ID of the filter to return. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"];
        };
      };
      /** @description Returned if the filter is not found or the user does not have permission to view it. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Update filter
   * @description Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
   */
  updateFilter: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
        /** @description EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideSharePermissions?: boolean;
      };
      path: {
        /** @description The ID of the filter to update. */
        id: number;
      };
    };
    /** @description The filter to update. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Lists all open bugs",
         *   "jql": "type = Bug and resolution is empty",
         *   "name": "All Open Bugs"
         * }
         */
        "application/json": components["schemas"]["Filter"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"];
        };
      };
      /** @description Returned if the request object is invalid. For example, the `name` is not unique or the project ID is not specified for a project role share permission. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Delete filter
   * @description Delete a filter.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteFilter: {
    parameters: {
      path: {
        /** @description The ID of the filter to delete. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the filter is not found. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have permission to delete the filter. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get columns
   * @description Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None, however, column details are only returned for:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  getColumns: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ColumnItem"][];
        };
      };
      /** @description Returned if the user does not have permission to view the filter. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if a column configuration is not set for the filter. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set columns
   * @description Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
   *
   * The parameters for this resource are expressed as HTML form data. For example, in curl:
   *
   * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  setColumns: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    /** @description The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`. */
    requestBody: {
      content: {
        "*/*": components["schemas"]["ColumnRequestBody"];
        "application/json": components["schemas"]["ColumnRequestBody"];
        "multipart/form-data": components["schemas"]["ColumnRequestBody"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  a non-navigable field is set as a column.
       *  *  the user does not have permission to view the filter.
       */
      400: {
        content: never;
      };
      /** @description Returned if the requesting user is not an owner of the filter. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Reset columns
   * @description Reset the user's column configuration for the filter to the default.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  resetColumns: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not have permission to view the filter.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Add filter as favorite
   * @description Add a filter as a favorite for the user.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  setFavouriteForFilter: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not have permission to favorite the filter.
       */
      400: {
        content: never;
      };
    };
  };
  /**
   * Remove filter as favorite
   * @description Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  deleteFavouriteForFilter: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
         *  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Filter"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not have permission to view the filter.
       */
      400: {
        content: never;
      };
    };
  };
  /**
   * Change filter owner
   * @description Changes the owner of the filter.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  changeFilterOwner: {
    parameters: {
      path: {
        /** @description The ID of the filter to update. */
        id: number;
      };
    };
    /** @description The account ID of the new owner of the filter. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "accountId": "0000-0000-0000-0000"
         * }
         */
        "application/json": components["schemas"]["ChangeFilterOwner"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned when:
       *
       *  *  The new owner of the filter owns a filter with the same name.
       *  *  An attempt is made to change owner of the default filter.
       */
      400: {
        content: never;
      };
      /** @description Returned if the requesting user is not an owner of the filter or does not have *Administer Jira* global permission. */
      403: {
        content: never;
      };
      /** @description Returned if the filter or the new owner of the filter is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get share permissions
   * @description Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None, however, share permissions are only returned for:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  getSharePermissions: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SharePermission"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not have permission to view the filter.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add share permission
   * @description Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
   *
   * Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
   *
   * **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
   */
  addSharePermission: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "groupname": "jira-administrators",
         *   "rights": 1,
         *   "type": "group"
         * }
         */
        "application/json": components["schemas"]["SharePermissionInputBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["SharePermission"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.
       *  *  the user does not own the filter.
       *  *  the user does not have the required permissions.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not have permission to view the filter.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get share permission
   * @description Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None, however, a share permission is only returned for:
   *
   *  *  filters owned by the user.
   *  *  filters shared with a group that the user is a member of.
   *  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
   *  *  filters shared with a public project.
   *  *  filters shared with the public.
   */
  getSharePermission: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
        /** @description The ID of the share permission. */
        permissionId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SharePermission"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the permission is not found.
       *  *  the user does not have permission to view the filter.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete share permission
   * @description Deletes a share permission from a filter.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
   */
  deleteSharePermission: {
    parameters: {
      path: {
        /** @description The ID of the filter. */
        id: number;
        /** @description The ID of the share permission. */
        permissionId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the filter is not found.
       *  *  the user does not own the filter.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get group
   * @deprecated
   * @description This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
   *
   * Returns all users in a group.
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getGroup: {
    parameters: {
      query?: {
        /**
         * @description As a group's name can change, use of `groupId` is recommended to identify a group.
         * The name of the group. This parameter cannot be used with the `groupId` parameter.
         */
        groupname?: string;
        /** @description The ID of the group. This parameter cannot be used with the `groupName` parameter. */
        groupId?: string;
        /** @description List of fields to expand. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
      /** @description Returned if the group name is not specified. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the calling user does not have the Administer Jira global permission. */
      403: {
        content: never;
      };
      /** @description Returned if the group is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create group
   * @description Creates a group.
   *
   * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
   */
  createGroup: {
    /** @description The name of the group. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "power-users"
         * }
         */
        "application/json": components["schemas"]["AddGroupBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
      /** @description Returned if group name is not specified or the group name is in use. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Remove group
   * @description Deletes a group.
   *
   * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
   */
  removeGroup: {
    parameters: {
      query?: {
        groupname?: string;
        /** @description The ID of the group. This parameter cannot be used with the `groupname` parameter. */
        groupId?: string;
        /**
         * @description As a group's name can change, use of `swapGroupId` is recommended to identify a group.
         * The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.
         */
        swapGroup?: string;
        /** @description The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter. */
        swapGroupId?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /** @description Returned if the group name is not specified. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing from the request. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the group is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Bulk get groups
   * @description Returns a [paginated](#pagination) list of groups.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  bulkGetGroups: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`. */
        groupId?: string[];
        /** @description The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`. */
        groupName?: string[];
        /** @description The access level of a group. Valid values: 'site-admin', 'admin', 'user'. */
        accessType?: string;
        /** @description The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'. */
        applicationKey?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanGroupDetails"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the group with the given access level can't be retrieved. */
      500: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get users from group
   * @description Returns a [paginated](#pagination) list of all users in a group.
   *
   * Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getUsersFromGroup: {
    parameters: {
      query?: {
        /**
         * @description As a group's name can change, use of `groupId` is recommended to identify a group.
         * The name of the group. This parameter cannot be used with the `groupId` parameter.
         */
        groupname?: string;
        /** @description The ID of the group. This parameter cannot be used with the `groupName` parameter. */
        groupId?: string;
        /** @description Include inactive users. */
        includeInactiveUsers?: boolean;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanUserDetails"];
        };
      };
      /** @description Returned if the group name is not specified. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the calling user does not have the Administer Jira global permission. */
      403: {
        content: never;
      };
      /** @description Returned if the group is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add user to group
   * @description Adds a user to a group.
   *
   * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
   */
  addUserToGroup: {
    parameters: {
      query?: {
        /**
         * @description As a group's name can change, use of `groupId` is recommended to identify a group.
         * The name of the group. This parameter cannot be used with the `groupId` parameter.
         */
        groupname?: string;
        /** @description The ID of the group. This parameter cannot be used with the `groupName` parameter. */
        groupId?: string;
      };
    };
    /** @description The user to add to the group. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "accountId": "5b10ac8d82e05b22cc7d4ef5"
         * }
         */
        "application/json": components["schemas"]["UpdateUserToGroupBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Group"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `groupname` is not provided.
       *  *  `accountId` is missing.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing from the request. */
      401: {
        content: never;
      };
      /** @description Returned if the calling user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the group or user are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Remove user from group
   * @description Removes a user from a group.
   *
   * **[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
   */
  removeUserFromGroup: {
    parameters: {
      query: {
        /**
         * @description As a group's name can change, use of `groupId` is recommended to identify a group.
         * The name of the group. This parameter cannot be used with the `groupId` parameter.
         */
        groupname?: string;
        /** @description The ID of the group. This parameter cannot be used with the `groupName` parameter. */
        groupId?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  `groupName` is missing.
       *  *  `accountId` is missing.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing from the request. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the group or user are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Find groups
   * @description Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
   *
   * The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
   *
   * The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
   *
   * *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
   */
  findGroups: {
    parameters: {
      query?: {
        /** @description This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get). */
        accountId?: string;
        /** @description The string to find in group names. */
        query?: string;
        /**
         * @description As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.
         * A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.
         */
        exclude?: string[];
        /** @description A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter. */
        excludeId?: string[];
        /** @description The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`. */
        maxResults?: number;
        /** @description Whether the search for groups should be case insensitive. */
        caseInsensitive?: boolean;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        userName?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FoundGroups"];
        };
      };
    };
  };
  /**
   * Find users and groups
   * @description Returns a list of users and groups matching a string. The string is used:
   *
   *  *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
   *  *  for groups, to find a case-sensitive match with group name.
   *
   * For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
   *
   * Optionally, the search can be refined to:
   *
   *  *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
   *
   *      *  projects.
   *      *  issue types.
   *
   *     If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
   *  *  not return Connect app users and groups.
   *  *  return groups that have a case-insensitive match with the query.
   *
   * The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
   */
  findUsersAndGroups: {
    parameters: {
      query: {
        /** @description The search string. */
        query: string;
        /** @description The maximum number of items to return in each list. */
        maxResults?: number;
        /** @description Whether the user avatar should be returned. If an invalid value is provided, the default value is used. */
        showAvatar?: boolean;
        /** @description The custom field ID of the field this request is for. */
        fieldId?: string;
        /** @description The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present. */
        projectId?: string[];
        /** @description The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present. */
        issueTypeId?: string[];
        /** @description The size of the avatar to return. If an invalid value is provided, the default value is used. */
        avatarSize?: "xsmall" | "xsmall@2x" | "xsmall@3x" | "small" | "small@2x" | "small@3x" | "medium" | "medium@2x" | "medium@3x" | "large" | "large@2x" | "large@3x" | "xlarge" | "xlarge@2x" | "xlarge@3x" | "xxlarge" | "xxlarge@2x" | "xxlarge@3x" | "xxxlarge" | "xxxlarge@2x" | "xxxlarge@3x";
        /** @description Whether the search for groups should be case insensitive. */
        caseInsensitive?: boolean;
        /** @description Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used. */
        excludeConnectAddons?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FoundUsersAndGroups"];
        };
      };
      /** @description Returned if the query parameter is not provided. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Get license
   * @description Returns licensing information about the Jira instance.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getLicense: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["License"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create issue
   * @description Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
   *
   * The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
   *
   * Creating a subtask differs from creating an issue as follows:
   *
   *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
   *  *  `parent` must contain the ID or key of the parent issue.
   *
   * In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
   *
   * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
   */
  createIssue: {
    parameters: {
      query?: {
        /** @description Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen. */
        updateHistory?: boolean;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fields": {
         *     "assignee": {
         *       "id": "5b109f2e9729b51b54dc274d"
         *     },
         *     "components": [
         *       {
         *         "id": "10000"
         *       }
         *     ],
         *     "customfield_10000": "09/Jun/19",
         *     "customfield_20000": "06/Jul/19 3:25 PM",
         *     "customfield_30000": [
         *       "10000",
         *       "10002"
         *     ],
         *     "customfield_40000": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "Occurs on all orders",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "customfield_50000": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "Could impact day-to-day work.",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "customfield_60000": "jira-software-users",
         *     "customfield_70000": [
         *       "jira-administrators",
         *       "jira-software-users"
         *     ],
         *     "customfield_80000": {
         *       "value": "red"
         *     },
         *     "description": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "Order entry fails when selecting supplier.",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "duedate": "2019-05-11",
         *     "environment": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "UAT",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "fixVersions": [
         *       {
         *         "id": "10001"
         *       }
         *     ],
         *     "issuetype": {
         *       "id": "10000"
         *     },
         *     "labels": [
         *       "bugfix",
         *       "blitz_test"
         *     ],
         *     "parent": {
         *       "key": "PROJ-123"
         *     },
         *     "priority": {
         *       "id": "20000"
         *     },
         *     "project": {
         *       "id": "10000"
         *     },
         *     "reporter": {
         *       "id": "5b10a2844c20165700ede21g"
         *     },
         *     "security": {
         *       "id": "10000"
         *     },
         *     "summary": "Main order flow broken",
         *     "timetracking": {
         *       "originalEstimate": "10",
         *       "remainingEstimate": "5"
         *     },
         *     "versions": [
         *       {
         *         "id": "10000"
         *       }
         *     ]
         *   },
         *   "update": {}
         * }
         */
        "application/json": components["schemas"]["IssueUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["CreatedIssue"];
        };
      };
      /**
       * @description Returned if the request:
       *
       *  *  is missing required fields.
       *  *  contains invalid field values.
       *  *  contains fields that cannot be set for the issue type.
       *  *  is by a user who does not have the necessary permission.
       *  *  is to create a subtype in a project different that of the parent issue.
       *  *  is for a subtask when the option to create subtasks is disabled.
       *  *  is invalid for any other reason.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.* */
      422: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Archive issue(s) by issue ID/key
   * @description Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.
   *
   * **Note that:**
   *
   *  *  you can't archive subtasks directly, only through their parent issues
   *  *  you can only archive issues from software, service management, and business projects
   *
   * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
   *
   * **License required:** Premium or Enterprise
   *
   * **Signed-in users only:** This API can't be accessed anonymously.
   */
  archiveIssues: {
    /** @description Contains a list of issue keys or IDs to be archived. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueIdsOrKeys": [
         *     "PR-1",
         *     "1001",
         *     "PROJECT-2"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueArchivalSyncRequest"];
      };
    };
    responses: {
      /** @description Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueArchivalSyncResponse"];
        };
      };
      /**
       * @description Returned if none of the issues in the request can be archived. Possible reasons:
       *
       *  *  the issues weren't found
       *  *  the issues are subtasks
       *  *  the issues belong to unlicensed projects
       *  *  the issues belong to archived projects
       */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were archived because the provided authentication credentials are either missing or invalid. */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if one or more issues were successfully archived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000. */
      412: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Archive issue(s) by JQL
   * @description Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.
   *
   * You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.
   *
   * **Note that:**
   *
   *  *  you can't archive subtasks directly, only through their parent issues
   *  *  you can only archive issues from software, service management, and business projects
   *
   * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
   *
   * **License required:** Premium or Enterprise
   *
   * **Signed-in users only:** This API can't be accessed anonymously.
   *
   * **Rate limiting:** Only a single request per jira instance can be active at any given time.
   */
  archiveIssuesAsync: {
    /** @description A JQL query specifying the issues to archive. Note that subtasks can only be archived through their parent issues. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "jql": "project = FOO AND updated < -2y"
         * }
         */
        "application/json": components["schemas"]["ArchiveIssueAsyncRequest"];
      };
    };
    responses: {
      /** @description Returns the URL to check the status of the submitted request. */
      202: {
        content: {
          "application/json": string;
        };
      };
      /** @description Returned if no issues were archived due to a bad request, for example an invalid JQL query. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were archived because the provided authentication credentials are either missing or invalid. */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were archived because the user lacks the required Jira admin or site admin permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if a request to archive issue(s) is already running. */
      412: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Bulk create issue
   * @description Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
   *
   * The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
   *
   * Creating a subtask differs from creating an issue as follows:
   *
   *  *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
   *  *  `parent` the must contain the ID or key of the parent issue.
   *
   * **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
   */
  createIssues: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueUpdates": [
         *     {
         *       "fields": {
         *         "assignee": {
         *           "id": "5b109f2e9729b51b54dc274d"
         *         },
         *         "components": [
         *           {
         *             "id": "10000"
         *           }
         *         ],
         *         "customfield_10000": "09/Jun/19",
         *         "customfield_20000": "06/Jul/19 3:25 PM",
         *         "customfield_30000": [
         *           "10000",
         *           "10002"
         *         ],
         *         "customfield_40000": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Occurs on all orders",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "customfield_50000": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Could impact day-to-day work.",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "customfield_60000": "jira-software-users",
         *         "customfield_70000": [
         *           "jira-administrators",
         *           "jira-software-users"
         *         ],
         *         "customfield_80000": {
         *           "value": "red"
         *         },
         *         "description": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Order entry fails when selecting supplier.",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "duedate": "2011-03-11",
         *         "environment": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "UAT",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "fixVersions": [
         *           {
         *             "id": "10001"
         *           }
         *         ],
         *         "issuetype": {
         *           "id": "10000"
         *         },
         *         "labels": [
         *           "bugfix",
         *           "blitz_test"
         *         ],
         *         "priority": {
         *           "id": "20000"
         *         },
         *         "project": {
         *           "id": "10000"
         *         },
         *         "reporter": {
         *           "id": "5b10a2844c20165700ede21g"
         *         },
         *         "security": {
         *           "id": "10000"
         *         },
         *         "summary": "Main order flow broken",
         *         "timetracking": {
         *           "originalEstimate": "10",
         *           "remainingEstimate": "5"
         *         },
         *         "versions": [
         *           {
         *             "id": "10000"
         *           }
         *         ]
         *       },
         *       "update": {
         *         "worklog": [
         *           {
         *             "add": {
         *               "started": "2019-07-05T11:05:00.000+0000",
         *               "timeSpent": "60m"
         *             }
         *           }
         *         ]
         *       }
         *     },
         *     {
         *       "fields": {
         *         "assignee": {
         *           "id": "5b109f2e9729b51b54dc274d"
         *         },
         *         "components": [
         *           {
         *             "id": "10000"
         *           }
         *         ],
         *         "customfield_10000": "09/Jun/19",
         *         "customfield_20000": "06/Jul/19 3:25 PM",
         *         "customfield_30000": [
         *           "10000",
         *           "10002"
         *         ],
         *         "customfield_40000": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Occurs on all orders",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "customfield_50000": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Could impact day-to-day work.",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "customfield_60000": "jira-software-users",
         *         "customfield_70000": [
         *           "jira-administrators",
         *           "jira-software-users"
         *         ],
         *         "customfield_80000": {
         *           "value": "red"
         *         },
         *         "description": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "Order remains pending after approved.",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "duedate": "2019-04-16",
         *         "environment": {
         *           "content": [
         *             {
         *               "content": [
         *                 {
         *                   "text": "UAT",
         *                   "type": "text"
         *                 }
         *               ],
         *               "type": "paragraph"
         *             }
         *           ],
         *           "type": "doc",
         *           "version": 1
         *         },
         *         "fixVersions": [
         *           {
         *             "id": "10001"
         *           }
         *         ],
         *         "issuetype": {
         *           "id": "10000"
         *         },
         *         "labels": [
         *           "new_release"
         *         ],
         *         "priority": {
         *           "id": "20000"
         *         },
         *         "project": {
         *           "id": "1000"
         *         },
         *         "reporter": {
         *           "id": "5b10a2844c20165700ede21g"
         *         },
         *         "security": {
         *           "id": "10000"
         *         },
         *         "summary": "Order stuck in pending",
         *         "timetracking": {
         *           "originalEstimate": "15",
         *           "remainingEstimate": "5"
         *         },
         *         "versions": [
         *           {
         *             "id": "10000"
         *           }
         *         ]
         *       },
         *       "update": {}
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssuesUpdateBean"];
      };
    };
    responses: {
      /**
       * @description Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:
       *
       *  *  is missing required fields.
       *  *  contains invalid field values.
       *  *  contains fields that cannot be set for the issue type.
       *  *  is by a user who does not have the necessary permission.
       *  *  is to create a subtype in a project different that of the parent issue.
       *  *  is for a subtask when the option to create subtasks is disabled.
       *  *  is invalid for any other reason.
       */
      201: {
        content: {
          "application/json": components["schemas"]["CreatedIssues"];
        };
      };
      /**
       * @description Returned if all requests are invalid. Requests may be unsuccessful when they:
       *
       *  *  are missing required fields.
       *  *  contain invalid field values.
       *  *  contain fields that cannot be set for the issue type.
       *  *  are by a user who does not have the necessary permission.
       *  *  are to create a subtype in a project different that of the parent issue.
       *  *  is for a subtask when the option to create subtasks is disabled.
       *  *  are invalid for any other reason.
       */
      400: {
        content: {
          "application/json": components["schemas"]["CreatedIssues"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get create issue metadata
   * @deprecated
   * @description Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
   *
   * Deprecated, see [Create Issue Meta Endpoint Deprecation Notice](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1304).
   *
   * The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
   */
  getCreateIssueMeta: {
    parameters: {
      query?: {
        /** @description List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`. */
        projectIds?: string[];
        /** @description List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`. */
        projectKeys?: string[];
        /** @description List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`. */
        issuetypeIds?: string[];
        /** @description List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`. */
        issuetypeNames?: string[];
        /** @description Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueCreateMetadata"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get create metadata issue types for a project
   * @description Returns a page of issue type metadata for a specified project. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
   */
  getCreateIssueMetaIssueTypes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID or key of the project. */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfCreateMetaIssueTypes"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get create field metadata for a project and issue type id
   * @description Returns a page of field metadata for a specified project and issuetype id. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
   */
  getCreateIssueMetaIssueTypeId: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID or key of the project. */
        projectIdOrKey: string;
        /** @description The issuetype ID. */
        issueTypeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfCreateMetaIssueTypeWithField"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get issue limit report
   * @description Returns all issues breaching and approaching per-issue limits.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) is required for the project the issues are in. Results may be incomplete otherwise
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueLimitReport: {
    parameters: {
      query?: {
        /**
         * @description Return issue keys instead of issue ids in the response.
         *
         * Usage: Add `?isReturningKeys=true` to the end of the path to request issue keys.
         */
        isReturningKeys?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IssueLimitReportRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueLimitReportResponseBean"];
        };
      };
      /**
       * @description Returned if the request is invalid. Other possible reasons:
       *
       *  *  the field queried is not supported
       *  *  the threshold is not within the supported range
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to complete this request. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get issue picker suggestions
   * @description Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
   *
   * This operation returns two lists:
   *
   *  *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
   *  *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getIssuePickerResource: {
    parameters: {
      query?: {
        /** @description A string to match against text fields in the issue such as title, description, or comments. */
        query?: string;
        /** @description A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead. */
        currentJQL?: string;
        /** @description The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query. */
        currentIssueKey?: string;
        /** @description The ID of a project that suggested issues must belong to. */
        currentProjectId?: string;
        /** @description Indicate whether to include subtasks in the suggestions list. */
        showSubTasks?: boolean;
        /** @description When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query. */
        showSubTaskParent?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssuePickerSuggestions"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Bulk set issues properties by list
   * @description Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
   *
   * This operation is:
   *
   *  *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
   *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  bulkSetIssuesPropertiesList: {
    /** @description Issue properties to be set or updated with values. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["IssueEntityProperties"];
      };
    };
    responses: {
      /** @description Returned if the operation is successful. */
      303: {
        content: never;
      };
      /** @description Return if the request is invalid or the user does not have the necessary permission. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Bulk set issue properties by issue
   * @description Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.
   *
   * This operation is:
   *
   *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *  *  non-transactional. Updating some entities may fail. Such information will available in the task result.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  bulkSetIssuePropertiesByIssue: {
    /** @description Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issues": [
         *     {
         *       "issueID": 1000,
         *       "properties": {
         *         "myProperty": {
         *           "owner": "admin",
         *           "weight": 100
         *         }
         *       }
         *     },
         *     {
         *       "issueID": 1001,
         *       "properties": {
         *         "myOtherProperty": {
         *           "cost": 150,
         *           "transportation": "car"
         *         }
         *       }
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["MultiIssueEntityProperties"];
      };
    };
    responses: {
      /** @description Returned if the operation is successful. */
      303: {
        content: never;
      };
      /** @description Return if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Return if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Bulk set issue property
   * @description Sets a property value on multiple issues.
   *
   * The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.
   *
   * The issues to be updated can be specified by a filter.
   *
   * The filter identifies issues eligible for update using these criteria:
   *
   *  *  `entityIds` Only issues from this list are eligible.
   *  *  `currentValue` Only issues with the property set to this value are eligible.
   *  *  `hasProperty`:
   *
   *      *  If *true*, only issues with the property are eligible.
   *      *  If *false*, only issues without the property are eligible.
   *
   * If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
   *
   * If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
   *
   * The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
   *
   * This operation is:
   *
   *  *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
   *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
   */
  bulkSetIssueProperty: {
    parameters: {
      path: {
        /** @description The key of the property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "filter": {
         *     "currentValue": {
         *       "owner": "admin",
         *       "weight": 50
         *     },
         *     "entityIds": [
         *       10100,
         *       100010
         *     ],
         *     "hasProperty": true
         *   },
         *   "value": {
         *     "owner": "admin",
         *     "weight": 100
         *   }
         * }
         */
        "application/json": components["schemas"]["BulkIssuePropertyUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Bulk delete issue property
   * @description Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
   *
   * The criteria the filter used to identify eligible issues are:
   *
   *  *  `entityIds` Only issues from this list are eligible.
   *  *  `currentValue` Only issues with the property set to this value are eligible.
   *
   * If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
   *
   * If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
   *
   * This operation is:
   *
   *  *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
   *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
   */
  bulkDeleteIssueProperty: {
    parameters: {
      path: {
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "currentValue": "deprecated value",
         *   "entityIds": [
         *     10100,
         *     100010
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueFilterForBulkPropertyDelete"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Unarchive issue(s) by issue keys/ID
   * @description Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.
   *
   * **Note that:**
   *
   *  *  you can't unarchive subtasks directly, only through their parent issues
   *  *  you can only unarchive issues from software, service management, and business projects
   *
   * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
   *
   * **License required:** Premium or Enterprise
   *
   * **Signed-in users only:** This API can't be accessed anonymously.
   */
  unarchiveIssues: {
    /** @description Contains a list of issue keys or IDs to be unarchived. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueIdsOrKeys": [
         *     "PR-1",
         *     "1001",
         *     "PROJECT-2"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueArchivalSyncRequest"];
      };
    };
    responses: {
      /** @description Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueArchivalSyncResponse"];
        };
      };
      /**
       * @description Returned if none of the issues in the request are eligible to be unarchived. Possible reasons:
       *
       *  *  the issues weren't found
       *  *  the issues are subtasks
       *  *  the issues belong to archived projects
       */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid. */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if one or more issues were successfully unarchived, but the operation was incomplete because the number of issue IDs or keys provided exceeds 1000. */
      412: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get is watching issue bulk
   * @description Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.
   *
   * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getIsWatchingIssueBulk: {
    /** @description A list of issue IDs. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueIds": [
         *     "10001",
         *     "10002",
         *     "10005"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueList"];
      };
    };
    responses: {
      /** @description Returned if the request is successful */
      200: {
        content: {
          "application/json": components["schemas"]["BulkIssueIsWatching"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get issue
   * @description Returns the details for an issue.
   *
   * The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getIssue: {
    parameters: {
      query?: {
        /**
         * @description A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:
         *
         *  *  `*all` Returns all fields.
         *  *  `*navigable` Returns navigable fields.
         *  *  Any issue field, prefixed with a minus to exclude.
         *
         * Examples:
         *
         *  *  `summary,comment` Returns only the summary and comments fields.
         *  *  `-description` Returns all (default) fields except description.
         *  *  `*navigable,-comment` Returns all navigable fields except comment.
         *
         * This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.
         *
         * Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.
         */
        fields?: string[];
        /** @description Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID. */
        fieldsByKeys?: boolean;
        /**
         * @description Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `renderedFields` Returns field values rendered in HTML format.
         *  *  `names` Returns the display name of each field.
         *  *  `schema` Returns the schema describing a field type.
         *  *  `transitions` Returns all possible transitions for the issue.
         *  *  `editmeta` Returns information about how each field can be edited.
         *  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
         *  *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
         */
        expand?: string;
        /**
         * @description A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:
         *
         *  *  `*all` Returns all issue properties.
         *  *  Any issue property key, prefixed with a minus to exclude.
         *
         * Examples:
         *
         *  *  `*all` Returns all properties.
         *  *  `*all,-prop1` Returns all properties except `prop1`.
         *  *  `prop1,prop2` Returns `prop1` and `prop2` properties.
         *
         * This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
         */
        properties?: string[];
        /** @description Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field. */
        updateHistory?: boolean;
        /** @description Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s). */
        failFast?: boolean;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueBean"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Edit issue
   * @description Edits an issue. Issue properties may be updated as part of the edit. Please note that issue transition will be ignored as it is not supported yet.
   *
   * The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
   *
   * The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
   *
   * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  editIssue: {
    parameters: {
      query?: {
        /** @description Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored. */
        notifyUsers?: boolean;
        /** @description Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideScreenSecurity?: boolean;
        /** @description Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideEditableFlag?: boolean;
        /** @description Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get). */
        returnIssue?: boolean;
        /** @description The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fields": {
         *     "customfield_10000": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "Investigation underway",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "customfield_10010": 1,
         *     "summary": "Completed orders still displaying in pending"
         *   },
         *   "historyMetadata": {
         *     "activityDescription": "Complete order processing",
         *     "actor": {
         *       "avatarUrl": "http://mysystem/avatar/tony.jpg",
         *       "displayName": "Tony",
         *       "id": "tony",
         *       "type": "mysystem-user",
         *       "url": "http://mysystem/users/tony"
         *     },
         *     "cause": {
         *       "id": "myevent",
         *       "type": "mysystem-event"
         *     },
         *     "description": "From the order testing process",
         *     "extraData": {
         *       "Iteration": "10a",
         *       "Step": "4"
         *     },
         *     "generator": {
         *       "id": "mysystem-1",
         *       "type": "mysystem-application"
         *     },
         *     "type": "myplugin:type"
         *   },
         *   "properties": [
         *     {
         *       "key": "key1",
         *       "value": "Order number 10784"
         *     },
         *     {
         *       "key": "key2",
         *       "value": "Order number 10923"
         *     }
         *   ],
         *   "update": {
         *     "components": [
         *       {
         *         "set": ""
         *       }
         *     ],
         *     "labels": [
         *       {
         *         "add": "triaged"
         *       },
         *       {
         *         "remove": "blocker"
         *       }
         *     ],
         *     "summary": [
         *       {
         *         "set": "Bug in business logic"
         *       }
         *     ],
         *     "timetracking": [
         *       {
         *         "edit": {
         *           "originalEstimate": "1w 1d",
         *           "remainingEstimate": "4d"
         *         }
         *       }
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["IssueUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful and the `returnIssue` parameter is `true` */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the request body is missing.
       *  *  the user does not have the necessary permission to edit one or more fields.
       *  *  the request includes one or more fields that are not found or are not associated with the issue's edit screen.
       *  *  the request includes an invalid transition.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user uses `overrideScreenSecurity` or `overrideEditableFlag` but doesn't have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
      /** @description Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.* */
      409: {
        content: never;
      };
      /** @description Returned if a configuration problem prevents the issue being updated. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.* */
      422: {
        content: never;
      };
    };
  };
  /**
   * Delete issue
   * @description Deletes an issue.
   *
   * An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  deleteIssue: {
    parameters: {
      query?: {
        /** @description Whether the issue's subtasks are deleted when the issue is deleted. */
        deleteSubtasks?: "true" | "false";
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the issue has subtasks and `deleteSubtasks` is not set to *true*. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to delete the issue. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Assign issue
   * @description Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
   *
   * If `name` or `accountId` is set to:
   *
   *  *  `"-1"`, the issue is assigned to the default assignee for the project.
   *  *  `null`, the issue is set to unassigned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  assignIssue: {
    parameters: {
      path: {
        /** @description The ID or key of the issue to be assigned. */
        issueIdOrKey: string;
      };
    };
    /** @description The request object with the user that the issue is assigned to. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "accountId": "5b10ac8d82e05b22cc7d4ef5"
         * }
         */
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the user is not found.
       *  *  `name`, `key`, or `accountId` is missing.
       *  *  more than one of `name`, `key`, and `accountId` are provided.
       */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add attachment
   * @description Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
   *
   * Note that:
   *
   *  *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
   *  *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
   *
   * The following examples upload a file called *myfile.txt* to the issue *TEST-123*:
   *
   * #### curl ####
   *
   *     curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
   *      -u 'email@example.com:<api_token>'
   *      -H 'X-Atlassian-Token: no-check'
   *      --form 'file=@"myfile.txt"'
   *
   * #### Node.js ####
   *
   *     // This code sample uses the 'node-fetch' and 'form-data' libraries:
   *      // https://www.npmjs.com/package/node-fetch
   *      // https://www.npmjs.com/package/form-data
   *      const fetch = require('node-fetch');
   *      const FormData = require('form-data');
   *      const fs = require('fs');
   *
   *      const filePath = 'myfile.txt';
   *      const form = new FormData();
   *      const stats = fs.statSync(filePath);
   *      const fileSizeInBytes = stats.size;
   *      const fileStream = fs.createReadStream(filePath);
   *
   *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
   *
   *      fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
   *          method: 'POST',
   *          body: form,
   *          headers: {
   *              'Authorization': `Basic ${Buffer.from(
   *                  'email@example.com:'
   *              ).toString('base64')}`,
   *              'Accept': 'application/json',
   *              'X-Atlassian-Token': 'no-check'
   *          }
   *      })
   *          .then(response => {
   *              console.log(
   *                  `Response: ${response.status} ${response.statusText}`
   *              );
   *              return response.text();
   *          })
   *          .then(text => console.log(text))
   *          .catch(err => console.error(err));
   *
   * #### Java ####
   *
   *     // This code sample uses the  'Unirest' library:
   *      // http://unirest.io/java.html
   *      HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
   *              .basicAuth("email@example.com", "")
   *              .header("Accept", "application/json")
   *              .header("X-Atlassian-Token", "no-check")
   *              .field("file", new File("myfile.txt"))
   *              .asJson();
   *
   *              System.out.println(response.getBody());
   *
   * #### Python ####
   *
   *     # This code sample uses the 'requests' library:
   *      # http://docs.python-requests.org
   *      import requests
   *      from requests.auth import HTTPBasicAuth
   *      import json
   *
   *      url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
   *
   *      auth = HTTPBasicAuth("email@example.com", "")
   *
   *      headers = {
   *         "Accept": "application/json",
   *         "X-Atlassian-Token": "no-check"
   *      }
   *
   *      response = requests.request(
   *         "POST",
   *         url,
   *         headers = headers,
   *         auth = auth,
   *         files = {
   *              "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
   *         }
   *      )
   *
   *      print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))
   *
   * #### PHP ####
   *
   *     // This code sample uses the 'Unirest' library:
   *      // http://unirest.io/php.html
   *      Unirest\Request::auth('email@example.com', '');
   *
   *      $headers = array(
   *        'Accept' => 'application/json',
   *        'X-Atlassian-Token' => 'no-check'
   *      );
   *
   *      $parameters = array(
   *        'file' => File::add('myfile.txt')
   *      );
   *
   *      $response = Unirest\Request::post(
   *        'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
   *        $headers,
   *        $parameters
   *      );
   *
   *      var_dump($response)
   *
   * #### Forge ####
   *
   *     // This sample uses Atlassian Forge and the `form-data` library.
   *      // https://developer.atlassian.com/platform/forge/
   *      // https://www.npmjs.com/package/form-data
   *      import api from "@forge/api";
   *      import FormData from "form-data";
   *
   *      const form = new FormData();
   *      form.append('file', fileStream, {knownLength: fileSizeInBytes});
   *
   *      const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
   *          method: 'POST',
   *          body: form,
   *          headers: {
   *              'Accept': 'application/json',
   *              'X-Atlassian-Token': 'no-check'
   *          }
   *      });
   *
   *      console.log(`Response: ${response.status} ${response.statusText}`);
   *      console.log(await response.json());
   *
   * Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  addAttachment: {
    parameters: {
      path: {
        /** @description The ID or key of the issue that attachments are added to. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["MultipartFile"][];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Attachment"][];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  the issue is not found.
       *  *  the user does not have permission to view the issue.
       */
      404: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  the attachments exceed the maximum attachment size for issues.
       *  *  more than 60 files are requested to be uploaded.
       *  *  the per-issue limit for attachments has been breached.
       *
       * See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.
       */
      413: {
        content: never;
      };
    };
  };
  /**
   * Get changelogs
   * @description Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getChangeLogs: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanChangelog"];
        };
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get changelogs by IDs
   * @description Returns changelogs for an issue specified by a list of changelog IDs.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getChangeLogsByIds: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "changelogIds": [
         *     10001,
         *     10002
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueChangelogIds"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfChangelogs"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get comments
   * @description Returns all comments for an issue.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Comments are included in the response where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
   */
  getComments: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date. */
        orderBy?: "created" | "-created" | "+created";
        /** @description Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfComments"];
        };
      };
      /** @description Returned if `orderBy` is set to a value other than *created*. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add comment
   * @description Adds a comment to an issue.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  addComment: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "body": {
         *     "content": [
         *       {
         *         "content": [
         *           {
         *             "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.",
         *             "type": "text"
         *           }
         *         ],
         *         "type": "paragraph"
         *       }
         *     ],
         *     "type": "doc",
         *     "version": 1
         *   },
         *   "visibility": {
         *     "identifier": "Administrators",
         *     "type": "role",
         *     "value": "Administrators"
         *   }
         * }
         */
        "application/json": components["schemas"]["Comment"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
      /**
       * @description Returned if the per-issue limit has been breached for one of the following fields:
       *
       *  *  comments
       *  *  attachments
       */
      413: {
        content: never;
      };
    };
  };
  /**
   * Get comment
   * @description Returns a comment.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
   */
  getComment: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the comment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update comment
   * @description Updates a comment.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
   *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
   */
  updateComment: {
    parameters: {
      query?: {
        /** @description Whether users are notified when a comment is updated. */
        notifyUsers?: boolean;
        /** @description Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideEditableFlag?: boolean;
        /** @description Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the comment. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "body": {
         *     "content": [
         *       {
         *         "content": [
         *           {
         *             "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque eget venenatis elit. Duis eu justo eget augue iaculis fermentum. Sed semper quam laoreet nisi egestas at posuere augue semper.",
         *             "type": "text"
         *           }
         *         ],
         *         "type": "paragraph"
         *       }
         *     ],
         *     "type": "doc",
         *     "version": 1
         *   },
         *   "visibility": {
         *     "identifier": "Administrators",
         *     "type": "role",
         *     "value": "Administrators"
         *   }
         * }
         */
        "application/json": components["schemas"]["Comment"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Comment"];
        };
      };
      /** @description Returned if the user does not have permission to edit the comment or the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete comment
   * @description Deletes a comment.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
   *  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
   */
  deleteComment: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the comment. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the user does not have permission to delete the comment. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or comment is not found or the user does not have permission to view the issue or comment. */
      404: {
        content: never;
      };
      /** @description Returned if an anonymous call is made to the operation. */
      405: {
        content: never;
      };
    };
  };
  /**
   * Get edit issue metadata
   * @description Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
   *
   * This endpoint will check for these conditions:
   *
   * 1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
   * 2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
   * 3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
   * 4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
   * 5.  Issue has a project, issue type, and status defined.
   * 6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
   * 7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
   * 8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
   * 9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.
   *
   * Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.
   *
   * Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:
   *
   *  *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
   *  *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *
   * Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
   */
  getEditIssueMeta: {
    parameters: {
      query?: {
        /** @description Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideScreenSecurity?: boolean;
        /** @description Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */
        overrideEditableFlag?: boolean;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueUpdateMetadata"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user uses an override parameter but doesn't have permission to do so. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Send notification for issue
   * @description Creates an email notification for an issue and adds it to the mail queue.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  notify: {
    parameters: {
      path: {
        /** @description ID or key of the issue that the notification is sent for. */
        issueIdOrKey: string;
      };
    };
    /** @description The request object for the notification and recipients. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "htmlBody": "The <strong>latest</strong> test results for this ticket are now available.",
         *   "restrict": {
         *     "groupIds": [],
         *     "groups": [
         *       {
         *         "name": "notification-group"
         *       }
         *     ],
         *     "permissions": [
         *       {
         *         "key": "BROWSE"
         *       }
         *     ]
         *   },
         *   "subject": "Latest test results",
         *   "textBody": "The latest test results for this ticket are now available.",
         *   "to": {
         *     "assignee": false,
         *     "groupIds": [],
         *     "groups": [
         *       {
         *         "name": "notification-group"
         *       }
         *     ],
         *     "reporter": false,
         *     "users": [
         *       {
         *         "accountId": "5b10a2844c20165700ede21g",
         *         "active": false
         *       }
         *     ],
         *     "voters": true,
         *     "watchers": true
         *   }
         * }
         */
        "application/json": components["schemas"]["Notification"];
      };
    };
    responses: {
      /** @description Returned if the email is queued for sending. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the recipient is the same as the calling user.
       *  *  the recipient is invalid. For example, the recipient is set to the assignee, but the issue is unassigned.
       *  *  the request is invalid. For example, required fields are missing or have invalid values.
       */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  outgoing emails are disabled.
       *  *  no SMTP server is configured.
       */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue property keys
   * @description Returns the URLs and keys of an issue's properties.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Property details are only returned where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getIssuePropertyKeys: {
    parameters: {
      path: {
        /** @description The key or ID of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the issue is not found or the user does not have permissions to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue property
   * @description Returns the key and value of an issue's property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getIssueProperty: {
    parameters: {
      path: {
        /** @description The key or ID of the issue. */
        issueIdOrKey: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or property is not found or the user does not have permission to see the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set issue property
   * @description Sets the value of an issue's property. Use this resource to store custom data against an issue.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  setIssueProperty: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The key of the issue property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the issue property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to edit the issue. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue property
   * @description Deletes an issue's property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  deleteIssueProperty: {
    parameters: {
      path: {
        /** @description The key or ID of the issue. */
        issueIdOrKey: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or property is not found, or the user does not have permission to edit the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get remote issue links
   * @description Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getRemoteIssueLinks: {
    parameters: {
      query?: {
        /** @description The global ID of the remote issue link. */
        globalId?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["RemoteIssueLink"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if issue linking is disabled. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
      /** @description Returned if the per-issue limit for remote links has been breached. */
      413: {
        content: never;
      };
    };
  };
  /**
   * Create or update remote issue link
   * @description Creates or updates a remote issue link for an issue.
   *
   * If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  createOrUpdateRemoteIssueLink: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "application": {
         *     "name": "My Acme Tracker",
         *     "type": "com.acme.tracker"
         *   },
         *   "globalId": "system=http://www.mycompany.com/support&id=1",
         *   "object": {
         *     "icon": {
         *       "title": "Support Ticket",
         *       "url16x16": "http://www.mycompany.com/support/ticket.png"
         *     },
         *     "status": {
         *       "icon": {
         *         "link": "http://www.mycompany.com/support?id=1&details=closed",
         *         "title": "Case Closed",
         *         "url16x16": "http://www.mycompany.com/support/resolved.png"
         *       },
         *       "resolved": true
         *     },
         *     "summary": "Customer support issue",
         *     "title": "TSTSUP-111",
         *     "url": "http://www.mycompany.com/support?id=1"
         *   },
         *   "relationship": "causes"
         * }
         */
        "application/json": components["schemas"]["RemoteIssueLinkRequest"];
      };
    };
    responses: {
      /** @description Returned if the remote issue link is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["RemoteIssueLinkIdentifies"];
        };
      };
      /** @description Returned if the remote issue link is created. */
      201: {
        content: {
          "application/json": components["schemas"]["RemoteIssueLinkIdentifies"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to link issues. */
      403: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete remote issue link by global ID
   * @description Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
   */
  deleteRemoteIssueLinkByGlobalId: {
    parameters: {
      query: {
        /** @description The global ID of a remote issue link. */
        globalId: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if a global ID isn't provided. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to link issues. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get remote issue link by ID
   * @description Returns a remote issue link for an issue.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  getRemoteIssueLinkById: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the remote issue link. */
        linkId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["RemoteIssueLink"];
        };
      };
      /** @description Returned if the link ID is invalid or the remote issue link does not belong to the issue. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if issue linking is disabled. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update remote issue link by ID
   * @description Updates a remote issue link for an issue.
   *
   * Note: Fields without values in the request are set to null.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  updateRemoteIssueLink: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the remote issue link. */
        linkId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "application": {
         *     "name": "My Acme Tracker",
         *     "type": "com.acme.tracker"
         *   },
         *   "globalId": "system=http://www.mycompany.com/support&id=1",
         *   "object": {
         *     "icon": {
         *       "title": "Support Ticket",
         *       "url16x16": "http://www.mycompany.com/support/ticket.png"
         *     },
         *     "status": {
         *       "icon": {
         *         "link": "http://www.mycompany.com/support?id=1&details=closed",
         *         "title": "Case Closed",
         *         "url16x16": "http://www.mycompany.com/support/resolved.png"
         *       },
         *       "resolved": true
         *     },
         *     "summary": "Customer support issue",
         *     "title": "TSTSUP-111",
         *     "url": "http://www.mycompany.com/support?id=1"
         *   },
         *   "relationship": "causes"
         * }
         */
        "application/json": components["schemas"]["RemoteIssueLinkRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the link ID is invalid.
       *  *  the remote issue link does not belong to the issue.
       *  *  the request body is invalid.
       */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to link issues. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete remote issue link by ID
   * @description Deletes a remote issue link from an issue.
   *
   * This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  deleteRemoteIssueLinkById: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of a remote issue link. */
        linkId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the link ID is invalid or the remote issue link does not belong to the issue. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to link issues. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or remote issue link is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get transitions
   * @description Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
   *
   * Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required: A list or transition is returned only when the user has:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *
   * However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
   */
  getTransitions: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post). */
        expand?: string;
        /** @description The ID of the transition. */
        transitionId?: string;
        /** @description Whether transitions with the condition *Hide From User Condition* are included in the response. */
        skipRemoteOnlyCondition?: boolean;
        /** @description Whether details of transitions that fail a condition are included in the response */
        includeUnavailableTransitions?: boolean;
        /** @description Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value. */
        sortByOpsBarAndStatus?: boolean;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Transitions"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Transition issue
   * @description Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
   *
   * sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  doTransition: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fields": {
         *     "assignee": {
         *       "name": "bob"
         *     },
         *     "resolution": {
         *       "name": "Fixed"
         *     }
         *   },
         *   "historyMetadata": {
         *     "activityDescription": "Complete order processing",
         *     "actor": {
         *       "avatarUrl": "http://mysystem/avatar/tony.jpg",
         *       "displayName": "Tony",
         *       "id": "tony",
         *       "type": "mysystem-user",
         *       "url": "http://mysystem/users/tony"
         *     },
         *     "cause": {
         *       "id": "myevent",
         *       "type": "mysystem-event"
         *     },
         *     "description": "From the order testing process",
         *     "extraData": {
         *       "Iteration": "10a",
         *       "Step": "4"
         *     },
         *     "generator": {
         *       "id": "mysystem-1",
         *       "type": "mysystem-application"
         *     },
         *     "type": "myplugin:type"
         *   },
         *   "transition": {
         *     "id": "5"
         *   },
         *   "update": {
         *     "comment": [
         *       {
         *         "add": {
         *           "body": {
         *             "content": [
         *               {
         *                 "content": [
         *                   {
         *                     "text": "Bug has been fixed",
         *                     "type": "text"
         *                   }
         *                 ],
         *                 "type": "paragraph"
         *               }
         *             ],
         *             "type": "doc",
         *             "version": 1
         *           }
         *         }
         *       }
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["IssueUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  no transition is specified.
       *  *  the user does not have permission to transition the issue.
       *  *  a field that isn't included on the transition screen is defined in `fields` or `update`.
       *  *  a field is specified in both `fields` and `update`.
       *  *  the request is invalid for any other reason.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
      /** @description Returned if the issue could not be updated due to a conflicting update. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.* */
      409: {
        content: never;
      };
      /**
       * @description Returned if a per-issue limit has been breached for one of the following fields:
       *
       *  *  comments
       *  *  worklogs
       *  *  attachments
       *  *  issue links
       *  *  remote issue links
       */
      413: {
        content: never;
      };
      /** @description Returned if a configuration problem prevents the creation of the issue. (refer to the [changelog](https://developer.atlassian.com/changelog/#CHANGE-1364) *for more details.* */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get votes
   * @description Returns details about the votes on an issue.
   *
   * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *
   * Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
   */
  getVotes: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Votes"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  voting is disabled.
       *  *  the user does not have permission to view the issue.
       *  *  the issue is not found.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add vote
   * @description Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
   *
   * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  addVote: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  voting is disabled.
       *  *  the issue is not found.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete vote
   * @description Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
   *
   * This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  removeVote: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  voting is disabled.
       *  *  the user has not voted on the issue.
       *  *  the issue is not found.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue watchers
   * @description Returns the watchers for an issue.
   *
   * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   */
  getIssueWatchers: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful */
      200: {
        content: {
          "application/json": components["schemas"]["Watchers"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add watcher
   * @description Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
   *
   * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   */
  addWatcher: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    /** @description The account ID of the user. Note that username cannot be used due to privacy changes. */
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the permission to manage the watcher list. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or the user is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete watcher
   * @description Deletes a user as a watcher of an issue.
   *
   * This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   */
  removeWatcher: {
    parameters: {
      query?: {
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */
        accountId?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if `accountId` is not supplied. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the permission to manage the watcher list. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or the user is not found or the user does not have permission to view the issue. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue worklogs
   * @description Returns worklogs for an issue (ordered by created time), starting from the oldest worklog or from the worklog started on or after a date and time.
   *
   * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Workloads are only returned where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getIssueWorklog: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned. */
        startedAfter?: number;
        /** @description The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned. */
        startedBefore?: number;
        /** @description Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties. */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfWorklogs"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue is not found or the user does not have permission to view the issue.
       *  *  `startAt` or `maxResults` has non-numeric values.
       *  *  time tracking is disabled.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add worklog
   * @description Adds a worklog to an issue.
   *
   * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  addWorklog: {
    parameters: {
      query?: {
        /** @description Whether users watching the issue are notified by email. */
        notifyUsers?: boolean;
        /**
         * @description Defines how to update the issue's time estimate, the options are:
         *
         *  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
         *  *  `leave` Leaves the estimate unchanged.
         *  *  `manual` Reduces the estimate by amount specified in `reduceBy`.
         *  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
         */
        adjustEstimate?: "new" | "leave" | "manual" | "auto";
        /** @description The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`. */
        newEstimate?: string;
        /** @description The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`. */
        reduceBy?: string;
        /** @description Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties. */
        expand?: string;
        /** @description Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */
        overrideEditableFlag?: boolean;
      };
      path: {
        /** @description The ID or key the issue. */
        issueIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "comment": {
         *     "content": [
         *       {
         *         "content": [
         *           {
         *             "text": "I did some work here.",
         *             "type": "text"
         *           }
         *         ],
         *         "type": "paragraph"
         *       }
         *     ],
         *     "type": "doc",
         *     "version": 1
         *   },
         *   "started": "2021-01-17T12:34:00.000+0000",
         *   "timeSpentSeconds": 12000,
         *   "visibility": {
         *     "identifier": "276f955c-63d7-42c8-9520-92d01dca0625",
         *     "type": "group"
         *   }
         * }
         */
        "application/json": components["schemas"]["Worklog"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Worklog"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
       *  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
       *  *  the user does not have permission to add the worklog.
       *  *  the request JSON is malformed.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the issue is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
      /**
       * @description Returned if the per-issue limit has been breached for one of the following fields:
       *
       *  *  worklogs
       *  *  attachments
       */
      413: {
        content: never;
      };
    };
  };
  /**
   * Get worklog
   * @description Returns a worklog.
   *
   * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getWorklog: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts
         *
         * `properties`, which returns worklog properties.
         */
        expand?: string;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Worklog"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue is not found or the user does not have permission to view it.
       *  *  the worklog is not found or the user does not have permission to view it.
       *  *  time tracking is disabled.
       *
       * .
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update worklog
   * @description Updates a worklog.
   *
   * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  updateWorklog: {
    parameters: {
      query?: {
        /** @description Whether users watching the issue are notified by email. */
        notifyUsers?: boolean;
        /**
         * @description Defines how to update the issue's time estimate, the options are:
         *
         *  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
         *  *  `leave` Leaves the estimate unchanged.
         *  *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
         */
        adjustEstimate?: "new" | "leave" | "manual" | "auto";
        /** @description The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`. */
        newEstimate?: string;
        /** @description Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties. */
        expand?: string;
        /** @description Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */
        overrideEditableFlag?: boolean;
      };
      path: {
        /** @description The ID or key the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "comment": {
         *     "content": [
         *       {
         *         "content": [
         *           {
         *             "text": "I did some work here.",
         *             "type": "text"
         *           }
         *         ],
         *         "type": "paragraph"
         *       }
         *     ],
         *     "type": "doc",
         *     "version": 1
         *   },
         *   "started": "2021-01-17T12:34:00.000+0000",
         *   "timeSpentSeconds": 12000,
         *   "visibility": {
         *     "identifier": "276f955c-63d7-42c8-9520-92d01dca0625",
         *     "type": "group"
         *   }
         * }
         */
        "application/json": components["schemas"]["Worklog"];
      };
    };
    responses: {
      /** @description Returned if the request is successful */
      200: {
        content: {
          "application/json": components["schemas"]["Worklog"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
       *  *  the user does not have permission to update the worklog.
       *  *  the request JSON is malformed.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue is not found or user does not have permission to view the issue.
       *  *  the worklog is not found or the user does not have permission to view it.
       *  *  time tracking is disabled.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete worklog
   * @description Deletes a worklog from an issue.
   *
   * Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  deleteWorklog: {
    parameters: {
      query?: {
        /** @description Whether users watching the issue are notified by email. */
        notifyUsers?: boolean;
        /**
         * @description Defines how to update the issue's time estimate, the options are:
         *
         *  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
         *  *  `leave` Leaves the estimate unchanged.
         *  *  `manual` Increases the estimate by amount specified in `increaseBy`.
         *  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
         */
        adjustEstimate?: "new" | "leave" | "manual" | "auto";
        /** @description The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`. */
        newEstimate?: string;
        /** @description The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`. */
        increaseBy?: string;
        /** @description Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag. */
        overrideEditableFlag?: boolean;
      };
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  `adjustEstimate` is set to `new` but `newEstimate` is not provided or is invalid.
       *  *  `adjustEstimate` is set to `manual` but `reduceBy` is not provided or is invalid.
       *  *  the user does not have permission to delete the worklog.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue is not found or user does not have permission to view the issue.
       *  *  the worklog is not found or the user does not have permission to view it.
       *  *  time tracking is disabled.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get worklog property keys
   * @description Returns the keys of all properties for a worklog.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getWorklogPropertyKeys: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        worklogId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the worklog ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue or worklog is not found.
       *  *  the user does not have permission to view the issue or worklog.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get worklog property
   * @description Returns the value of a worklog property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  getWorklogProperty: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        worklogId: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the worklog ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue, worklog, or property is not found.
       *  *  the user does not have permission to view the issue or worklog.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set worklog property
   * @description Sets the value of a worklog property. Use this operation to store custom data against the worklog.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  setWorklogProperty: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        worklogId: string;
        /** @description The key of the issue property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the worklog property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the worklog property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the worklog ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to edit the worklog. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue or worklog is not found.
       *  *  the user does not have permission to view the issue or worklog.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete worklog property
   * @description Deletes a worklog property.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  deleteWorklogProperty: {
    parameters: {
      path: {
        /** @description The ID or key of the issue. */
        issueIdOrKey: string;
        /** @description The ID of the worklog. */
        worklogId: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the worklog property is removed. */
      204: {
        content: never;
      };
      /** @description Returned if the worklog key or id is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to edit the worklog. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue, worklog, or property is not found.
       *  *  the user does not have permission to view the issue or worklog.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create issue link
   * @description Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
   *
   * If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
   *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   *  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
   */
  linkIssues: {
    /** @description The issue link request. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "comment": {
         *     "body": {
         *       "content": [
         *         {
         *           "content": [
         *             {
         *               "text": "Linked related issue!",
         *               "type": "text"
         *             }
         *           ],
         *           "type": "paragraph"
         *         }
         *       ],
         *       "type": "doc",
         *       "version": 1
         *     },
         *     "visibility": {
         *       "identifier": "276f955c-63d7-42c8-9520-92d01dca0625",
         *       "type": "group",
         *       "value": "jira-software-users"
         *     }
         *   },
         *   "inwardIssue": {
         *     "key": "HSP-1"
         *   },
         *   "outwardIssue": {
         *     "key": "MKY-1"
         *   },
         *   "type": {
         *     "name": "Duplicate"
         *   }
         * }
         */
        "application/json": components["schemas"]["LinkIssueRequestJsonBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the comment is not created. The response contains an error message indicating why the comment wasn't created. The issue link is also not created. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the user cannot view one or both of the issues. For example, the user doesn't have *Browse project* project permission for a project containing one of the issues.
       *  *  the user does not have *link issues* project permission.
       *  *  either of the link issues are not found.
       *  *  the issue link type is not found.
       */
      404: {
        content: never;
      };
      /** @description Returned if the per-issue limit for issue links has been breached. */
      413: {
        content: never;
      };
    };
  };
  /**
   * Get issue link
   * @description Returns an issue link.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
   */
  getIssueLink: {
    parameters: {
      path: {
        /** @description The ID of the issue link. */
        linkId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueLink"];
        };
      };
      /** @description Returned if the issue link ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link is not found.
       *  *  the user doesn't have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue link
   * @description Deletes an issue link.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
   *  *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
   */
  deleteIssueLink: {
    parameters: {
      path: {
        /** @description The ID of the issue link. */
        linkId: string;
      };
    };
    responses: {
      /** @description 200 response */
      200: {
        content: never;
      };
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the issue link ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link is not found.
       *  *  the user doesn't have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue link types
   * @description Returns a list of all issue link types.
   *
   * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
   */
  getIssueLinkTypes: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueLinkTypes"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if issue linking is disabled. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create issue link type
   * @description Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
   *
   * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueLinkType: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "inward": "Duplicated by",
         *   "name": "Duplicate",
         *   "outward": "Duplicates"
         * }
         */
        "application/json": components["schemas"]["IssueLinkType"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["IssueLinkType"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link type name is in use.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue link type
   * @description Returns an issue link type.
   *
   * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
   */
  getIssueLinkType: {
    parameters: {
      path: {
        /** @description The ID of the issue link type. */
        issueLinkTypeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueLinkType"];
        };
      };
      /** @description Returned if the issue link type ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update issue link type
   * @description Updates an issue link type.
   *
   * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateIssueLinkType: {
    parameters: {
      path: {
        /** @description The ID of the issue link type. */
        issueLinkTypeId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "inward": "Duplicated by",
         *   "name": "Duplicate",
         *   "outward": "Duplicates"
         * }
         */
        "application/json": components["schemas"]["IssueLinkType"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueLinkType"];
        };
      };
      /** @description Returned if the issue link type ID or the request body are invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue link type
   * @description Deletes an issue link type.
   *
   * To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteIssueLinkType: {
    parameters: {
      path: {
        /** @description The ID of the issue link type. */
        issueLinkTypeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the issue link type ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  issue linking is disabled.
       *  *  the issue link type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Export archived issue(s)
   * @description Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.
   *
   * Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.
   *
   * **[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
   *
   * **License required:** Premium or Enterprise
   *
   * **Signed-in users only:** This API can't be accessed anonymously.
   *
   * **Rate limiting:** Only a single request can be active at any given time.
   */
  exportArchivedIssues: {
    /** @description You can filter the issues in your request by the `projects`, `archivedBy`, `archivedDate`, `issueTypes`, and `reporters` fields. All filters are optional. If you don't provide any filters, you'll get a list of up to one million archived issues. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "archivedBy": [
         *     "uuid-rep-001",
         *     "uuid-rep-002"
         *   ],
         *   "archivedDate": {
         *     "dateAfter": "2023-01-01",
         *     "dateBefore": "2023-01-12"
         *   },
         *   "archivedDateRange": {
         *     "dateAfter": "2023-01-01",
         *     "dateBefore": "2023-01-12"
         *   },
         *   "issueTypes": [
         *     "10001",
         *     "10002"
         *   ],
         *   "projects": [
         *     "FOO",
         *     "BAR"
         *   ],
         *   "reporters": [
         *     "uuid-rep-001",
         *     "uuid-rep-002"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ArchivedIssuesFilterRequest"];
      };
    };
    responses: {
      /** @description Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request. */
      202: {
        content: {
          "application/json": components["schemas"]["ExportArchivedIssuesTaskProgressResponse"];
        };
      };
      /**
       * @description Returned when:
       *
       *  *  The request is invalid, or the filters provided are incorrect
       *  *  You requested too many issues for export. The limit is one million issues per request
       */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were unarchived because the provided authentication credentials are either missing or invalid. */
      401: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if no issues were unarchived because the user lacks the required Jira admin or site admin permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if a request to export archived issues is already running. */
      412: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue security schemes
   * @description Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueSecuritySchemes: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SecuritySchemes"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer issue security schemes. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create issue security scheme
   * @description Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueSecurityScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Newly created issue security scheme",
         *   "levels": [
         *     {
         *       "description": "Newly created level",
         *       "isDefault": true,
         *       "members": [
         *         {
         *           "parameter": "administrators",
         *           "type": "group"
         *         }
         *       ],
         *       "name": "New level"
         *     }
         *   ],
         *   "name": "New security scheme"
         * }
         */
        "application/json": components["schemas"]["CreateIssueSecuritySchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["SecuritySchemeId"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get issue security levels
   * @description Returns a [paginated](#pagination) list of issue security levels.
   *
   * Only issue security levels in the context of classic projects are returned.
   *
   * Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getSecurityLevels: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&id=10001`. */
        id?: string[];
        /** @description The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&schemeId=10001`. */
        schemeId?: string[];
        /** @description When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false. */
        onlyDefault?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanSecurityLevel"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Set default issue security levels
   * @description Sets default issue security levels for schemes.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setDefaultLevels: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultValues": [
         *     {
         *       "defaultLevelId": "20000",
         *       "issueSecuritySchemeId": "10000"
         *     },
         *     {
         *       "defaultLevelId": "30000",
         *       "issueSecuritySchemeId": "12000"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["SetDefaultLevelsRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue resolution isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get issue security level members
   * @description Returns a [paginated](#pagination) list of issue security level members.
   *
   * Only issue security level members in the context of classic projects are returned.
   *
   * Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getSecurityLevelMembers: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&id=10001`. */
        id?: string[];
        /** @description The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&schemeId=10001`. */
        schemeId?: string[];
        /** @description The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&levelId=10001`. */
        levelId?: string[];
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `all` Returns all expandable information
         *  *  `field` Returns information about the custom field granted the permission
         *  *  `group` Returns information about the group that is granted the permission
         *  *  `projectRole` Returns information about the project role granted the permission
         *  *  `user` Returns information about the user who is granted the permission
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanSecurityLevelMember"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get projects using issue security schemes
   * @description Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  searchProjectsUsingSecuritySchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of security scheme IDs to be filtered out. */
        issueSecuritySchemeId?: string[];
        /** @description The list of project IDs to be filtered out. */
        projectId?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueSecuritySchemeToProjectMapping"];
        };
      };
      /** @description Returned if the search criteria is invalid.If you specify the project ID parameter */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Associate security scheme to project
   * @description Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  associateSchemesToProjects: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "oldToNewSecurityLevelMappings": [
         *     {
         *       "newLevelId": "30001",
         *       "oldLevelId": "30000"
         *     }
         *   ],
         *   "projectId": "10000",
         *   "schemeId": "20000"
         * }
         */
        "application/json": components["schemas"]["AssociateSecuritySchemeWithProjectDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a task to remove the issue security level is already running. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Search issue security schemes
   * @description Returns a [paginated](#pagination) list of issue security schemes.
   * If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.
   *
   * Only issue security schemes in the context of classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  searchSecuritySchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&id=10001`. */
        id?: string[];
        /** @description The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&projectId=10001`. */
        projectId?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanSecuritySchemeWithProjects"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue security scheme
   * @description Returns an issue security scheme along with its security levels.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
   */
  getIssueSecurityScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the administrator permission and the scheme is not used in any project where the user has administrative permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update issue security scheme
   * @description Updates the issue security scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateIssueSecurityScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My issue security scheme description",
         *   "name": "My issue security scheme name"
         * }
         */
        "application/json": components["schemas"]["UpdateIssueSecuritySchemeRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get issue security level members by issue security scheme
   * @description Returns issue security level members.
   *
   * Only issue security level members in context of classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueSecurityLevelMembers: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`. */
        issueSecurityLevelId?: string[];
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. */
        issueSecuritySchemeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueSecurityLevelMember"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if no issue security level members are found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue security scheme
   * @description Deletes an issue security scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteSecurityScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. */
        schemeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Add issue security levels
   * @description Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addSecurityLevel: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. */
        schemeId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "levels": [
         *     {
         *       "description": "First Level Description",
         *       "isDefault": true,
         *       "members": [
         *         {
         *           "type": "reporter"
         *         },
         *         {
         *           "parameter": "jira-administrators",
         *           "type": "group"
         *         }
         *       ],
         *       "name": "First Level"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["AddSecuritySchemeLevelsRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Update issue security level
   * @description Updates the issue security level.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateSecurityLevel: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme level belongs to. */
        schemeId: string;
        /** @description The ID of the issue security level to update. */
        levelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "New level description",
         *   "name": "New level name"
         * }
         */
        "application/json": components["schemas"]["UpdateIssueSecurityLevelDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue security level isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Remove issue security level
   * @description Deletes an issue security level.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeLevel: {
    parameters: {
      query?: {
        /** @description The ID of the issue security level that will replace the currently selected level. */
        replaceWith?: string;
      };
      path: {
        /** @description The ID of the issue security scheme. */
        schemeId: string;
        /** @description The ID of the issue security level to remove. */
        levelId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue security level isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a task to remove the issue security level is already running. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Add issue security level members
   * @description Adds members to the issue security level. You can add up to 100 members per request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addSecurityLevelMembers: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. */
        schemeId: string;
        /** @description The ID of the issue security level. */
        levelId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "members": [
         *     {
         *       "type": "reporter"
         *     },
         *     {
         *       "parameter": "jira-administrators",
         *       "type": "group"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["SecuritySchemeMembersRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Remove member from issue security level
   * @description Removes an issue security level member from an issue security scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeMemberFromSecurityLevel: {
    parameters: {
      path: {
        /** @description The ID of the issue security scheme. */
        schemeId: string;
        /** @description The ID of the issue security level. */
        levelId: string;
        /** @description The ID of the issue security level member to be removed. */
        memberId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the security scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all issue types for user
   * @description Returns all issue types.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Issue types are only returned as follows:
   *
   *  *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
   *  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
   */
  getIssueAllTypes: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create issue type
   * @description Creates an issue type and adds it to the default issue type scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueType: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "description",
         *   "name": "name",
         *   "type": "standard"
         * }
         */
        "application/json": components["schemas"]["IssueTypeCreateBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"];
        };
      };
      /**
       * @description Returned if the request is invalid because:
       *
       *  *  no content is sent.
       *  *  the issue type name exceeds 60 characters.
       *  *  a subtask issue type is requested on an instance where subtasks are disabled.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type name is in use. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get issue types for project
   * @description Returns issue types for a project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypesForProject: {
    parameters: {
      query: {
        /** @description The ID of the project. */
        projectId: number;
        /**
         * @description The level of the issue type to filter by. Use:
         *
         *  *  `-1` for Subtask.
         *  *  `0` for Base.
         *  *  `1` for Epic.
         */
        level?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"][];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project is not found.
       *  *  the user does not have the necessary permission.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue type
   * @description Returns an issue type.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueType: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"];
        };
      };
      /** @description Returned if the issue type ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update issue type
   * @description Updates the issue type.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateIssueType: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "avatarId": 1,
         *   "description": "description",
         *   "name": "name"
         * }
         */
        "application/json": components["schemas"]["IssueTypeUpdateBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"];
        };
      };
      /**
       * @description Returned if the request is invalid because:
       *
       *  *  no content is sent.
       *  *  the issue type name exceeds 60 characters.
       *  *  the avatar is not associated with this issue type.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the issue type name is in use. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Delete issue type
   * @description Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteIssueType: {
    parameters: {
      query?: {
        /** @description The ID of the replacement issue type. */
        alternativeIssueTypeId?: string;
      };
      path: {
        /** @description The ID of the issue type. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if any issues cannot be updated with the alternative issue type. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type is in use and an alternative issue type is not specified.
       *  *  the issue type or alternative issue type is not found.
       */
      404: {
        content: never;
      };
      /**
       * @description Returned if the issue type is in use and:
       *
       *  *  also specified as the alternative issue type.
       *  *  is a *standard* issue type and the alternative issue type is a *subtask*.
       */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get alternative issue types
   * @description Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAlternativeIssueTypes: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeDetails"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Load issue type avatar
   * @description Loads an avatar for the issue type.
   *
   * Specify the avatar's local file location in the body of the request. Also, include the following headers:
   *
   *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
   *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
   *
   * For example:
   * `curl --request POST \ --user email@example.com:<api_token> \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/< image_type>' \ --data-binary "<@/path/to/file/with/your/avatar>" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
   *
   * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
   *
   * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
   *
   * After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueTypeAvatar: {
    parameters: {
      query: {
        /** @description The X coordinate of the top-left corner of the crop region. */
        x?: number;
        /** @description The Y coordinate of the top-left corner of the crop region. */
        y?: number;
        /** @description The length of each side of the crop region. */
        size: number;
      };
      path: {
        /** @description The ID of the issue type. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "*/*": unknown;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Avatar"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  an image isn't included in the request.
       *  *  the image type is unsupported.
       *  *  the crop parameters extend the crop area beyond the edge of the image.
       *  *  `cropSize` is missing.
       *  *  the issue type ID is invalid.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue type property keys
   * @description Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
   */
  getIssueTypePropertyKeys: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        issueTypeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the issue type ID is invalid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue type property
   * @description Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
   */
  getIssueTypeProperty: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        issueTypeId: string;
        /** @description The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the issue type ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue type or property is not found or the user does not have the required permissions. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set issue type property
   * @description Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setIssueTypeProperty: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        issueTypeId: string;
        /** @description The key of the issue type property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "number": 5,
         *   "string": "string-value"
         * }
         */
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the issue type property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type ID is invalid.
       *  *  a property value is not provided.
       *  *  the property value JSON content is invalid.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to modify the issue type. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the issue type is not found.
       *  *  the user does not have the permission view the issue type.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue type property
   * @description Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteIssueTypeProperty: {
    parameters: {
      path: {
        /** @description The ID of the issue type. */
        issueTypeId: string;
        /** @description The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the issue type property is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the issue type ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type or property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all issue type schemes
   * @description Returns a [paginated](#pagination) list of issue type schemes.
   *
   * Only issue type schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllIssueTypeSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `name` Sorts by issue type scheme name.
         *  *  `id` Sorts by issue type scheme ID.
         */
        orderBy?: "name" | "-name" | "+name" | "id" | "-id" | "+id";
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
         *  *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.
         */
        expand?: string;
        /** @description String used to perform a case-insensitive partial match with issue type scheme name. */
        queryString?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeScheme"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create issue type scheme
   * @description Creates an issue type scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueTypeScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultIssueTypeId": "10002",
         *   "description": "A collection of issue types suited to use in a kanban style project.",
         *   "issueTypeIds": [
         *     "10001",
         *     "10002",
         *     "10003"
         *   ],
         *   "name": "Kanban Issue Type Scheme"
         * }
         */
        "application/json": components["schemas"]["IssueTypeSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["IssueTypeSchemeID"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the scheme name is used by another scheme. */
      409: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue type scheme items
   * @description Returns a [paginated](#pagination) list of issue type scheme items.
   *
   * Only issue type scheme items used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeSchemesMapping: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`. */
        issueTypeSchemeId?: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeSchemeMapping"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get issue type schemes for projects
   * @description Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.
   *
   * Only issue type schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeSchemeForProjects: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. */
        projectId: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeSchemeProjects"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Assign issue type scheme to project
   * @description Assigns an issue type scheme to a project.
   *
   * If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.
   *
   * Issue type schemes can only be assigned to classic projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  assignIssueTypeSchemeToProject: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeSchemeId": "10000",
         *   "projectId": "10000"
         * }
         */
        "application/json": components["schemas"]["IssueTypeSchemeProjectAssociation"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type scheme or the project is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update issue type scheme
   * @description Updates an issue type scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateIssueTypeScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type scheme. */
        issueTypeSchemeId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultIssueTypeId": "10002",
         *   "description": "A collection of issue types suited to use in a kanban style project.",
         *   "name": "Kanban Issue Type Scheme"
         * }
         */
        "application/json": components["schemas"]["IssueTypeSchemeUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete issue type scheme
   * @description Deletes an issue type scheme.
   *
   * Only issue type schemes used in classic projects can be deleted.
   *
   * Any projects assigned to the scheme are reassigned to the default issue type scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteIssueTypeScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type scheme. */
        issueTypeSchemeId: number;
      };
    };
    responses: {
      /** @description Returned if the issue type scheme is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is to delete the default issue type scheme. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Add issue types to issue type scheme
   * @description Adds issue types to an issue type scheme.
   *
   * The added issue types are appended to the issue types list.
   *
   * If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addIssueTypesToIssueTypeScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type scheme. */
        issueTypeSchemeId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeIds": [
         *     "10000",
         *     "10002",
         *     "10003"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeIds"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type or the issue type scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Change order of issue types
   * @description Changes the order of issue types in an issue type scheme.
   *
   * The request body parameters must meet the following requirements:
   *
   *  *  all of the issue types must belong to the issue type scheme.
   *  *  either `after` or `position` must be provided.
   *  *  the issue type in `after` must not be in the issue type list.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  reorderIssueTypesInIssueTypeScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type scheme. */
        issueTypeSchemeId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "after": "10008",
         *   "issueTypeIds": [
         *     "10001",
         *     "10004",
         *     "10002"
         *   ]
         * }
         */
        "application/json": components["schemas"]["OrderOfIssueTypes"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Remove issue type from issue type scheme
   * @description Removes an issue type from an issue type scheme.
   *
   * This operation cannot remove:
   *
   *  *  any issue type used by issues.
   *  *  any issue types from the default issue type scheme.
   *  *  the last standard issue type from an issue type scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeIssueTypeFromIssueTypeScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type scheme. */
        issueTypeSchemeId: number;
        /** @description The ID of the issue type. */
        issueTypeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type scheme is missing or the issue type is not found in the issue type scheme. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue type screen schemes
   * @description Returns a [paginated](#pagination) list of issue type screen schemes.
   *
   * Only issue type screen schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeScreenSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
        /** @description String used to perform a case-insensitive partial match with issue type screen scheme name. */
        queryString?: string;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `name` Sorts by issue type screen scheme name.
         *  *  `id` Sorts by issue type screen scheme ID.
         */
        orderBy?: "name" | "-name" | "+name" | "id" | "-id" | "+id";
        /** @description Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeScreenScheme"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create issue type screen scheme
   * @description Creates an issue type screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createIssueTypeScreenScheme: {
    /** @description An issue type screen scheme bean. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeMappings": [
         *     {
         *       "issueTypeId": "default",
         *       "screenSchemeId": "10001"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "screenSchemeId": "10002"
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "screenSchemeId": "10002"
         *     }
         *   ],
         *   "name": "Scrum issue type screen scheme"
         * }
         */
        "application/json": components["schemas"]["IssueTypeScreenSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["IssueTypeScreenSchemeId"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type or screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. */
      409: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue type screen scheme items
   * @description Returns a [paginated](#pagination) list of issue type screen scheme items.
   *
   * Only issue type screen schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeScreenSchemeMappings: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`. */
        issueTypeScreenSchemeId?: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeScreenSchemeItem"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get issue type screen schemes for projects
   * @description Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.
   *
   * Only issue type screen schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueTypeScreenSchemeProjectAssociations: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */
        projectId: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanIssueTypeScreenSchemesProjects"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Assign issue type screen scheme to project
   * @description Assigns an issue type screen scheme to a project.
   *
   * Issue type screen schemes can only be assigned to classic projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  assignIssueTypeScreenSchemeToProject: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeScreenSchemeId": "10001",
         *   "projectId": "10002"
         * }
         */
        "application/json": components["schemas"]["IssueTypeScreenSchemeProjectAssociation"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /**
       * @description Returned if:
       *
       *  *  project is not found.
       *  *  issue type screen scheme is not found.
       *  *  the project is not a classic project.
       */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type screen scheme or the project are missing. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update issue type screen scheme
   * @description Updates an issue type screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateIssueTypeScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: string;
      };
    };
    /** @description The issue type screen scheme update details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Screens for scrum issue types.",
         *   "name": "Scrum scheme"
         * }
         */
        "application/json": components["schemas"]["IssueTypeScreenSchemeUpdateDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete issue type screen scheme
   * @description Deletes an issue type screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteIssueTypeScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: string;
      };
    };
    responses: {
      /** @description Returned if the issue type screen scheme is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Append mappings to issue type screen scheme
   * @description Appends issue type to screen scheme mappings to an issue type screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  appendMappingsForIssueTypeScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeMappings": [
         *     {
         *       "issueTypeId": "10000",
         *       "screenSchemeId": "10001"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "screenSchemeId": "10002"
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "screenSchemeId": "10002"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeScreenSchemeMappingDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the issue type screen scheme, issue type, or screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type is a sub-task, but sub-tasks are disabled in Jira settings. */
      409: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update issue type screen scheme default screen scheme
   * @description Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateDefaultScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "screenSchemeId": "10010"
         * }
         */
        "application/json": components["schemas"]["UpdateDefaultScreenScheme"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type screen scheme or the screen scheme is not found, or the screen scheme isn't used in classic projects. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Remove mappings from issue type screen scheme
   * @description Removes issue type to screen scheme mappings from an issue type screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeMappingsFromIssueTypeScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypeIds": [
         *     "10000",
         *     "10001",
         *     "10004"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssueTypeIds"];
      };
    };
    responses: {
      /** @description Returned if the screen scheme mappings are removed from the issue type screen scheme. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the issue type screen scheme or one or more issue type mappings are not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue type screen scheme projects
   * @description Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.
   *
   * Only company-managed projects associated with an issue type screen scheme are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectsForIssueTypeScreenScheme: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        query?: string;
      };
      path: {
        /** @description The ID of the issue type screen scheme. */
        issueTypeScreenSchemeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanProjectDetails"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get field reference data (GET)
   * @description Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
   *
   * To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAutoComplete: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["JQLReferenceData"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get field reference data (POST)
   * @description Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
   *
   * This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
   *
   * It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAutoCompletePost: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "includeCollapsedFields": true,
         *   "projectIds": [
         *     10000,
         *     10001,
         *     10002
         *   ]
         * }
         */
        "application/json": components["schemas"]["SearchAutoCompleteFilter"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["JQLReferenceData"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get field auto complete suggestions
   * @description Returns the JQL search auto complete suggestions for a field.
   *
   * Suggestions can be obtained by providing:
   *
   *  *  `fieldName` to get a list of all values for the field.
   *  *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
   *  *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
   *  *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getFieldAutoCompleteForQueryString: {
    parameters: {
      query?: {
        /** @description The name of the field. */
        fieldName?: string;
        /** @description The partial field item name entered by the user. */
        fieldValue?: string;
        /** @description The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*. */
        predicateName?: string;
        /** @description The partial predicate item name entered by the user. */
        predicateValue?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["AutoCompleteSuggestions"];
        };
      };
      /** @description Returned if an invalid combination of parameters is passed. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get precomputations (apps)
   * @description Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.
   *
   * **[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
   */
  getPrecomputations: {
    parameters: {
      query?: {
        /**
         * @description The function key in format:
         *
         *  *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`
         *  *  Connect: `[App key]__[Module key]`
         */
        functionKey?: string[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `functionKey` Sorts by the functionKey.
         *  *  `used` Sorts by the used timestamp.
         *  *  `created` Sorts by the created timestamp.
         *  *  `updated` Sorts by the updated timestamp.
         */
        orderBy?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanJqlFunctionPrecomputationBean"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as the app that provided the function. */
      403: {
        content: never;
      };
      /** @description Returned if the function is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update precomputations (apps)
   * @description Update the precomputation value of a function created by a Forge/Connect app.
   *
   * **[Permissions](#permissions) required:** An API for apps to update their own precomputations.
   */
  updatePrecomputations: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "values": [
         *     {
         *       "id": "f2ef228b-367f-4c6b-bd9d-0d0e96b5bd7b",
         *       "value": "issue in (TEST-1, TEST-2, TEST-3)"
         *     },
         *     {
         *       "error": "Error message to be displayed to the user",
         *       "id": "2a854f11-d0e1-4260-aea8-64a562a7062a"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["JqlFunctionPrecomputationUpdateRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the request is not authenticated as the app that provided the function. */
      403: {
        content: never;
      };
      /** @description Returned if the function is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Check issues against JQL
   * @description Checks whether one or more issues would be returned by one or more JQL queries.
   *
   * **[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  matchIssues: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueIds": [
         *     10001,
         *     1000,
         *     10042
         *   ],
         *   "jqls": [
         *     "project = FOO",
         *     "issuetype = Bug",
         *     "summary ~ \"some text\" AND project in (FOO, BAR)"
         *   ]
         * }
         */
        "application/json": components["schemas"]["IssuesAndJQLQueries"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueMatches"];
        };
      };
      /** @description Returned if `jqls` exceeds the maximum number of JQL queries or `issueIds` exceeds the maximum number of issue IDs. */
      400: {
        content: never;
      };
    };
  };
  /**
   * Parse JQL query
   * @description Parses and validates JQL queries.
   *
   * Validation is performed in context of the current user.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  parseJqlQueries: {
    parameters: {
      query: {
        /**
         * @description How to validate the JQL query and treat the validation results. Validation options include:
         *
         *  *  `strict` Returns all errors. If validation fails, the query structure is not returned.
         *  *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
         *  *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.
         */
        validation: "strict" | "warn" | "none";
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "queries": [
         *     "summary ~ test AND (labels in (urgent, blocker) OR lastCommentedBy = currentUser()) AND status CHANGED AFTER startOfMonth(-1M) ORDER BY updated DESC",
         *     "issue.property[\"spaces here\"].value in (\"Service requests\", Incidents)",
         *     "invalid query",
         *     "summary = test",
         *     "summary in test",
         *     "project = INVALID",
         *     "universe = 42"
         *   ]
         * }
         */
        "application/json": components["schemas"]["JqlQueriesToParse"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ParsedJqlQueries"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Convert user identifiers to account IDs in JQL queries
   * @description Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
   *
   * You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  migrateQueries: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "queryStrings": [
         *     "assignee = mia",
         *     "issuetype = Bug AND assignee in (mia) AND reporter in (alana) order by lastViewed DESC"
         *   ]
         * }
         */
        "application/json": components["schemas"]["JQLPersonalDataMigrationRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed. */
      200: {
        content: {
          "application/json": components["schemas"]["ConvertedJQLQueries"];
        };
      };
      /** @description Returned if at least one of the queries cannot be converted. For example, the JQL has invalid operators or invalid keywords, or the users in the query cannot be found. */
      400: {
        content: {
          "application/json": string;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Sanitize JQL queries
   * @description Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.
   *
   * For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.
   *
   * Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).
   *
   * Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  sanitiseJqlQueries: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "queries": [
         *     {
         *       "query": "project = 'Sample project'"
         *     },
         *     {
         *       "accountId": "5b10ac8d82e05b22cc7d4ef5",
         *       "query": "project = 'Sample project'"
         *     },
         *     {
         *       "accountId": "cda2aa1395ac195d951b3387",
         *       "query": "project = 'Sample project'"
         *     },
         *     {
         *       "accountId": "5b10ac8d82e05b22cc7d4ef5",
         *       "query": "invalid query"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["JqlQueriesToSanitize"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SanitizedJqlQueries"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all labels
   * @description Returns a [paginated](#pagination) list of labels.
   */
  getAllLabels: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanString"];
        };
      };
    };
  };
  /**
   * Get approximate license count
   * @description Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getApproximateLicenseCount: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["LicenseMetric"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollections"];
        };
      };
      /** @description Returned if the user does not have permission to complete this request. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollections"];
        };
      };
    };
  };
  /**
   * Get approximate application license count
   * @description Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getApproximateApplicationLicenseCount: {
    parameters: {
      path: {
        /** @description The ID of the application, represents a specific version of Jira. */
        applicationKey: "jira-core" | "jira-product-discovery" | "jira-software" | "jira-servicedesk";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["LicenseMetric"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have permission to complete this request. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get my permissions
   * @description Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.
   *
   * The user is reported as having a project permission:
   *
   *  *  in the global context, if the user has the project permission in any project.
   *  *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
   *  *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
   *  *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.
   *
   * This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.
   *
   * For [Jira Service Management project permissions](https://support.atlassian.com/jira-cloud-administration/docs/customize-jira-service-management-permissions/), this will be evaluated similarly to a user in the customer portal. For example, if the BROWSE\_PROJECTS permission is granted to Service Project Customer - Portal Access, any users with access to the customer portal will have the BROWSE\_PROJECTS permission.
   *
   * Global permissions are unaffected by context.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getMyPermissions: {
    parameters: {
      query?: {
        /** @description The key of project. Ignored if `projectId` is provided. */
        projectKey?: string;
        /** @description The ID of project. */
        projectId?: string;
        /** @description The key of the issue. Ignored if `issueId` is provided. */
        issueKey?: string;
        /** @description The ID of the issue. */
        issueId?: string;
        /** @description A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get). */
        permissions?: string;
        projectUuid?: string;
        projectConfigurationUuid?: string;
        /** @description The ID of the comment. */
        commentId?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Permissions"];
        };
      };
      /** @description Returned if `permissions` is empty, contains an invalid key, or does not equal BROWSE\_PROJECTS when commentId is provided. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the project or issue is not found or the user does not have permission to view the project or issue. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get preference
   * @description Returns the value of a preference of the current user.
   *
   * Note that these keys are deprecated:
   *
   *  *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
   *  *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
   *
   * These system preferences keys will be deprecated by 15/07/2024. You can still retrieve these keys, but it will not have any impact on Notification behaviour.
   *
   *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
   *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
   *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
   *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
   *
   * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPreference: {
    parameters: {
      query: {
        /** @description The key of the preference. */
        key: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the key is not provided or not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set preference
   * @description Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
   *
   *  *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
   *  *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
   *  *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
   *  *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
   *  *  *user.notifiy.own.changes* Whether the user gets notified of their own changes.
   *
   * Note that these keys are deprecated:
   *
   *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
   *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
   *
   * These system preferences keys will be deprecated by 15/07/2024. You can still use these keys to create arbitrary preferences, but it will not have any impact on Notification behaviour.
   *
   *  *  *user.notifications.watcher* Whether the user gets notified when they are watcher.
   *  *  *user.notifications.assignee* Whether the user gets notified when they are assignee.
   *  *  *user.notifications.reporter* Whether the user gets notified when they are reporter.
   *  *  *user.notifications.mentions* Whether the user gets notified when they are mentions.
   *
   * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  setPreference: {
    parameters: {
      query: {
        /** @description The key of the preference. The maximum length is 255 characters. */
        key: string;
      };
    };
    /** @description The value of the preference as a plain text string. The maximum length is 255 characters. */
    requestBody: {
      content: {
        "application/json": string;
        "text/plain": string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the key or value is not provided or invalid. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete preference
   * @description Deletes a preference of the user, which restores the default value of system defined settings.
   *
   * Note that these keys are deprecated:
   *
   *  *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
   *  *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
   *
   * Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  removePreference: {
    parameters: {
      query: {
        /** @description The key of the preference. */
        key: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the key is not provided or not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get locale
   * @description Returns the locale for the user.
   *
   * If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getLocale: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Locale"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Set locale
   * @deprecated
   * @description Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
   *
   * Sets the locale of the user. The locale must be one supported by the instance of Jira.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  setLocale: {
    /** @description The locale defined in a LocaleBean. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "locale": "en_US"
         * }
         */
        "application/json": components["schemas"]["Locale"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Delete locale
   * @deprecated
   * @description Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
   *
   * Deletes the locale of the user, which restores the default setting.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  deleteLocale: {
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get current user
   * @description Returns details for the current user.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getCurrentUser: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `groups` Returns all groups, including nested groups, the user belongs to.
         *  *  `applicationRoles` Returns the application roles the user is assigned to.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get notification schemes paginated
   * @description Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
   *
   * *Note that you should allow for events without recipients to appear in responses.*
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
   */
  getNotificationSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of notification schemes IDs to be filtered by */
        id?: string[];
        /** @description The list of projects IDs to be filtered by */
        projectId?: string[];
        /** @description When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false. */
        onlyDefault?: boolean;
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `all` Returns all expandable information
         *  *  `field` Returns information about any custom fields assigned to receive an event
         *  *  `group` Returns information about any groups assigned to receive an event
         *  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
         *  *  `projectRole` Returns information about any project roles assigned to receive an event
         *  *  `user` Returns information about any users assigned to receive an event
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanNotificationScheme"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create notification scheme
   * @description Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createNotificationScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My new scheme description",
         *   "name": "My new notification scheme",
         *   "notificationSchemeEvents": [
         *     {
         *       "event": {
         *         "id": "1"
         *       },
         *       "notifications": [
         *         {
         *           "notificationType": "Group",
         *           "parameter": "jira-administrators"
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["CreateNotificationSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["NotificationSchemeId"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get projects using notification schemes paginated
   * @description Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getNotificationSchemeToProjectMappings: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of notifications scheme IDs to be filtered out */
        notificationSchemeId?: string[];
        /** @description The list of project IDs to be filtered out */
        projectId?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanNotificationSchemeAndProjectMappingJsonBean"];
        };
      };
      /** @description Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get notification scheme
   * @description Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
   */
  getNotificationScheme: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `all` Returns all expandable information
         *  *  `field` Returns information about any custom fields assigned to receive an event
         *  *  `group` Returns information about any groups assigned to receive an event
         *  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
         *  *  `projectRole` Returns information about any project roles assigned to receive an event
         *  *  `user` Returns information about any users assigned to receive an event
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the notification scheme is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update notification scheme
   * @description Updates a notification scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateNotificationScheme: {
    parameters: {
      path: {
        /** @description The ID of the notification scheme. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My updated notification scheme description",
         *   "name": "My updated notification scheme"
         * }
         */
        "application/json": components["schemas"]["UpdateNotificationSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the notification scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Add notifications to notification scheme
   * @description Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
   *
   * *Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addNotifications: {
    parameters: {
      path: {
        /** @description The ID of the notification scheme. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "notificationSchemeEvents": [
         *     {
         *       "event": {
         *         "id": "1"
         *       },
         *       "notifications": [
         *         {
         *           "notificationType": "Group",
         *           "parameter": "jira-administrators"
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["AddNotificationsDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the notification scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete notification scheme
   * @description Deletes a notification scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteNotificationScheme: {
    parameters: {
      path: {
        /** @description The ID of the notification scheme. */
        notificationSchemeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the notification scheme isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Remove notification from notification scheme
   * @description Removes a notification from a notification scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeNotificationFromNotificationScheme: {
    parameters: {
      path: {
        /** @description The ID of the notification scheme. */
        notificationSchemeId: string;
        /** @description The ID of the notification. */
        notificationId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if either the notification scheme or notification isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all permissions
   * @description Returns all permissions, including:
   *
   *  *  global permissions.
   *  *  project permissions.
   *  *  global permissions added by plugins.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllPermissions: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Permissions"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get bulk permissions
   * @description Returns:
   *
   *  *  for a list of global permissions, the global permissions granted to a user.
   *  *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.
   *
   * If no account ID is provided, the operation returns details for the logged in user.
   *
   * Note that:
   *
   *  *  Invalid project and issue IDs are ignored.
   *  *  A maximum of 1000 projects and 1000 issues can be checked.
   *  *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
   *  *  Empty strings in `projectPermissions.permissions` are ignored.
   *
   * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
   *
   *  *  **Classic**: `read:jira-work`
   *  *  **Granular**: `read:permission:jira`
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
   */
  getBulkPermissions: {
    /** @description Details of the permissions to check. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "accountId": "5b10a2844c20165700ede21g",
         *   "globalPermissions": [
         *     "ADMINISTER"
         *   ],
         *   "projectPermissions": [
         *     {
         *       "issues": [
         *         10010,
         *         10011,
         *         10012,
         *         10013,
         *         10014
         *       ],
         *       "permissions": [
         *         "EDIT_ISSUES"
         *       ],
         *       "projects": [
         *         10001
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["BulkPermissionsRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["BulkPermissionGrants"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `projectPermissions` is provided without at least one project permission being provided.
       *  *  an invalid global permission is provided in the global permissions list.
       *  *  an invalid project permission is provided in the project permissions list.
       *  *  more than 1000 valid project IDs or more than 1000 valid issue IDs are provided.
       *  *  an invalid account ID is provided.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get permitted projects
   * @description Returns all the projects where the user is granted a list of project permissions.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getPermittedProjects: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PermissionsKeysBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermittedProjects"];
        };
      };
      /** @description Returned if a project permission is not found. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get all permission schemes
   * @description Returns all permission schemes.
   *
   * ### About permission schemes and grants ###
   *
   * A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
   *
   * #### Holder object ####
   *
   * The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`.
   *
   * The `holder` object is defined by the following properties:
   *
   *  *  `type` Identifies the user or group (see the list of types below).
   *  *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
   *  *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`
   *
   * The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):
   *
   *  *  `anyone` Grant for anonymous users.
   *  *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
   *  *  `assignee` Grant for the user currently assigned to an issue.
   *  *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
   *  *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
   *  *  `projectLead` Grant for a project lead.
   *  *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
   *  *  `reporter` Grant for the user who reported the issue.
   *  *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
   *  *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
   *  *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
   *
   * #### Built-in permissions ####
   *
   * The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
   *
   * **Project permissions**
   *
   *  *  `ADMINISTER_PROJECTS`
   *  *  `BROWSE_PROJECTS`
   *  *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
   *  *  `SERVICEDESK_AGENT` (Jira Service Desk only)
   *  *  `VIEW_DEV_TOOLS` (Jira Software only)
   *  *  `VIEW_READONLY_WORKFLOW`
   *
   * **Issue permissions**
   *
   *  *  `ASSIGNABLE_USER`
   *  *  `ASSIGN_ISSUES`
   *  *  `CLOSE_ISSUES`
   *  *  `CREATE_ISSUES`
   *  *  `DELETE_ISSUES`
   *  *  `EDIT_ISSUES`
   *  *  `LINK_ISSUES`
   *  *  `MODIFY_REPORTER`
   *  *  `MOVE_ISSUES`
   *  *  `RESOLVE_ISSUES`
   *  *  `SCHEDULE_ISSUES`
   *  *  `SET_ISSUE_SECURITY`
   *  *  `TRANSITION_ISSUES`
   *
   * **Voters and watchers permissions**
   *
   *  *  `MANAGE_WATCHERS`
   *  *  `VIEW_VOTERS_AND_WATCHERS`
   *
   * **Comments permissions**
   *
   *  *  `ADD_COMMENTS`
   *  *  `DELETE_ALL_COMMENTS`
   *  *  `DELETE_OWN_COMMENTS`
   *  *  `EDIT_ALL_COMMENTS`
   *  *  `EDIT_OWN_COMMENTS`
   *
   * **Attachments permissions**
   *
   *  *  `CREATE_ATTACHMENTS`
   *  *  `DELETE_ALL_ATTACHMENTS`
   *  *  `DELETE_OWN_ATTACHMENTS`
   *
   * **Time tracking permissions**
   *
   *  *  `DELETE_ALL_WORKLOGS`
   *  *  `DELETE_OWN_WORKLOGS`
   *  *  `EDIT_ALL_WORKLOGS`
   *  *  `EDIT_OWN_WORKLOGS`
   *  *  `WORK_ON_ISSUES`
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getAllPermissionSchemes: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionSchemes"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create permission scheme
   * @description Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createPermissionScheme: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
    };
    /** @description The permission scheme to create. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "description",
         *   "name": "Example permission scheme",
         *   "permissions": [
         *     {
         *       "holder": {
         *         "parameter": "jira-core-users",
         *         "type": "group",
         *         "value": "ca85fac0-d974-40ca-a615-7af99c48d24f"
         *       },
         *       "permission": "ADMINISTER_PROJECTS"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["PermissionScheme"];
      };
    };
    responses: {
      /** @description Returned if the permission scheme is created. */
      201: {
        content: {
          "application/json": components["schemas"]["PermissionScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or the feature is not available in the Jira plan. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get permission scheme
   * @description Returns a permission scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPermissionScheme: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the permission scheme to return. */
        schemeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the permission scheme is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update permission scheme
   * @description Updates a permission scheme. Below are some important things to note when using this resource:
   *
   *  *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
   *  *  If you want to update only the name and description, then do not send a permissions list in the request.
   *  *  Sending an empty list will remove all permission grants from the permission scheme.
   *
   * If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
   *
   * See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updatePermissionScheme: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the permission scheme to update. */
        schemeId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "description",
         *   "name": "Example permission scheme",
         *   "permissions": [
         *     {
         *       "holder": {
         *         "parameter": "jira-core-users",
         *         "type": "group",
         *         "value": "ca85fac0-d974-40ca-a615-7af99c48d24f"
         *       },
         *       "permission": "ADMINISTER_PROJECTS"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["PermissionScheme"];
      };
    };
    responses: {
      /** @description Returned if the scheme is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the user does not have the necessary permission to update permission schemes.
       *  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.
       */
      403: {
        content: never;
      };
      /** @description Returned if the permission scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete permission scheme
   * @description Deletes a permission scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deletePermissionScheme: {
    parameters: {
      path: {
        /** @description The ID of the permission scheme being deleted. */
        schemeId: number;
      };
    };
    responses: {
      /** @description Returned if the permission scheme is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the permission scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get permission scheme grants
   * @description Returns all permission grants for a permission scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPermissionSchemeGrants: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
         *
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `user` Returns information about the user who is granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `all` Returns all expandable information.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the permission scheme. */
        schemeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrants"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the permission schemes is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create permission grant
   * @description Creates a permission grant in a permission scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createPermissionGrant: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
         *
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `user` Returns information about the user who is granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `all` Returns all expandable information.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the permission scheme in which to create a new permission grant. */
        schemeId: number;
      };
    };
    /** @description The permission grant to create. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "holder": {
         *     "parameter": "jira-core-users",
         *     "type": "group",
         *     "value": "ca85fac0-d974-40ca-a615-7af99c48d24f"
         *   },
         *   "permission": "ADMINISTER_PROJECTS"
         * }
         */
        "application/json": components["schemas"]["PermissionGrant"];
      };
    };
    responses: {
      /** @description Returned if the scheme permission is created. */
      201: {
        content: {
          "application/json": components["schemas"]["PermissionGrant"];
        };
      };
      /** @description Returned if the value for expand is invalid or the same permission grant is present. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get permission scheme grant
   * @description Returns a permission grant.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPermissionSchemeGrant: {
    parameters: {
      query?: {
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the permission scheme. */
        schemeId: number;
        /** @description The ID of the permission grant. */
        permissionId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionGrant"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete permission scheme grant
   * @description Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deletePermissionSchemeEntity: {
    parameters: {
      path: {
        /** @description The ID of the permission scheme to delete the permission grant from. */
        schemeId: number;
        /** @description The ID of the permission grant to delete. */
        permissionId: number;
      };
    };
    responses: {
      /** @description Returned if the permission grant is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if permission grant with the provided ID is not found. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get priorities
   * @deprecated
   * @description Returns the list of all issue priorities.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPriorities: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Priority"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create priority
   * @description Creates an issue priority.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createPriority: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My priority description",
         *   "iconUrl": "images/icons/priorities/major.png",
         *   "name": "My new priority",
         *   "statusColor": "#ABCDEF"
         * }
         */
        "application/json": components["schemas"]["CreatePriorityDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["PriorityId"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Set default priority
   * @description Sets default issue priority.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setDefaultPriority: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": "3"
         * }
         */
        "application/json": components["schemas"]["SetDefaultPriorityRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue priority isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Move priorities
   * @description Changes the order of issue priorities.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  movePriorities: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "after": "10003",
         *   "ids": [
         *     "10004",
         *     "10005"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ReorderIssuePriorities"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue priority isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Search priorities
   * @deprecated
   * @description Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
   *
   *  *  a list of priority IDs. Any invalid priority IDs are ignored.
   *  *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
   *  *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  searchPriorities: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`. */
        id?: string[];
        /** @description The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&projectId=10111`. */
        projectId?: string[];
        /** @description The name of priority to search for. */
        priorityName?: string;
        /** @description Whether only the default priority is returned. */
        onlyDefault?: boolean;
        /** @description Use `schemes` to return the associated priority schemes for each priority. Limited to returning first 15 priority schemes per priority. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanPriority"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get priority
   * @description Returns an issue priority.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPriority: {
    parameters: {
      path: {
        /** @description The ID of the issue priority. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Priority"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the issue priority isn't found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update priority
   * @description Updates an issue priority.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updatePriority: {
    parameters: {
      path: {
        /** @description The ID of the issue priority. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My updated priority description",
         *   "iconUrl": "images/icons/priorities/minor.png",
         *   "name": "My updated priority",
         *   "statusColor": "#123456"
         * }
         */
        "application/json": components["schemas"]["UpdatePriorityDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue priority isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete priority
   * @description Deletes an issue priority.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deletePriority: {
    parameters: {
      path: {
        /** @description The ID of the issue priority. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue priority isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a task to delete the issue priority is already running. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get priority schemes
   * @description Returns a [paginated](#pagination) list of priority schemes.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPrioritySchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description A set of priority IDs to filter by. To include multiple IDs, provide an ampersand-separated list. For example, `priorityId=10000&priorityId=10001`. */
        priorityId?: number[];
        /** @description A set of priority scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `schemeId=10000&schemeId=10001`. */
        schemeId?: number[];
        /** @description The name of scheme to search for. */
        schemeName?: string;
        /** @description Whether only the default priority is returned. */
        onlyDefault?: boolean;
        /** @description The ordering to return the priority schemes by. */
        orderBy?: "name" | "+name" | "-name";
        /** @description A comma separated list of additional information to return. "priorities" will return priorities associated with the priority scheme. "projects" will return projects associated with the priority scheme. `expand=priorities,projects`. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanPrioritySchemeWithPaginatedPrioritiesAndProjects"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create priority scheme
   * @description Creates a new priority scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createPriorityScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultPriorityId": 10001,
         *   "description": "My priority scheme description",
         *   "mappings": {
         *     "in": {
         *       "10002": 10000,
         *       "10005": 10001,
         *       "10006": 10001,
         *       "10008": 10003
         *     },
         *     "out": {}
         *   },
         *   "name": "My new priority scheme",
         *   "priorityIds": [
         *     10000,
         *     10001,
         *     10003
         *   ],
         *   "projectIds": [
         *     10005,
         *     10006,
         *     10007
         *   ]
         * }
         */
        "application/json": components["schemas"]["CreatePrioritySchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is completed. */
      201: {
        content: {
          "application/json": components["schemas"]["PrioritySchemeId"];
        };
      };
      /** @description Returned if the request is accepted. */
      202: {
        content: {
          "application/json": components["schemas"]["PrioritySchemeId"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permissions. */
      403: {
        content: never;
      };
      /** @description Returned if an action with this priority scheme is still in progress. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Suggested priorities for mappings
   * @description Returns a [paginated](#pagination) list of priorities that would require mapping, given a change in priorities or projects associated with a priority scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  suggestedPrioritiesForMappings: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "maxResults": 50,
         *   "priorities": {
         *     "add": [
         *       10001,
         *       10002
         *     ],
         *     "remove": [
         *       10003
         *     ]
         *   },
         *   "projects": {
         *     "add": [
         *       10021
         *     ]
         *   },
         *   "schemeId": 10005,
         *   "startAt": 0
         * }
         */
        "application/json": components["schemas"]["SuggestedMappingsRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanPriorityWithSequence"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get available priorities by priority scheme
   * @description Returns a [paginated](#pagination) list of priorities available for adding to a priority scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getAvailablePrioritiesByPriorityScheme: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The string to query priorities on by name. */
        query?: string;
        /** @description The priority scheme ID. */
        schemeId: string;
        /** @description A list of priority IDs to exclude from the results. */
        exclude?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanPriorityWithSequence"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Update priority scheme
   * @description Updates a priority scheme. This includes its details, the lists of priorities and projects in it
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updatePriorityScheme: {
    parameters: {
      path: {
        /** @description The ID of the priority scheme. */
        schemeId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultPriorityId": 10001,
         *   "description": "My priority scheme description",
         *   "mappings": {
         *     "in": {
         *       "10005": 10002
         *     },
         *     "out": {
         *       "10004": 10001
         *     }
         *   },
         *   "name": "My new priority scheme",
         *   "priorities": {
         *     "add": {
         *       "ids": [
         *         10001,
         *         10002
         *       ]
         *     },
         *     "remove": {
         *       "ids": [
         *         10003,
         *         10004
         *       ],
         *       "mappings": [
         *         {
         *           "in": {
         *             "10001": 10011
         *           },
         *           "out": {
         *             "10012": 10002
         *           }
         *         }
         *       ]
         *     }
         *   },
         *   "projects": {
         *     "add": {
         *       "ids": [
         *         10101,
         *         10102
         *       ]
         *     },
         *     "remove": {
         *       "ids": [
         *         10103,
         *         10104
         *       ]
         *     }
         *   }
         * }
         */
        "application/json": components["schemas"]["UpdatePrioritySchemeRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is accepted. */
      202: {
        content: {
          "application/json": components["schemas"]["UpdatePrioritySchemeResponseBean"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permissions. */
      403: {
        content: never;
      };
      /** @description Returned if an action with this priority scheme is still in progress. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Delete priority scheme
   * @description Deletes a priority scheme.
   *
   * This operation is only available for priority schemes without any associated projects. Any associated projects must be removed from the priority scheme before this operation can be performed.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deletePriorityScheme: {
    parameters: {
      path: {
        /** @description The priority scheme ID. */
        schemeId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get priorities by priority scheme
   * @description Returns a [paginated](#pagination) list of priorities by scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getPrioritiesByPriorityScheme: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
      };
      path: {
        /** @description The priority scheme ID. */
        schemeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanPriorityWithSequence"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get projects by priority scheme
   * @description Returns a [paginated](#pagination) list of projects by scheme.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getProjectsByPriorityScheme: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The project IDs to filter by. For example, `projectId=10000&projectId=10001`. */
        projectId?: number[];
        /** @description The string to query projects on by name. */
        query?: string;
      };
      path: {
        /** @description The priority scheme ID. */
        schemeId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanProject"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get all projects
   * @deprecated
   * @description Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getAllProjects: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
         *
         *  *  `description` Returns the project description.
         *  *  `issueTypes` Returns all issue types associated with the project.
         *  *  `lead` Returns information about the project lead.
         *  *  `projectKeys` Returns all project keys associated with the project.
         */
        expand?: string;
        /** @description Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. */
        recent?: number;
        /** @description A list of project properties to return for the project. This parameter accepts a comma-separated list. */
        properties?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create project
   * @description Creates a project based on a project type template, as shown in the following table:
   *
   * | Project Type Key | Project Template Key |
   * |--|--|
   * | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |
   * | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-blank-project-business`, `com.atlassian.servicedesk:simplified-blank-project-it`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |
   * | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |
   * The project types are available according to the installed Jira features as follows:
   *
   *  *  Jira Core, the default, enables `business` projects.
   *  *  Jira Service Management enables `service_desk` projects.
   *  *  Jira Software enables `software` projects.
   *
   * To determine which features are installed, go to **Jira settings** > **Apps** > **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** > **Apps** > **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createProject: {
    /** @description The JSON representation of the project being created. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "assigneeType": "PROJECT_LEAD",
         *   "avatarId": 10200,
         *   "categoryId": 10120,
         *   "description": "Cloud migration initiative",
         *   "issueSecurityScheme": 10001,
         *   "key": "EX",
         *   "leadAccountId": "5b10a0effa615349cb016cd8",
         *   "name": "Example",
         *   "notificationScheme": 10021,
         *   "permissionScheme": 10011,
         *   "projectTemplateKey": "com.atlassian.jira-core-project-templates:jira-core-simplified-process-control",
         *   "projectTypeKey": "business",
         *   "url": "http://atlassian.com"
         * }
         */
        "application/json": components["schemas"]["CreateProjectDetails"];
      };
    };
    responses: {
      /** @description Returned if the project is created. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectIdentifiers"];
        };
      };
      /** @description Returned if the request is not valid and the project could not be created. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to create projects. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get recent projects
   * @description Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
   *
   *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getRecent: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
         *
         *  *  `description` Returns the project description.
         *  *  `projectKeys` Returns all project keys associated with a project.
         *  *  `lead` Returns information about the project lead.
         *  *  `issueTypes` Returns all issue types associated with the project.
         *  *  `url` Returns the URL associated with the project.
         *  *  `permissions` Returns the permissions associated with the project.
         *  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
         *  *  `*` Returns the project with all available expand options.
         */
        expand?: string;
        /** @description EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. */
        properties?: components["schemas"]["StringList"][];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get projects paginated
   * @description Returns a [paginated](#pagination) list of projects visible to the user.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Projects are returned only where the user has one of:
   *
   *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  searchProjects: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description [Order](#ordering) the results by a field.
         *
         *  *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
         *  *  `issueCount` Sorts by the total number of issues in each project.
         *  *  `key` Sorts by project key.
         *  *  `lastIssueUpdatedTime` Sorts by the last issue update time.
         *  *  `name` Sorts by project name.
         *  *  `owner` Sorts by project lead.
         *  *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
         *  *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
         */
        orderBy?: "category" | "-category" | "+category" | "key" | "-key" | "+key" | "name" | "-name" | "+name" | "owner" | "-owner" | "+owner" | "issueCount" | "-issueCount" | "+issueCount" | "lastIssueUpdatedDate" | "-lastIssueUpdatedDate" | "+lastIssueUpdatedDate" | "archivedDate" | "+archivedDate" | "-archivedDate" | "deletedDate" | "+deletedDate" | "-deletedDate";
        /** @description The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided. */
        id?: number[];
        /** @description The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided. */
        keys?: string[];
        /** @description Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive). */
        query?: string;
        /** @description Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`. */
        typeKey?: string;
        /** @description The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. */
        categoryId?: number;
        /**
         * @description Filter results by projects for which the user can:
         *
         *  *  `view` the project, meaning that they have one of the following permissions:
         *
         *      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *  *  `edit` the project, meaning that they have one of the following permissions:
         *
         *      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
         *      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
         *  *  `create` the project, meaning that they have the *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue is created.
         */
        action?: "view" | "browse" | "edit" | "create";
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
         *
         *  *  `description` Returns the project description.
         *  *  `projectKeys` Returns all project keys associated with a project.
         *  *  `lead` Returns information about the project lead.
         *  *  `issueTypes` Returns all issue types associated with the project.
         *  *  `url` Returns the URL associated with the project.
         *  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
         */
        expand?: string;
        /**
         * @description EXPERIMENTAL. Filter results by project status:
         *
         *  *  `live` Search live projects.
         *  *  `archived` Search archived projects.
         *  *  `deleted` Search deleted projects, those in the recycle bin.
         */
        status?: ("live" | "archived" | "deleted")[];
        /** @description EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. */
        properties?: components["schemas"]["StringList"][];
        /** @description EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`. */
        propertyQuery?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanProject"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if no projects matching the search criteria are found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all project types
   * @description Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAllProjectTypes: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectType"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get licensed project types
   * @description Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
   */
  getAllAccessibleProjectTypes: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectType"][];
        };
      };
    };
  };
  /**
   * Get project type by key
   * @description Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getProjectTypeByKey: {
    parameters: {
      path: {
        /** @description The key of the project type. */
        projectTypeKey: "software" | "service_desk" | "business" | "product_discovery";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectType"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the project type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get accessible project type by key
   * @description Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getAccessibleProjectTypeByKey: {
    parameters: {
      path: {
        /** @description The key of the project type. */
        projectTypeKey: "software" | "service_desk" | "business" | "product_discovery";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectType"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project type is not accessible to the user. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project
   * @description Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProject: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
         *
         *  *  `description` The project description.
         *  *  `issueTypes` The issue types associated with the project.
         *  *  `lead` The project lead.
         *  *  `projectKeys` All project keys associated with the project.
         *  *  `issueTypeHierarchy` The project issue type hierarchy.
         */
        expand?: string;
        /** @description A list of project properties to return for the project. This parameter accepts a comma-separated list. */
        properties?: string[];
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update project
   * @description Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
   *
   * All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
   */
  updateProject: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
         *
         *  *  `description` The project description.
         *  *  `issueTypes` The issue types associated with the project.
         *  *  `lead` The project lead.
         *  *  `projectKeys` All project keys associated with the project.
         */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    /** @description The project details to be updated. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "assigneeType": "PROJECT_LEAD",
         *   "avatarId": 10200,
         *   "categoryId": 10120,
         *   "description": "Cloud migration initiative",
         *   "issueSecurityScheme": 10001,
         *   "key": "EX",
         *   "leadAccountId": "5b10a0effa615349cb016cd8",
         *   "name": "Example",
         *   "notificationScheme": 10021,
         *   "permissionScheme": 10011,
         *   "url": "http://atlassian.com"
         * }
         */
        "application/json": components["schemas"]["UpdateProjectDetails"];
      };
    };
    responses: {
      /** @description Returned if the project is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the user does not have the necessary permission to update project details.
       *  *  the permission scheme is being changed and the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be changed on free plans.
       */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project
   * @description Deletes a project.
   *
   * You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteProject: {
    parameters: {
      query?: {
        /** @description Whether this project is placed in the Jira recycle bin where it will be available for restoration. */
        enableUndo?: boolean;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the project is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to delete it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Archive project
   * @description Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  archiveProject: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set project avatar
   * @description Sets the avatar displayed for a project.
   *
   * Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  updateProjectAvatar: {
    parameters: {
      path: {
        /** @description The ID or (case-sensitive) key of the project. */
        projectIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": "10010"
         * }
         */
        "application/json": components["schemas"]["Avatar"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project or avatar is not found or the user does not have permission to view the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project avatar
   * @description Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  deleteProjectAvatar: {
    parameters: {
      path: {
        /** @description The project ID or (case-sensitive) key. */
        projectIdOrKey: string;
        /** @description The ID of the avatar. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the avatar is a system avatar or the user does not have permission to administer the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project or avatar is not found or the user does not have permission to view the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Load project avatar
   * @description Loads an avatar for a project.
   *
   * Specify the avatar's local file location in the body of the request. Also, include the following headers:
   *
   *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
   *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
   *
   * For example:
   * `curl --request POST `
   *
   * `--user email@example.com:<api_token> `
   *
   * `--header 'X-Atlassian-Token: no-check' `
   *
   * `--header 'Content-Type: image/< image_type>' `
   *
   * `--data-binary "<@/path/to/file/with/your/avatar>" `
   *
   * `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
   *
   * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
   *
   * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
   *
   * After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
   *
   * **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  createProjectAvatar: {
    parameters: {
      query?: {
        /** @description The X coordinate of the top-left corner of the crop region. */
        x?: number;
        /** @description The Y coordinate of the top-left corner of the crop region. */
        y?: number;
        /** @description The length of each side of the crop region. */
        size?: number;
      };
      path: {
        /** @description The ID or (case-sensitive) key of the project. */
        projectIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        "*/*": unknown;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Avatar"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  an image isn't included in the request.
       *  *  the image type is unsupported.
       *  *  the crop parameters extend the crop area beyond the edge of the image.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer the project or an anonymous call is made to the operation. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all project avatars
   * @description Returns all project avatars, grouped by system and custom avatars.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getAllProjectAvatars: {
    parameters: {
      path: {
        /** @description The ID or (case-sensitive) key of the project. */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectAvatars"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get the default data classification level of a project
   * @description Returns the default data classification for a project.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getDefaultProjectClassification: {
    parameters: {
      path: {
        /** @description The project ID or project key (case-sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update the default data classification level of a project
   * @description Updates the default data classification level for a project.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateDefaultProjectClassification: {
    parameters: {
      path: {
        /** @description The project ID or project key (case-sensitive). */
        projectIdOrKey: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": "ari:cloud:platform::classification-tag/dec24c48-5073-4c25-8fef-9d81a992c30c"
         * }
         */
        "application/json": components["schemas"]["UpdateDefaultProjectClassificationBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Remove the default data classification level from a project
   * @description Remove the default data classification level for a project.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   *  *  *Administer jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeDefaultProjectClassification: {
    parameters: {
      path: {
        /** @description The project ID or project key (case-sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project components paginated
   * @description Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
   *
   * If your project uses Compass components, this API will return a list of Compass components that are linked to issues in that project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectComponentsPaginated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `description` Sorts by the component description.
         *  *  `issueCount` Sorts by the count of issues associated with the component.
         *  *  `lead` Sorts by the user key of the component's project lead.
         *  *  `name` Sorts by component name.
         */
        orderBy?: "description" | "-description" | "+description" | "issueCount" | "-issueCount" | "+issueCount" | "lead" | "-lead" | "+lead" | "name" | "-name" | "+name";
        /** @description The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`. */
        componentSource?: "jira" | "compass" | "auto";
        /** @description Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive). */
        query?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanComponentWithIssueCount"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project components
   * @description Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
   *
   * If your project uses Compass components, this API will return a paginated list of Compass components that are linked to issues in that project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectComponents: {
    parameters: {
      query?: {
        /** @description The source of the components to return. Can be `jira` (default), `compass` or `auto`. When `auto` is specified, the API will return connected Compass components if the project is opted into Compass, otherwise it will return Jira components. Defaults to `jira`. */
        componentSource?: "jira" | "compass" | "auto";
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectComponent"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project asynchronously
   * @description Deletes a project asynchronously.
   *
   * This operation is:
   *
   *  *  transactional, that is, if part of the delete fails the project is not deleted.
   *  *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteProjectAsynchronously: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project features
   * @description Returns the list of features for a project.
   */
  getFeaturesForProject: {
    parameters: {
      path: {
        /** @description The ID or (case-sensitive) key of the project. */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ContainerForProjectFeatures"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set project feature state
   * @description Sets the state of a project feature.
   */
  toggleFeatureForProject: {
    parameters: {
      path: {
        /** @description The ID or (case-sensitive) key of the project. */
        projectIdOrKey: string;
        /** @description The key of the feature. */
        featureKey: string;
      };
    };
    /** @description Details of the feature state change. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "state": "ENABLED"
         * }
         */
        "application/json": components["schemas"]["ProjectFeatureState"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ContainerForProjectFeatures"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project or project feature is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project property keys
   * @description Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectPropertyKeys: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to view the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project property
   * @description Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
   */
  getProjectProperty: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to view the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project or property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set project property
   * @description Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
   */
  setProjectProperty: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The key of the project property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "number": 5,
         *   "string": "string-value"
         * }
         */
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the project property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the project property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the project key or id is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project property
   * @description Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
   */
  deleteProjectProperty: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the project property is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project or property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Restore deleted or archived project
   * @description Restores a project that has been archived or placed in the Jira recycle bin.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
   */
  restore: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project roles for project
   * @description Returns a list of [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) for the project returning the name and self URL for each role.
   *
   * Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectRoles: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing or if the user lacks administrative permissions for the project. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or or if the user does not have administrative permissions for the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project role for project
   * @description Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
   *
   * To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectRole: {
    parameters: {
      query?: {
        /** @description Exclude inactive users. */
        excludeInactiveUsers?: boolean;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project or project role is not found.
       *  *  the user does not have administrative permission.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set actors for project role
   * @description Sets the actors for a project role for a project, replacing all existing actors.
   *
   * To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
   *
   * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setActors: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    /** @description The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "categorisedActors": {
         *     "atlassian-group-role-actor-id": [
         *       "952d12c3-5b5b-4d04-bb32-44d383afc4b2"
         *     ],
         *     "atlassian-user-role-actor": [
         *       "12345678-9abc-def1-2345-6789abcdef12"
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["ProjectRoleActorsUpdateBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. The complete list of actors for the project is returned. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project is not found.
       *  *  a user or group is not found.
       *  *  a group or user is not active.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add actors to project role
   * @description Adds actors to a project role for the project.
   *
   * To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addActorUsers: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    /** @description The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "groupId": [
         *     "952d12c3-5b5b-4d04-bb32-44d383afc4b2"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ActorsMap"];
      };
    };
    responses: {
      /**
       * @description Returned if the request is successful. The complete list of actors for the project is returned.
       *
       * For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.
       */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project is not found.
       *  *  the user or group is not found.
       *  *  the group or user is not active.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete actors from project role
   * @description Deletes actors from a project role for the project.
   *
   * To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteActor: {
    parameters: {
      query?: {
        /** @description The user account ID of the user to remove from the project role. */
        user?: string;
        /** @description The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */
        group?: string;
        /** @description The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter. */
        groupId?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project or project role is not found.
       *  *  the calling user does not have administrative permission.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project role details
   * @description Returns all [project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) and the details for each role. Note that the list of project roles is common to all projects.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectRoleDetails: {
    parameters: {
      query?: {
        /** @description Whether the roles should be filtered to include only those the user is assigned to. */
        currentMember?: boolean;
        excludeConnectAddons?: boolean;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRoleDetails"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or if the user does not have the necessary permissions for the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all statuses for project
   * @description Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getAllStatuses: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeWithStatus"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project versions paginated
   * @description Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectVersionsPaginated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `description` Sorts by version description.
         *  *  `name` Sorts by version name.
         *  *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
         *  *  `sequence` Sorts by the order of appearance in the user interface.
         *  *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
         */
        orderBy?: "description" | "-description" | "+description" | "name" | "-name" | "+name" | "releaseDate" | "-releaseDate" | "+releaseDate" | "sequence" | "-sequence" | "+sequence" | "startDate" | "-startDate" | "+startDate";
        /** @description Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive). */
        query?: string;
        /** @description A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`. */
        status?: string;
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `issuesstatus` Returns the number of issues in each status category for each version.
         *  *  `operations` Returns actions that can be performed on the specified version.
         *  *  `driver` Returns the Atlassian account ID of the version driver.
         *  *  `approvers` Returns a list containing the approvers for this version.
         */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanVersion"];
        };
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project versions
   * @description Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectVersions: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version. */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectIdOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Version"][];
        };
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project's sender email
   * @description Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getProjectEmail: {
    parameters: {
      path: {
        /** @description The project ID. */
        projectId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectEmailAddress"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to read project. */
      403: {
        content: never;
      };
      /** @description Returned if the project or project's sender email address is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set project's sender email
   * @description Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
   *
   * If `emailAddress` is an empty string, the default email address is restored.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  updateProjectEmail: {
    parameters: {
      path: {
        /** @description The project ID. */
        projectId: number;
      };
    };
    /** @description The project's sender email address to be set. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "emailAddress": "jira@example.atlassian.net"
         * }
         */
        "application/json": components["schemas"]["ProjectEmailAddress"];
      };
    };
    responses: {
      /** @description Returned if the project's sender email address is successfully set. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid, if the email address is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to administer the project. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project issue type hierarchy
   * @description Get the issue type hierarchy for a next-gen project.
   *
   * The issue type hierarchy for a project consists of:
   *
   *  *  *Epic* at level 1 (optional).
   *  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
   *  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
   */
  getHierarchy: {
    parameters: {
      path: {
        /** @description The ID of the project. */
        projectId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectIssueTypeHierarchy"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project issue security scheme
   * @description Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  getProjectIssueSecurityScheme: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectKeyOrId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is visible to the user but the user doesn't have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project notification scheme
   * @description Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  getNotificationSchemeForProject: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `all` Returns all expandable information
         *  *  `field` Returns information about any custom fields assigned to receive an event
         *  *  `group` Returns information about any groups assigned to receive an event
         *  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
         *  *  `projectRole` Returns information about any project roles assigned to receive an event
         *  *  `user` Returns information about any users assigned to receive an event
         */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectKeyOrId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationScheme"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project is not found or the user is not an administrator. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get assigned permission scheme
   * @description Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
   */
  getAssignedPermissionScheme: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectKeyOrId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have permission to view the project's configuration. */
      403: {
        content: never;
      };
      /** @description Returned if the project is not found or the user does not have permission to view the project. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Assign permission scheme
   * @description Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
   */
  assignPermissionScheme: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
         *
         *  *  `all` Returns all expandable information.
         *  *  `field` Returns information about the custom field granted the permission.
         *  *  `group` Returns information about the group that is granted the permission.
         *  *  `permissions` Returns all permission grants for each permission scheme.
         *  *  `projectRole` Returns information about the project role granted the permission.
         *  *  `user` Returns information about the user who is granted the permission.
         */
        expand?: string;
      };
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectKeyOrId: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": 10000
         * }
         */
        "application/json": components["schemas"]["IdBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PermissionScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the user does not have the necessary permission to edit the project's configuration.
       *  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be assigned to projects on free plans.
       */
      403: {
        content: never;
      };
      /** @description Returned if the project or permission scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get project issue security levels
   * @description Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
   */
  getSecurityLevelsForProject: {
    parameters: {
      path: {
        /** @description The project ID or project key (case sensitive). */
        projectKeyOrId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectIssueSecurityLevels"];
        };
      };
      /** @description Returned if the project is not found or the user does not have permission to view it. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all project categories
   * @description Returns all project categories.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getAllProjectCategories: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectCategory"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create project category
   * @description Creates a project category.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createProjectCategory: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Created Project Category",
         *   "name": "CREATED"
         * }
         */
        "application/json": components["schemas"]["ProjectCategory"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["ProjectCategory"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `name` is not provided or exceeds 255 characters.
       *  *  `description` exceeds 1000 characters.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the project category name is in use. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get project category by ID
   * @description Returns a project category.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getProjectCategoryById: {
    parameters: {
      path: {
        /** @description The ID of the project category. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectCategory"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project category is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update project category
   * @description Updates a project category.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateProjectCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Updated Project Category",
         *   "name": "UPDATED"
         * }
         */
        "application/json": components["schemas"]["ProjectCategory"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["UpdatedProjectCategory"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `name` has been modified and exceeds 255 characters.
       *  *  `description` has been modified and exceeds 1000 characters.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the project category is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project category
   * @description Deletes a project category.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeProjectCategory: {
    parameters: {
      path: {
        /** @description ID of the project category to delete. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the project category is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Validate project key
   * @description Validates a project key by confirming the key is a valid string and not in use.
   *
   * **[Permissions](#permissions) required:** None.
   */
  validateProjectKey: {
    parameters: {
      query?: {
        /** @description The project key. */
        key?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get valid project key
   * @description Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getValidProjectKey: {
    parameters: {
      query?: {
        /** @description The project key. */
        key?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get valid project name
   * @description Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getValidProjectName: {
    parameters: {
      query: {
        /** @description The project name. */
        name: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if a valid project name cannot be generated. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get resolutions
   * @deprecated
   * @description Returns a list of all issue resolution values.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getResolutions: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Resolution"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create resolution
   * @description Creates an issue resolution.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createResolution: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My resolution description",
         *   "name": "My new resolution"
         * }
         */
        "application/json": components["schemas"]["CreateResolutionDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["ResolutionId"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Set default resolution
   * @description Sets default issue resolution.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setDefaultResolution: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "id": "3"
         * }
         */
        "application/json": components["schemas"]["SetDefaultResolutionRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue resolution isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Move resolutions
   * @description Changes the order of issue resolutions.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  moveResolutions: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "after": "10002",
         *   "ids": [
         *     "10000",
         *     "10001"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ReorderIssueResolutionsRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue resolution isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Search resolutions
   * @description Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:
   *
   *  *  a list of resolutions IDs.
   *  *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  searchResolutions: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: string;
        /** @description The maximum number of items to return per page. */
        maxResults?: string;
        /** @description The list of resolutions IDs to be filtered out */
        id?: string[];
        /** @description When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false */
        onlyDefault?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanResolutionJsonBean"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get resolution
   * @description Returns an issue resolution value.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getResolution: {
    parameters: {
      path: {
        /** @description The ID of the issue resolution value. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Resolution"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue resolution value is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update resolution
   * @description Updates an issue resolution.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateResolution: {
    parameters: {
      path: {
        /** @description The ID of the issue resolution. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "My updated resolution description",
         *   "name": "My updated resolution"
         * }
         */
        "application/json": components["schemas"]["UpdateResolutionDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue resolution isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete resolution
   * @description Deletes an issue resolution.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteResolution: {
    parameters: {
      query: {
        /** @description The ID of the issue resolution that will replace the currently selected resolution. */
        replaceWith: string;
      };
      path: {
        /** @description The ID of the issue resolution. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request isn't valid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the issue resolution isn't found. */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if a task to delete the issue resolution is already running. */
      409: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all project roles
   * @description Gets a list of all project roles, complete with project role details and default actors.
   *
   * ### About project roles ###
   *
   * [Project roles](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
   *
   * Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
   *
   * #### Members and actors ####
   *
   * In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
   *
   * Actors may be set as [default members](https://support.atlassian.com/jira-cloud-administration/docs/manage-project-roles/#Specifying-'default-members'-for-a-project-role) of the project role or set at the project level:
   *
   *  *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
   *  *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllProjectRoles: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create project role
   * @description Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
   *
   * *Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*<
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createProjectRole: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A project role that represents developers in a project",
         *   "name": "Developers"
         * }
         */
        "application/json": components["schemas"]["CreateUpdateRoleRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if a project role with the provided name already exists. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get project role by ID
   * @description Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectRoleById: {
    parameters: {
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Fully update project role
   * @description Updates the project role's name and description. You must include both a name and a description in the request.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  fullyUpdateProjectRole: {
    parameters: {
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A project role that represents developers in a project",
         *   "name": "Developers"
         * }
         */
        "application/json": components["schemas"]["CreateUpdateRoleRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is not valid. The `name` cannot be empty or start or end with whitespace. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Partial update project role
   * @description Updates either the project role's name or its description.
   *
   * You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  partialUpdateProjectRole: {
    parameters: {
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "A project role that represents developers in a project",
         *   "name": "Developers"
         * }
         */
        "application/json": components["schemas"]["CreateUpdateRoleRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete project role
   * @description Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteProjectRole: {
    parameters: {
      query?: {
        /** @description The ID of the project role that will replace the one being deleted. */
        swap?: number;
      };
      path: {
        /** @description The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid or if the replacement project role is not found. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role being deleted is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the project role being deleted is in use and a replacement project role is not specified in the request. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get default actors for project role
   * @description Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getProjectRoleActorsForRole: {
    parameters: {
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add default actors to project role
   * @description Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
   *
   * Changing a project role's default actors does not affect project role members for projects already created.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addProjectRoleActorsToRole: {
    parameters: {
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "user": [
         *     "admin"
         *   ]
         * }
         */
        "application/json": components["schemas"]["ActorInputBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete default actors from project role
   * @description Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
   *
   * Changing a project role's default actors does not affect project role members for projects already created.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteProjectRoleActorsFromRole: {
    parameters: {
      query?: {
        /** @description The user account ID of the user to remove as a default actor. */
        user?: string;
        /** @description The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter. */
        groupId?: string;
        /** @description The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */
        group?: string;
      };
      path: {
        /** @description The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRole"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have administrative permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the project role is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get screens
   * @description Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getScreens: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
        /** @description String used to perform a case-insensitive partial match with screen name. */
        queryString?: string;
        /** @description The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`. */
        scope?: ("GLOBAL" | "TEMPLATE" | "PROJECT")[];
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `id` Sorts by screen ID.
         *  *  `name` Sorts by screen name.
         */
        orderBy?: "name" | "-name" | "+name" | "id" | "-id" | "+id";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanScreen"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create screen
   * @description Creates a screen with a default field tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createScreen: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Enables changes to resolution and linked issues.",
         *   "name": "Resolve Security Issue Screen"
         * }
         */
        "application/json": components["schemas"]["ScreenDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Screen"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Add field to default screen
   * @description Adds a field to the default tab of the default screen.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addFieldToDefaultScreen: {
    parameters: {
      path: {
        /** @description The ID of the field. */
        fieldId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the field it not found or the field is already present. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get bulk screen tabs
   * @description Returns the list of tabs for a bulk of screens.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getBulkScreenTabs: {
    parameters: {
      query?: {
        /** @description The list of screen IDs. To include multiple screen IDs, provide an ampersand-separated list. For example, `screenId=10000&screenId=10001`. */
        screenId?: number[];
        /** @description The list of tab IDs. To include multiple tab IDs, provide an ampersand-separated list. For example, `tabId=10000&tabId=10001`. */
        tabId?: number[];
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. The maximum number is 100, */
        maxResult?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the screen ID or the tab ID is empty. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Update screen
   * @description Updates a screen. Only screens used in classic projects can be updated.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateScreen: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Enables changes to resolution and linked issues for accessibility related issues.",
         *   "name": "Resolve Accessibility Issue Screen"
         * }
         */
        "application/json": components["schemas"]["UpdateScreenDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Screen"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the screen is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete screen
   * @description Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.
   *
   * Only screens used in classic projects can be deleted.
   */
  deleteScreen: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the screen is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get available screen fields
   * @description Returns the fields that can be added to a tab on a screen.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAvailableScreenFields: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableField"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all screen tabs
   * @description Returns the list of tabs for a screen.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
   */
  getAllScreenTabs: {
    parameters: {
      query?: {
        /** @description The key of the project. */
        projectKey?: string;
      };
      path: {
        /** @description The ID of the screen. */
        screenId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableTab"][];
        };
      };
      /** @description Returned if the screen ID is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create screen tab
   * @description Creates a tab for a screen.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addScreenTab: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Fields Tab"
         * }
         */
        "application/json": components["schemas"]["ScreenableTab"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableTab"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update screen tab
   * @description Updates the name of a screen tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  renameScreenTab: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScreenableTab"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableTab"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen or screen tab is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete screen tab
   * @description Deletes a screen tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteScreenTab: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen or screen tab is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all screen tab fields
   * @description Returns all fields for a screen tab.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
   */
  getAllScreenTabFields: {
    parameters: {
      query?: {
        /** @description The key of the project. */
        projectKey?: string;
      };
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableField"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen or screen tab is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Add screen tab field
   * @description Adds a field to a screen tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  addScreenTabField: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "fieldId": "summary"
         * }
         */
        "application/json": components["schemas"]["AddFieldBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ScreenableField"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen, screen tab, or field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Remove screen tab field
   * @description Removes a field from a screen tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  removeScreenTabField: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
        /** @description The ID of the field. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen, screen tab, or field is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Move screen tab field
   * @description Moves a screen tab field.
   *
   * If `after` and `position` are provided in the request, `position` is ignored.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  moveScreenTabField: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
        /** @description The ID of the field. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MoveFieldBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen, screen tab, or field is not found or the field can't be moved to the requested position. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Move screen tab
   * @description Moves a screen tab.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  moveScreenTab: {
    parameters: {
      path: {
        /** @description The ID of the screen. */
        screenId: number;
        /** @description The ID of the screen tab. */
        tabId: number;
        /** @description The position of tab. The base index is 0. */
        pos: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the screen or screen tab is not found or the position is invalid. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get screen schemes
   * @description Returns a [paginated](#pagination) list of screen schemes.
   *
   * Only screen schemes used in classic projects are returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getScreenSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */
        id?: number[];
        /** @description Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to. */
        expand?: string;
        /** @description String used to perform a case-insensitive partial match with screen scheme name. */
        queryString?: string;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `id` Sorts by screen scheme ID.
         *  *  `name` Sorts by screen scheme name.
         */
        orderBy?: "name" | "-name" | "+name" | "id" | "-id" | "+id";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanScreenScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create screen scheme
   * @description Creates a screen scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createScreenScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "Manage employee data",
         *   "name": "Employee screen scheme",
         *   "screens": {
         *     "default": 10017,
         *     "edit": 10019,
         *     "view": 10020
         *   }
         * }
         */
        "application/json": components["schemas"]["ScreenSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["ScreenSchemeId"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if a screen used as one of the screen types in the screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Update screen scheme
   * @description Updates a screen scheme. Only screen schemes used in classic projects can be updated.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the screen scheme. */
        screenSchemeId: string;
      };
    };
    /** @description The screen scheme update details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "name": "Employee screen scheme v2",
         *   "screens": {
         *     "create": "10019",
         *     "default": "10018"
         *   }
         * }
         */
        "application/json": components["schemas"]["UpdateScreenSchemeDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the screen scheme or a screen used as one of the screen types is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete screen scheme
   * @description Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.
   *
   * Only screens schemes used in classic projects can be deleted.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteScreenScheme: {
    parameters: {
      path: {
        /** @description The ID of the screen scheme. */
        screenSchemeId: string;
      };
    };
    responses: {
      /** @description Returned if the screen scheme is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the screen scheme is used in an issue type screen scheme. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the screen scheme is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Search for issues using JQL (GET)
   * @description Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
   *
   * If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  searchForIssuesUsingJql: {
    parameters: {
      query?: {
        /**
         * @description The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:
         *
         *  *  If no JQL expression is provided, all issues are returned.
         *  *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
         *  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
         */
        jql?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. */
        maxResults?: number;
        /**
         * @description Determines how to validate the JQL query and treat the validation results. Supported values are:
         *
         *  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
         *  *  `warn` Returns all errors as warnings.
         *  *  `none` No validation is performed.
         *  *  `true` *Deprecated* A legacy synonym for `strict`.
         *  *  `false` *Deprecated* A legacy synonym for `warn`.
         *
         * Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
         */
        validateQuery?: "strict" | "warn" | "none" | "true" | "false";
        /**
         * @description A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `*all` Returns all fields.
         *  *  `*navigable` Returns navigable fields.
         *  *  Any issue field, prefixed with a minus to exclude.
         *
         * Examples:
         *
         *  *  `summary,comment` Returns only the summary and comments fields.
         *  *  `-description` Returns all navigable (default) fields except description.
         *  *  `*all,-comment` Returns all fields except comments.
         *
         * This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.
         *
         * Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
         */
        fields?: string[];
        /**
         * @description Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `renderedFields` Returns field values rendered in HTML format.
         *  *  `names` Returns the display name of each field.
         *  *  `schema` Returns the schema describing a field type.
         *  *  `transitions` Returns all possible transitions for the issue.
         *  *  `operations` Returns all possible operations for the issue.
         *  *  `editmeta` Returns information about how each field can be edited.
         *  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
         *  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
         */
        expand?: string;
        /** @description A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified. */
        properties?: string[];
        /** @description Reference fields by their key (rather than ID). */
        fieldsByKeys?: boolean;
        /** @description Whether to fail the request quickly in case of an error while loading fields for an issue. For `failFast=true`, if one field fails, the entire operation fails. For `failFast=false`, the operation will continue even if a field fails. It will return a valid response, but without values for the failed field(s). */
        failFast?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResults"];
        };
      };
      /** @description Returned if the JQL query is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Search for issues using JQL (POST)
   * @description Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
   *
   * There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  searchForIssuesUsingJqlPost: {
    /** @description A JSON object containing the search request. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "expand": [
         *     "names",
         *     "schema",
         *     "operations"
         *   ],
         *   "fields": [
         *     "summary",
         *     "status",
         *     "assignee"
         *   ],
         *   "fieldsByKeys": false,
         *   "jql": "project = HSP",
         *   "maxResults": 15,
         *   "startAt": 0
         * }
         */
        "application/json": components["schemas"]["SearchRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResults"];
        };
      };
      /** @description Returned if the JQL query is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Search issue IDs using JQL
   * @description Searches for IDs of issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
   *
   * Use the [Search](#api-rest-api-3-search-post) endpoint if you need to fetch more than just issue IDs. The Search endpoint returns more information, but may take much longer to respond to requests. This is because it uses a different mechanism for ordering results than this endpoint and doesn't provide the total number of results for your query.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** Issues are included in the response where the user has:
   *
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
   *  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
   */
  searchForIssuesIds: {
    /** @description A JSON object containing the search request. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "jql": "project = HSP",
         *   "maxResults": 1000,
         *   "nextPageToken": "EgQIlMIC"
         * }
         */
        "application/json": components["schemas"]["IdSearchRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IdSearchResults"];
        };
      };
      /** @description Returned if the JQL query is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get issue security level
   * @description Returns details of an issue security level.
   *
   * Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getIssueSecurityLevel: {
    parameters: {
      path: {
        /** @description The ID of the issue security level. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["SecurityLevel"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the issue security level is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get Jira instance info
   * @description Returns information about the Jira instance.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getServerInfo: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ServerInformation"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get issue navigator default columns
   * @description Returns the default issue navigator columns.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getIssueNavigatorDefaultColumns: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ColumnItem"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Set issue navigator default columns
   * @description Sets the default issue navigator columns.
   *
   * The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
   *
   * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
   *
   * If no column details are sent, then all default columns are removed.
   *
   * A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setIssueNavigatorDefaultColumns: {
    /** @description A navigable field value. */
    requestBody: {
      content: {
        "*/*": components["schemas"]["ColumnRequestBody"];
        "multipart/form-data": components["schemas"]["ColumnRequestBody"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /** @description Returned if invalid parameters are passed. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if a navigable field value is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all statuses
   * @description Returns a list of all statuses associated with active workflows.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getStatuses: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["StatusDetails"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get status
   * @description Returns a status. The status must be associated with an active workflow to be returned.
   *
   * If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
   *
   * This operation can be accessed anonymously.
   *
   * [Permissions](#permissions) required: None.
   */
  getStatus: {
    parameters: {
      path: {
        /** @description The ID or name of the status. */
        idOrName: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["StatusDetails"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the status is not found.
       *  *  the status is not associated with a workflow.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get all status categories
   * @description Returns a list of all status categories.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getStatusCategories: {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["StatusCategory"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get status category
   * @description Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getStatusCategory: {
    parameters: {
      path: {
        /** @description The ID or key of the status category. */
        idOrKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["StatusCategory"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the status category is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Bulk get statuses
   * @description Returns a list of the statuses specified by one or more status IDs.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  getStatusesById: {
    parameters: {
      query: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `usages` Returns the project and issue types that use the status in their workflow.
         *  *  `workflowUsages` Returns the workflows that use the status.
         */
        expand?: string;
        /**
         * @description The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
         *
         * Min items `1`, Max items `50`
         */
        id: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["JiraStatus"][];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Bulk update statuses
   * @description Updates statuses by ID.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  updateStatuses: {
    /** @description The list of statuses that will be updated. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "statuses": [
         *     {
         *       "description": "The issue is resolved",
         *       "id": "1000",
         *       "name": "Finished",
         *       "statusCategory": "DONE"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["StatusUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
      /** @description Returned if another workflow configuration update task is ongoing. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Bulk create statuses
   * @description Creates statuses for a global or project scope.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  createStatuses: {
    /** @description Details of the statuses being created and their scope. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "scope": {
         *     "project": {
         *       "id": "1"
         *     },
         *     "type": "PROJECT"
         *   },
         *   "statuses": [
         *     {
         *       "description": "The issue is resolved",
         *       "name": "Finished",
         *       "statusCategory": "DONE"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["StatusCreateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["JiraStatus"][];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
      /** @description Returned if another workflow configuration update task is ongoing. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Bulk delete Statuses
   * @description Deletes statuses by ID.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  deleteStatusesById: {
    parameters: {
      query: {
        /**
         * @description The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.
         *
         * Min items `1`, Max items `50`
         */
        id: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Search statuses paginated
   * @description Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   *  *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
   */
  search: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `usages` Returns the project and issue types that use the status in their workflow.
         *  *  `workflowUsages` Returns the workflows that use the status.
         */
        expand?: string;
        /** @description The project the status is part of or null for global statuses. */
        projectId?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description Term to match status names against or null to search for all statuses in the search scope. */
        searchString?: string;
        /** @description Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`. */
        statusCategory?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageOfStatuses"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get task
   * @description Returns the status of a [long-running asynchronous task](#async).
   *
   * When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
   *
   * **Deprecation notice:** The required OAuth 2.0 scopes will be updated on June 15, 2024.
   *
   *  *  `read:jira-work`
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  Creator of the task.
   */
  getTask: {
    parameters: {
      path: {
        /** @description The ID of the task. */
        taskId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the task is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Cancel task
   * @description Cancels a task.
   *
   * **[Permissions](#permissions) required:** either of:
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *  *  Creator of the task.
   */
  cancelTask: {
    parameters: {
      path: {
        /** @description The ID of the task. */
        taskId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      202: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if cancellation of the task is not possible. */
      400: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": string[];
        };
      };
      /** @description Returned if the task is not found. */
      404: {
        content: {
          "application/json": string[];
        };
      };
    };
  };
  /**
   * Get UI modifications
   * @description Gets UI modifications. UI modifications can only be retrieved by Forge apps.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getUiModifications: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /**
         * @description Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `data` Returns UI modification data.
         *  *  `contexts` Returns UI modification contexts.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanUiModificationDetails"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request is not from a Forge app. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create UI modification
   * @description Creates a UI modification. UI modification can only be created by Forge apps.
   *
   * Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *None* if the UI modification is created without contexts.
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
   */
  createUiModification: {
    /** @description Details of the UI modification. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "contexts": [
         *     {
         *       "issueTypeId": "10000",
         *       "projectId": "10000",
         *       "viewType": "GIC"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "projectId": "10000",
         *       "viewType": "IssueView"
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "projectId": "10000",
         *       "viewType": null
         *     }
         *   ],
         *   "data": "{field: 'Story Points', config: {hidden: false}}",
         *   "description": "Reveals Story Points field when any Sprint is selected.",
         *   "name": "Reveal Story Points"
         * }
         */
        "application/json": components["schemas"]["CreateUiModificationDetails"];
      };
    };
    responses: {
      /** @description Returned if the UI modification is created. */
      201: {
        content: {
          "application/json": components["schemas"]["UiModificationIdentifiers"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request is not from a Forge app. */
      403: {
        content: never;
      };
      /** @description Returned if a project or an issue type in the context are not found. */
      404: {
        content: {
          "application/json": components["schemas"]["DetailedErrorCollection"];
        };
      };
    };
  };
  /**
   * Update UI modification
   * @description Updates a UI modification. UI modification can only be updated by Forge apps.
   *
   * Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *None* if the UI modification is created without contexts.
   *  *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
   */
  updateUiModification: {
    parameters: {
      path: {
        /** @description The ID of the UI modification. */
        uiModificationId: string;
      };
    };
    /** @description Details of the UI modification. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "contexts": [
         *     {
         *       "issueTypeId": "10000",
         *       "projectId": "10000",
         *       "viewType": "GIC"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "projectId": "10000",
         *       "viewType": "IssueView"
         *     }
         *   ],
         *   "data": "{field: 'Story Points', config: {hidden: true}}",
         *   "name": "Updated Reveal Story Points"
         * }
         */
        "application/json": components["schemas"]["UpdateUiModificationDetails"];
      };
    };
    responses: {
      /** @description Returned if the UI modification is updated. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request is not from a Forge app. */
      403: {
        content: never;
      };
      /** @description Returned if the UI modification, a project or an issue type in the context are not found. */
      404: {
        content: {
          "application/json": components["schemas"]["DetailedErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete UI modification
   * @description Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.
   *
   * **[Permissions](#permissions) required:** None.
   */
  deleteUiModification: {
    parameters: {
      path: {
        /** @description The ID of the UI modification. */
        uiModificationId: string;
      };
    };
    responses: {
      /** @description Returned if the UI modification is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request is not from a Forge app. */
      403: {
        content: never;
      };
      /** @description Returned if the UI modification is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get avatars
   * @description Returns the system and custom avatars for a project or issue type.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
   *  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
   *  *  for system avatars, none.
   */
  getAvatars: {
    parameters: {
      path: {
        /** @description The avatar type. */
        type: "project" | "issuetype";
        /** @description The ID of the item the avatar is associated with. */
        entityId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Avatars"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Load avatar
   * @description Loads a custom avatar for a project or issue type.
   *
   * Specify the avatar's local file location in the body of the request. Also, include the following headers:
   *
   *  *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
   *  *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
   *
   * For example:
   * `curl --request POST `
   *
   * `--user email@example.com:<api_token> `
   *
   * `--header 'X-Atlassian-Token: no-check' `
   *
   * `--header 'Content-Type: image/< image_type>' `
   *
   * `--data-binary "<@/path/to/file/with/your/avatar>" `
   *
   * `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
   *
   * The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
   *
   * The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
   *
   * After creating the avatar use:
   *
   *  *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
   *  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  storeAvatar: {
    parameters: {
      query: {
        /** @description The X coordinate of the top-left corner of the crop region. */
        x?: number;
        /** @description The Y coordinate of the top-left corner of the crop region. */
        y?: number;
        /** @description The length of each side of the crop region. */
        size: number;
      };
      path: {
        /** @description The avatar type. */
        type: "project" | "issuetype";
        /** @description The ID of the item the avatar is associated with. */
        entityId: string;
      };
    };
    requestBody: {
      content: {
        "*/*": unknown;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Avatar"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  an image isn't included in the request.
       *  *  the image type is unsupported.
       *  *  the crop parameters extend the crop area beyond the edge of the image.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete avatar
   * @description Deletes an avatar from a project or issue type.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteAvatar: {
    parameters: {
      path: {
        /** @description The avatar type. */
        type: "project" | "issuetype";
        /** @description The ID of the item the avatar is associated with. */
        owningObjectId: string;
        /** @description The ID of the avatar. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the user does not have permission to delete the avatar, the avatar is not deletable. */
      403: {
        content: never;
      };
      /** @description Returned if the avatar type, associated item ID, or avatar ID is invalid. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get avatar image by type
   * @description Returns the default project or issue type avatar image.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  getAvatarImageByType: {
    parameters: {
      query?: {
        /** @description The size of the avatar image. If not provided the default size is returned. */
        size?: "xsmall" | "small" | "medium" | "large" | "xlarge";
        /** @description The format to return the avatar image in. If not provided the original content format is returned. */
        format?: "png" | "svg";
      };
      path: {
        /** @description The icon type of the avatar. */
        type: "issuetype" | "project";
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["StreamingResponseBody"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if an avatar is not found or an avatar matching the requested size is not found. */
      404: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
    };
  };
  /**
   * Get avatar image by ID
   * @description Returns a project or issue type avatar image by ID.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  For system avatars, none.
   *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
   *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
   */
  getAvatarImageByID: {
    parameters: {
      query?: {
        /** @description The size of the avatar image. If not provided the default size is returned. */
        size?: "xsmall" | "small" | "medium" | "large" | "xlarge";
        /** @description The format to return the avatar image in. If not provided the original content format is returned. */
        format?: "png" | "svg";
      };
      path: {
        /** @description The icon type of the avatar. */
        type: "issuetype" | "project";
        /** @description The ID of the avatar. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["StreamingResponseBody"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if an avatar is not found or an avatar matching the requested size is not found. */
      404: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
    };
  };
  /**
   * Get avatar image by owner
   * @description Returns the avatar image for a project or issue type.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  For system avatars, none.
   *  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
   *  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
   */
  getAvatarImageByOwner: {
    parameters: {
      query?: {
        /** @description The size of the avatar image. If not provided the default size is returned. */
        size?: "xsmall" | "small" | "medium" | "large" | "xlarge";
        /** @description The format to return the avatar image in. If not provided the original content format is returned. */
        format?: "png" | "svg";
      };
      path: {
        /** @description The icon type of the avatar. */
        type: "issuetype" | "project";
        /** @description The ID of the project or issue type the avatar belongs to. */
        entityId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["StreamingResponseBody"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
      /** @description Returned if an avatar is not found or an avatar matching the requested size is not found. */
      404: {
        content: {
          "*/*": unknown;
          "application/json": components["schemas"]["ErrorCollection"];
          "image/png": unknown;
          "image/svg+xml": unknown;
        };
      };
    };
  };
  /**
   * Get user
   * @description Returns a user.
   *
   * Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getUser: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */
        accountId?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */
        username?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */
        key?: string;
        /**
         * @description Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `groups` includes all groups and nested groups to which the user belongs.
         *  *  `applicationRoles` includes details of all the applications to which the user has access.
         */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the calling user does not have the *Browse users and groups* global permission. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create user
   * @description Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
   *
   * If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createUser: {
    /** @description Details about the user to be created. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "emailAddress": "mia@atlassian.com"
         * }
         */
        "application/json": components["schemas"]["NewUserDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Returned if the request is invalid or the number of licensed users is exceeded. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Delete user
   * @description Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
   *
   * **[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
   */
  removeUser: {
    parameters: {
      query: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        key?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the user cannot be removed. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Find users assignable to projects
   * @description Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** None.
   */
  findBulkAssignableUsers: {
    parameters: {
      query: {
        /** @description A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */
        query?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */
        accountId?: string;
        /** @description A list of project keys (case sensitive). This parameter accepts a comma-separated list. */
        projectKeys: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `projectKeys` is missing.
       *  *  `query` or `accountId` is missing.
       *  *  `query` and `accountId` are provided.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if one or more of the projects is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Find users assignable to issues
   * @description Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
   *
   *  *  a new issue, by providing the `projectKeyOrId`.
   *  *  an updated issue, by providing the `issueKey`.
   *  *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
   *
   * In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Assign issues* [project permission](https://confluence.atlassian.com/x/yodKLg)
   */
  findAssignableUsers: {
    parameters: {
      query?: {
        /** @description A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified. */
        query?: string;
        /** @description The sessionId of this request. SessionId is the same until the assignee is set. */
        sessionId?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */
        accountId?: string;
        /** @description The project ID or project key (case sensitive). Required, unless `issueKey` is specified. */
        project?: string;
        /** @description The key of the issue. Required, unless `project` is specified. */
        issueKey?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue. */
        maxResults?: number;
        /** @description The ID of the transition. */
        actionDescriptorId?: number;
        recommend?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `issueKey` or `project` is missing.
       *  *  `query` or `accountId` is missing.
       *  *  `query` and `accountId` are provided.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the project, issue, or transition is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Bulk get users
   * @description Returns a [paginated](#pagination) list of the users specified by one or more account IDs.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  bulkGetUsers: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string[];
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        key?: string[];
        /** @description The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`. */
        accountId: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanUser"];
        };
      };
      /** @description Returned if `accountID` is missing. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get account IDs for users
   * @description Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  bulkGetUsersMigration: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present. */
        username?: string[];
        /** @description Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present. */
        key?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["UserMigrationBean"][];
        };
      };
      /** @description Returned if `key` or `username` */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get user default columns
   * @description Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
   *  *  Permission to access Jira, to get the calling user's column details.
   */
  getUserDefaultColumns: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ColumnItem"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the requested user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set user default columns
   * @description Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
   *
   * The parameters for this resource are expressed as HTML form data. For example, in curl:
   *
   * `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
   *  *  Permission to access Jira, to set the calling user's columns.
   */
  setUserColumns: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
      };
    };
    /** @description The ID of a column to set. To set multiple columns, send multiple `columns` parameters. */
    requestBody: {
      content: {
        "*/*": components["schemas"]["UserColumnRequestBody"];
        "multipart/form-data": components["schemas"]["UserColumnRequestBody"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the requested user is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
      /** @description Returned if an invalid issue table column ID is sent. */
      500: {
        content: never;
      };
    };
  };
  /**
   * Reset user default columns
   * @description Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
   *  *  Permission to access Jira, to set the calling user's columns.
   */
  resetUserColumns: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get user email
   * @description Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
   */
  getUserEmail: {
    parameters: {
      query: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. */
        accountId: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["UnrestrictedUserEmail"];
        };
      };
      /** @description Returned if the calling app is not approved to use this API. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing from the request (for example if a user is trying to access this API). */
      401: {
        content: never;
      };
      /** @description Returned if a user with the given `accountId` doesn't exist */
      404: {
        content: never;
      };
      /** @description Indicates the API is not currently enabled */
      503: {
        content: never;
      };
    };
  };
  /**
   * Get user email bulk
   * @description Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
   */
  getUserEmailBulk: {
    parameters: {
      query: {
        /** @description The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value). */
        accountId: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["UnrestrictedUserEmail"];
        };
      };
      /** @description Returned if the calling app is not approved to use this API. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect, or missing from the request (for example if a user is trying to access this API). */
      401: {
        content: never;
      };
      /** @description Indicates the API is not currently enabled. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Get user groups
   * @description Returns the groups to which a user belongs.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getUserGroups: {
    parameters: {
      query: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        key?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["GroupName"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the calling user does not have the *Browse users and groups* global permission. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Find users with permissions
   * @description Returns a list of users who fulfill these criteria:
   *
   *  *  their user attributes match a search string.
   *  *  they have a set of permissions for a project or issue.
   *
   * If no search string is provided, a list of all users with the permissions is returned.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
   *  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
   */
  findUsersWithAllPermissions: {
    parameters: {
      query: {
        /** @description A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */
        query?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */
        accountId?: string;
        /**
         * @description A comma separated list of permissions. Permissions can be specified as any:
         *
         *  *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).
         *  *  custom project permission added by Connect apps.
         *  *  (deprecated) one of the following:
         *
         *      *  ASSIGNABLE\_USER
         *      *  ASSIGN\_ISSUE
         *      *  ATTACHMENT\_DELETE\_ALL
         *      *  ATTACHMENT\_DELETE\_OWN
         *      *  BROWSE
         *      *  CLOSE\_ISSUE
         *      *  COMMENT\_DELETE\_ALL
         *      *  COMMENT\_DELETE\_OWN
         *      *  COMMENT\_EDIT\_ALL
         *      *  COMMENT\_EDIT\_OWN
         *      *  COMMENT\_ISSUE
         *      *  CREATE\_ATTACHMENT
         *      *  CREATE\_ISSUE
         *      *  DELETE\_ISSUE
         *      *  EDIT\_ISSUE
         *      *  LINK\_ISSUE
         *      *  MANAGE\_WATCHER\_LIST
         *      *  MODIFY\_REPORTER
         *      *  MOVE\_ISSUE
         *      *  PROJECT\_ADMIN
         *      *  RESOLVE\_ISSUE
         *      *  SCHEDULE\_ISSUE
         *      *  SET\_ISSUE\_SECURITY
         *      *  TRANSITION\_ISSUE
         *      *  VIEW\_VERSION\_CONTROL
         *      *  VIEW\_VOTERS\_AND\_WATCHERS
         *      *  VIEW\_WORKFLOW\_READONLY
         *      *  WORKLOG\_DELETE\_ALL
         *      *  WORKLOG\_DELETE\_OWN
         *      *  WORKLOG\_EDIT\_ALL
         *      *  WORKLOG\_EDIT\_OWN
         *      *  WORK\_ISSUE
         */
        permissions: string;
        /** @description The issue key for the issue. */
        issueKey?: string;
        /** @description The project key for the project (case sensitive). */
        projectKey?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `issueKey` or `projectKey` is missing.
       *  *  `query` or `accountId` is missing.
       *  *  `query` and `accountId` are provided.
       *  *  `permissions` is empty or contains an invalid entry.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the issue or project is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Find users for picker
   * @description Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
   *
   * This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
   */
  findUsersForPicker: {
    parameters: {
      query: {
        /** @description A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. */
        query: string;
        /** @description The maximum number of items to return. The total number of matched users is returned in `total`. */
        maxResults?: number;
        /** @description Include the URI to the user's avatar. */
        showAvatar?: boolean;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        exclude?: string[];
        /** @description A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`. */
        excludeAccountIds?: string[];
        avatarSize?: string;
        excludeConnectUsers?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FoundUsers"];
        };
      };
      /** @description Returned if `exclude` and `excludeAccountIds` are provided. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Get user property keys
   * @description Returns the keys of all properties for a user.
   *
   * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
   *  *  Access to Jira, to access the calling user's property keys.
   */
  getUserPropertyKeys: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        userKey?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if `accountId` is missing. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get user property
   * @description Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
   *
   * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
   *  *  Access to Jira, to get a property from the calling user's record.
   */
  getUserProperty: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        userKey?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
      path: {
        /** @description The key of the user's property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if `accountId` is missing. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set user property
   * @description Sets the value of a user's property. Use this resource to store custom data against a user.
   *
   * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
   *  *  Access to Jira, to set a property on the calling user's record.
   */
  setUserProperty: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        userKey?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
      path: {
        /** @description The key of the user's property. The maximum length is 255 characters. */
        propertyKey: string;
      };
    };
    /** @description The value of the property. The value has to be a valid, non-empty [JSON](https://tools.ietf.org/html/rfc4627) value. The maximum length of the property value is 32768 bytes. */
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the user property is updated. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the user property is created. */
      201: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if `accountId` is missing. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the user is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the property key is not specified. */
      405: {
        content: never;
      };
    };
  };
  /**
   * Delete user property
   * @description Deletes a property from a user.
   *
   * Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
   *  *  Access to Jira, to delete a property from the calling user's record.
   */
  deleteUserProperty: {
    parameters: {
      query?: {
        /** @description The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */
        accountId?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        userKey?: string;
        /** @description This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
      };
      path: {
        /** @description The key of the user's property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the user property is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if `accountId` is missing. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission or is not accessing their user record. */
      403: {
        content: never;
      };
      /** @description Returned if the user or the property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Find users
   * @description Returns a list of active users that match the search string and property.
   *
   * This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * This operation can be accessed anonymously.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
   */
  findUsers: {
    parameters: {
      query?: {
        /** @description A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified. */
        query?: string;
        username?: string;
        /** @description A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified. */
        accountId?: string;
        /** @description The index of the first item to return in a page of filtered results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified. */
        property?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `accountId`, `query` or `property` is missing.
       *  *  `query` and `accountId` are provided.
       *  *  `property` parameter is not valid.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Find users by query
   * @description Finds users with a structured query and returns a [paginated](#pagination) list of user details.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *
   * The query statements are:
   *
   *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
   *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
   *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
   *
   * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
   *
   * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
   */
  findUsersByQuery: {
    parameters: {
      query: {
        /** @description The search query. */
        query: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanUser"];
        };
      };
      /** @description Returned if the query is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the search is timed out. */
      408: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Find user keys by query
   * @description Finds users with a structured query and returns a [paginated](#pagination) list of user keys.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   *
   * The query statements are:
   *
   *  *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
   *  *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
   *  *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
   *  *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
   *
   * The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
   *
   * `is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
   */
  findUserKeysByQuery: {
    parameters: {
      query: {
        /** @description The search query. */
        query: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResult?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanUserKey"];
        };
      };
      /** @description Returned if the query is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the search is timed out. */
      408: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Find users with browse permission
   * @description Returns a list of users who fulfill these criteria:
   *
   *  *  their user attributes match a search string.
   *  *  they have permission to browse issues.
   *
   * Use this resource to find users who can browse:
   *
   *  *  an issue, by providing the `issueKey`.
   *  *  any issue in a project, by providing the `projectKey`.
   *
   * This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
   */
  findUsersWithBrowsePermission: {
    parameters: {
      query?: {
        /** @description A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */
        query?: string;
        /** @description This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */
        username?: string;
        /** @description A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */
        accountId?: string;
        /** @description The issue key for the issue. Required, unless `projectKey` is specified. */
        issueKey?: string;
        /** @description The project key for the project (case sensitive). Required, unless `issueKey` is specified. */
        projectKey?: string;
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  `issueKey` or `projectKey` is missing.
       *  *  `query` or `accountId` is missing.
       *  *  `query` and `accountId` are provided.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the issue or project is not found. */
      404: {
        content: never;
      };
      /** @description Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira's normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header. */
      429: {
        content: never;
      };
    };
  };
  /**
   * Get all users default
   * @description Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllUsersDefault: {
    parameters: {
      query?: {
        /** @description The index of the first item to return. */
        startAt?: number;
        /** @description The maximum number of items to return. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the request takes longer than 10 seconds or is interrupted. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Get all users
   * @description Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
   *
   * Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
   *
   * **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllUsers: {
    parameters: {
      query?: {
        /** @description The index of the first item to return. */
        startAt?: number;
        /** @description The maximum number of items to return. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the user doesn't have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the request takes longer than 10 seconds or is interrupted. */
      409: {
        content: never;
      };
    };
  };
  /**
   * Create version
   * @description Creates a project version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
   */
  createVersion: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "archived": false,
         *   "description": "An excellent version",
         *   "name": "New Version 1",
         *   "projectId": 10000,
         *   "releaseDate": "2010-07-06",
         *   "released": true
         * }
         */
        "application/json": components["schemas"]["Version"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["Version"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the project is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get version
   * @description Returns a project version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
   */
  getVersion: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `operations` Returns the list of operations available for this version.
         *  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
         *  *  `driver` Returns the Atlassian account ID of the version driver.
         *  *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.
         */
        expand?: string;
      };
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Version"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the version is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update version
   * @description Updates a project version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
   */
  updateVersion: {
    parameters: {
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "archived": false,
         *   "description": "An excellent version",
         *   "id": "10000",
         *   "name": "New Version 1",
         *   "overdue": true,
         *   "projectId": 10000,
         *   "releaseDate": "2010-07-06",
         *   "released": true,
         *   "self": "https://your-domain.atlassian.net/rest/api/~ver~/version/10000",
         *   "userReleaseDate": "6/Jul/2010"
         * }
         */
        "application/json": components["schemas"]["Version"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Version"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  the request is invalid.
       *  *  the user does not have the required permissions.
       */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the version is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete version
   * @deprecated
   * @description Deletes a project version.
   *
   * Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
   *
   * Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
   */
  deleteVersion: {
    parameters: {
      query?: {
        /** @description The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */
        moveFixIssuesTo?: string;
        /** @description The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */
        moveAffectedIssuesTo?: string;
      };
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the version is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the authentication credentials are incorrect.
       *  *  the user does not have the required permissions.
       */
      401: {
        content: never;
      };
      /** @description Returned if the version is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Merge versions
   * @description Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
   *
   * Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
   */
  mergeVersions: {
    parameters: {
      path: {
        /** @description The ID of the version to delete. */
        id: string;
        /** @description The ID of the version to merge into. */
        moveIssuesTo: string;
      };
    };
    responses: {
      /** @description Returned if the version is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the authentication credentials are incorrect or missing.
       *  *  the user does not have the required permissions.
       */
      401: {
        content: never;
      };
      /** @description Returned if the version to be deleted or the version to merge to are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Move version
   * @description Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
   */
  moveVersion: {
    parameters: {
      path: {
        /** @description The ID of the version to be moved. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "after": "https://your-domain.atlassian.net/rest/api/~ver~/version/10000"
         * }
         */
        "application/json": components["schemas"]["VersionMoveBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Version"];
        };
      };
      /**
       * @description Returned if:
       *
       *  *  no body parameters are provided.
       *  *  `after` and `position` are provided.
       *  *  `position` is invalid.
       */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the authentication credentials are incorrect or missing
       *  *  the user does not have the required commissions.
       */
      401: {
        content: never;
      };
      /** @description Returned if the version or move after version are not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get version's related issues count
   * @description Returns the following counts for a version:
   *
   *  *  Number of issues where the `fixVersion` is set to the version.
   *  *  Number of issues where the `affectedVersion` is set to the version.
   *  *  Number of issues where a version custom field is set to the version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
   */
  getVersionRelatedIssues: {
    parameters: {
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["VersionIssueCounts"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the version is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get related work
   * @description Returns related work items for the given version id.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
   */
  getRelatedWork: {
    parameters: {
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["VersionRelatedWork"][];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the version is not found or the user does not have the necessary permission. */
      404: {
        content: never;
      };
      /** @description Returned if reading related work fails */
      500: {
        content: never;
      };
    };
  };
  /**
   * Update related work
   * @description Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
   */
  updateRelatedWork: {
    parameters: {
      path: {
        /** @description The ID of the version to update the related work on. For the related work id, pass it to the input JSON. */
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "category": "Design",
         *   "relatedWorkId": "fabcdef6-7878-1234-beaf-43211234abcd",
         *   "title": "Design link",
         *   "url": "https://www.atlassian.com"
         * }
         */
        "application/json": components["schemas"]["VersionRelatedWork"];
      };
    };
    responses: {
      /** @description Returned if the request is successful together with updated related work. */
      200: {
        content: {
          "application/json": components["schemas"]["VersionRelatedWork"];
        };
      };
      /** @description Returned if the request data is invalid */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the version or the related work is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create related work
   * @description Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
   */
  createRelatedWork: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "category": "Design",
         *   "title": "Design link",
         *   "url": "https://www.atlassian.com"
         * }
         */
        "application/json": components["schemas"]["VersionRelatedWork"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["VersionRelatedWork"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the version is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete and replace version
   * @description Deletes a project version.
   *
   * Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
   */
  deleteAndReplaceVersion: {
    parameters: {
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteAndReplaceVersionBean"];
      };
    };
    responses: {
      /** @description Returned if the version is deleted. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the version to delete is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get version's unresolved issues count
   * @description Returns counts of the issues and unresolved issues for the project version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
   */
  getVersionUnresolvedIssues: {
    parameters: {
      path: {
        /** @description The ID of the version. */
        id: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["VersionUnresolvedIssuesCount"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the version is not found.
       *  *  the user does not have the required permissions.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete related work
   * @description Deletes the given related work for the given version.
   *
   * This operation can be accessed anonymously.
   *
   * **[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
   */
  deleteRelatedWork: {
    parameters: {
      path: {
        /** @description The ID of the version that the target related work belongs to. */
        versionId: string;
        /** @description The ID of the related work to delete. */
        relatedWorkId: string;
      };
    };
    responses: {
      /** @description Returned if the related work is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if
       *
       * the authentication credentials are incorrect.
       */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: never;
      };
      /** @description Returned if the version/related work is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get dynamic webhooks for app
   * @description Returns a [paginated](#pagination) list of the webhooks registered by the calling app.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
   */
  getDynamicWebhooksForApp: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanWebhook"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller isn't an app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Register dynamic webhooks
   * @description Registers webhooks.
   *
   * **NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
   */
  registerDynamicWebhooks: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "url": "https://your-app.example.com/webhook-received",
         *   "webhooks": [
         *     {
         *       "events": [
         *         "jira:issue_created",
         *         "jira:issue_updated"
         *       ],
         *       "fieldIdsFilter": [
         *         "summary",
         *         "customfield_10029"
         *       ],
         *       "jqlFilter": "project = PROJ"
         *     },
         *     {
         *       "events": [
         *         "jira:issue_deleted"
         *       ],
         *       "jqlFilter": "project IN (PROJ, EXP) AND status = done"
         *     },
         *     {
         *       "events": [
         *         "issue_property_set"
         *       ],
         *       "issuePropertyKeysFilter": [
         *         "my-issue-property-key"
         *       ],
         *       "jqlFilter": "project = PROJ"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WebhookRegistrationDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ContainerForRegisteredWebhooks"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller isn't an app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Delete webhooks by ID
   * @description Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
   */
  deleteWebhookById: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "webhookIds": [
         *     10000,
         *     10001,
         *     10042
         *   ]
         * }
         */
        "application/json": components["schemas"]["ContainerForWebhookIDs"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      202: {
        content: never;
      };
      /** @description Returned if the list of webhook IDs is missing. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller isn't an app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get failed webhooks
   * @description Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
   *
   * After 72 hours the failure may no longer be returned by this operation.
   *
   * The oldest failure is returned first.
   *
   * This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
   *
   * **[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
   */
  getFailedWebhooks: {
    parameters: {
      query?: {
        /** @description The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page. */
        maxResults?: number;
        /** @description The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch. */
        after?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["FailedWebhooks"];
        };
      };
      /** @description 400 response */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller is not a Connect app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Extend webhook life
   * @description Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.
   *
   * Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
   */
  refreshWebhooks: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "webhookIds": [
         *     10000,
         *     10001,
         *     10042
         *   ]
         * }
         */
        "application/json": components["schemas"]["ContainerForWebhookIDs"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WebhooksExpirationDate"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller isn't an app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get all workflows
   * @deprecated
   * @description Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
   *
   * If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllWorkflows: {
    parameters: {
      query?: {
        /** @description The name of the workflow to be returned. Only one workflow can be specified. */
        workflowName?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DeprecatedWorkflow"][];
        };
      };
      /** @description Returned if the user does not have the necessary permission. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Create workflow
   * @deprecated
   * @description Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.
   *
   * #### Conditions ####
   *
   * Conditions enable workflow rules that govern whether a transition can execute.
   *
   * ##### Always false condition #####
   *
   * A condition that always fails.
   *
   *     {
   *        "type": "AlwaysFalseCondition"
   *      }
   *
   * ##### Block transition until approval #####
   *
   * A condition that blocks issue transition if there is a pending approval.
   *
   *     {
   *        "type": "BlockInProgressApprovalCondition"
   *      }
   *
   * ##### Compare number custom field condition #####
   *
   * A condition that allows transition if a comparison between a number custom field and a value is true.
   *
   *     {
   *        "type": "CompareNumberCFCondition",
   *        "configuration": {
   *          "comparator": "=",
   *          "fieldId": "customfield_10029",
   *          "fieldValue": 2
   *        }
   *      }
   *
   *  *  `comparator` One of the supported comparator: `=`, `>`, and `<`.
   *  *  `fieldId` The custom numeric field ID. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
   *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
   *  *  `fieldValue` The value for comparison.
   *
   * ##### Hide from user condition #####
   *
   * A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.
   *
   *     {
   *        "type": "RemoteOnlyCondition"
   *      }
   *
   * ##### Only assignee condition #####
   *
   * A condition that allows only the assignee to execute a transition.
   *
   *     {
   *        "type": "AllowOnlyAssignee"
   *      }
   *
   * ##### Only Bamboo notifications workflow condition (deprecated) #####
   *
   * A condition that makes the transition available only to Bamboo build notifications.
   *
   *     {
   *        "type": "OnlyBambooNotificationsCondition"
   *      }
   *
   * ##### Only reporter condition #####
   *
   * A condition that allows only the reporter to execute a transition.
   *
   *     {
   *        "type": "AllowOnlyReporter"
   *      }
   *
   * ##### Permission condition #####
   *
   * A condition that allows only users with a permission to execute a transition.
   *
   *     {
   *        "type": "PermissionCondition",
   *        "configuration": {
   *            "permissionKey": "BROWSE_PROJECTS"
   *        }
   *      }
   *
   *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
   *
   * ##### Previous status condition #####
   *
   * A condition that allows a transition based on whether an issue has or has not transitioned through a status.
   *
   *     {
   *        "type": "PreviousStatusCondition",
   *        "configuration": {
   *          "ignoreLoopTransitions": true,
   *          "includeCurrentStatus": true,
   *          "mostRecentStatusOnly": true,
   *          "reverseCondition": true,
   *          "previousStatus": {
   *            "id": "5"
   *          }
   *        }
   *      }
   *
   * By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:
   *
   *  *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
   *  *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
   *  *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
   *  *  `reverseCondition` is `true`, then the status must not be present.
   *
   * ##### Separation of duties condition #####
   *
   * A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.
   *
   *     {
   *        "type": "SeparationOfDutiesCondition",
   *        "configuration": {
   *          "fromStatus": {
   *            "id": "5"
   *          },
   *          "toStatus": {
   *            "id": "6"
   *          }
   *        }
   *      }
   *
   *  *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
   *  *  `toStatus` An object containing the ID of the target status of the transition that is blocked.
   *
   * ##### Subtask blocking condition #####
   *
   * A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.
   *
   *     {
   *        "type": "SubTaskBlockingCondition",
   *        "configuration": {
   *          "statuses": [
   *            {
   *              "id": "1"
   *            },
   *            {
   *              "id": "3"
   *            }
   *          ]
   *        }
   *      }
   *
   *  *  `statuses` A list of objects containing status IDs.
   *
   * ##### User is in any group condition #####
   *
   * A condition that allows users belonging to any group from a list of groups to execute a transition.
   *
   *     {
   *        "type": "UserInAnyGroupCondition",
   *        "configuration": {
   *          "groups": [
   *            "administrators",
   *            "atlassian-addons-admin"
   *          ]
   *        }
   *      }
   *
   *  *  `groups` A list of group names.
   *
   * ##### User is in any project role condition #####
   *
   * A condition that allows only users with at least one project roles from a list of project roles to execute a transition.
   *
   *     {
   *        "type": "InAnyProjectRoleCondition",
   *        "configuration": {
   *          "projectRoles": [
   *            {
   *              "id": "10002"
   *            },
   *            {
   *              "id": "10003"
   *            },
   *            {
   *              "id": "10012"
   *            },
   *            {
   *              "id": "10013"
   *            }
   *          ]
   *        }
   *      }
   *
   *  *  `projectRoles` A list of objects containing project role IDs.
   *
   * ##### User is in custom field condition #####
   *
   * A condition that allows only users listed in a given custom field to execute the transition.
   *
   *     {
   *        "type": "UserIsInCustomFieldCondition",
   *        "configuration": {
   *          "allowUserInField": false,
   *          "fieldId": "customfield_10010"
   *        }
   *      }
   *
   *  *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
   *  *  `fieldId` The ID of the field containing the list of users.
   *
   * ##### User is in group condition #####
   *
   * A condition that allows users belonging to a group to execute a transition.
   *
   *     {
   *        "type": "UserInGroupCondition",
   *        "configuration": {
   *          "group": "administrators"
   *        }
   *      }
   *
   *  *  `group` The name of the group.
   *
   * ##### User is in group custom field condition #####
   *
   * A condition that allows users belonging to a group specified in a custom field to execute a transition.
   *
   *     {
   *        "type": "InGroupCFCondition",
   *        "configuration": {
   *          "fieldId": "customfield_10012"
   *        }
   *      }
   *
   *  *  `fieldId` The ID of the field. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
   *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
   *
   * ##### User is in project role condition #####
   *
   * A condition that allows users with a project role to execute a transition.
   *
   *     {
   *        "type": "InProjectRoleCondition",
   *        "configuration": {
   *          "projectRole": {
   *            "id": "10002"
   *          }
   *        }
   *      }
   *
   *  *  `projectRole` An object containing the ID of a project role.
   *
   * ##### Value field condition #####
   *
   * A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.
   *
   *     {
   *        "type": "ValueFieldCondition",
   *        "configuration": {
   *          "fieldId": "assignee",
   *          "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
   *          "comparisonType": "NUMBER",
   *          "comparator": "="
   *        }
   *      }
   *
   *  *  `fieldId` The ID of a field used in the comparison.
   *  *  `fieldValue` The expected value of the field.
   *  *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
   *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, `!=`.
   *
   * **Notes:**
   *
   *  *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
   *  *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
   *  *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.
   *
   * #### Validators ####
   *
   * Validators check that any input made to the transition is valid before the transition is performed.
   *
   * ##### Date field validator #####
   *
   * A validator that compares two dates.
   *
   *     {
   *        "type": "DateFieldValidator",
   *        "configuration": {
   *            "comparator": ">",
   *            "date1": "updated",
   *            "date2": "created",
   *            "expression": "1d",
   *            "includeTime": true
   *          }
   *      }
   *
   *  *  `comparator` One of the supported comparator: `>`, `>=`, `=`, `<=`, `<`, or `!=`.
   *  *  `date1` The date field to validate. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
   *      *  `duedate`
   *      *  `created`
   *      *  `updated`
   *      *  `resolutiondate`
   *  *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
   *      *  `duedate`
   *      *  `created`
   *      *  `updated`
   *      *  `resolutiondate`
   *  *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
   *  *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.
   *
   * ##### Windows date validator #####
   *
   * A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.
   *
   *     {
   *        "type": "WindowsDateValidator",
   *        "configuration": {
   *            "date1": "customfield_10009",
   *            "date2": "created",
   *            "windowsDays": 5
   *          }
   *      }
   *
   *  *  `date1` The date field to validate. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
   *      *  `duedate`
   *      *  `created`
   *      *  `updated`
   *      *  `resolutiondate`
   *  *  `date2` The reference date. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
   *      *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
   *      *  `duedate`
   *      *  `created`
   *      *  `updated`
   *      *  `resolutiondate`
   *  *  `windowsDays` A positive integer indicating a number of days.
   *
   * ##### Field required validator #####
   *
   * A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.
   *
   *     {
   *          "type": "FieldRequiredValidator",
   *          "configuration": {
   *              "ignoreContext": true,
   *              "errorMessage": "Hey",
   *              "fieldIds": [
   *                  "versions",
   *                  "customfield_10037",
   *                  "customfield_10003"
   *              ]
   *          }
   *      }
   *
   *  *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
   *  *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
   *  *  `fieldIds` The list of fields to validate.
   *
   * ##### Field changed validator #####
   *
   * A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.
   *
   *     {
   *          "type": "FieldChangedValidator",
   *          "configuration": {
   *              "fieldId": "comment",
   *              "errorMessage": "Hey",
   *              "exemptedGroups": [
   *                  "administrators",
   *                  "atlassian-addons-admin"
   *              ]
   *          }
   *      }
   *
   *  *  `fieldId` The ID of a field.
   *  *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
   *  *  `exemptedGroups` OPTIONAL. The list of groups.
   *
   * ##### Field has single value validator #####
   *
   * A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.
   *
   *     {
   *          "type": "FieldHasSingleValueValidator",
   *          "configuration": {
   *              "fieldId": "attachment,
   *              "excludeSubtasks": true
   *          }
   *      }
   *
   *  *  `fieldId` The ID of a field.
   *  *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.
   *
   * ##### Parent status validator #####
   *
   * A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.
   *
   *     {
   *          "type": "ParentStatusValidator",
   *          "configuration": {
   *              "parentStatuses": [
   *                  {
   *                    "id":"1"
   *                  },
   *                  {
   *                    "id":"2"
   *                  }
   *              ]
   *          }
   *      }
   *
   *  *  `parentStatus` The list of required parent issue statuses.
   *
   * ##### Permission validator #####
   *
   * A validator that checks the user has a permission.
   *
   *     {
   *        "type": "PermissionValidator",
   *        "configuration": {
   *            "permissionKey": "ADMINISTER_PROJECTS"
   *        }
   *      }
   *
   *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
   *
   * ##### Previous status validator #####
   *
   * A validator that checks if the issue has held a status.
   *
   *     {
   *        "type": "PreviousStatusValidator",
   *        "configuration": {
   *            "mostRecentStatusOnly": false,
   *            "previousStatus": {
   *                "id": "15"
   *            }
   *        }
   *      }
   *
   *  *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
   *  *  `previousStatus` An object containing the ID of an issue status.
   *
   * ##### Regular expression validator #####
   *
   * A validator that checks the content of a field against a regular expression.
   *
   *     {
   *        "type": "RegexpFieldValidator",
   *        "configuration": {
   *            "regExp": "[0-9]",
   *            "fieldId": "customfield_10029"
   *        }
   *      }
   *
   *  *  `regExp`A regular expression.
   *  *  `fieldId` The ID of a field. Allowed field types:
   *
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
   *      *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
   *      *  `com.pyxis.greenhopper.jira:jsw-story-points`
   *      *  `com.pyxis.greenhopper.jira:gh-epic-status`
   *      *  `description`
   *      *  `summary`
   *
   * ##### User permission validator #####
   *
   * A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.
   *
   *     {
   *          "type": "UserPermissionValidator",
   *          "configuration": {
   *              "permissionKey": "BROWSE_PROJECTS",
   *              "nullAllowed": false,
   *              "username": "TestUser"
   *          }
   *      }
   *
   *  *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
   *  *  `nullAllowed` If `true`, allows the transition when `username` is empty.
   *  *  `username` The username to validate against the `permissionKey`.
   *
   * #### Post functions ####
   *
   * Post functions carry out any additional processing required after a Jira workflow transition is executed.
   *
   * ##### Fire issue event function #####
   *
   * A post function that fires an event that is processed by the listeners.
   *
   *     {
   *        "type": "FireIssueEventFunction",
   *        "configuration": {
   *          "event": {
   *            "id":"1"
   *          }
   *        }
   *      }
   *
   * **Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.
   *
   *  *  `event` An object containing the ID of the issue event.
   *
   * ##### Update issue status #####
   *
   * A post function that sets issue status to the linked status of the destination workflow status.
   *
   *     {
   *        "type": "UpdateIssueStatusFunction"
   *      }
   *
   * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
   *
   * ##### Create comment #####
   *
   * A post function that adds a comment entered during the transition to an issue.
   *
   *     {
   *        "type": "CreateCommentFunction"
   *      }
   *
   * **Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
   *
   * ##### Store issue #####
   *
   * A post function that stores updates to an issue.
   *
   *     {
   *        "type": "IssueStoreFunction"
   *      }
   *
   * **Note:** This post function can only be added to the initial transition and can only be added once.
   *
   * ##### Assign to current user function #####
   *
   * A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.
   *
   *     {
   *          "type": "AssignToCurrentUserFunction"
   *      }
   *
   * **Note:** This post function can be included once in a transition.
   *
   * ##### Assign to lead function #####
   *
   * A post function that assigns the issue to the project or component lead developer.
   *
   *     {
   *          "type": "AssignToLeadFunction"
   *      }
   *
   * **Note:** This post function can be included once in a transition.
   *
   * ##### Assign to reporter function #####
   *
   * A post function that assigns the issue to the reporter.
   *
   *     {
   *          "type": "AssignToReporterFunction"
   *      }
   *
   * **Note:** This post function can be included once in a transition.
   *
   * ##### Clear field value function #####
   *
   * A post function that clears the value from a field.
   *
   *     {
   *        "type": "ClearFieldValuePostFunction",
   *        "configuration": {
   *          "fieldId": "assignee"
   *        }
   *      }
   *
   *  *  `fieldId` The ID of the field.
   *
   * ##### Copy value from other field function #####
   *
   * A post function that copies the value of one field to another, either within an issue or from parent to subtask.
   *
   *     {
   *        "type": "CopyValueFromOtherFieldPostFunction",
   *        "configuration": {
   *          "sourceFieldId": "assignee",
   *          "destinationFieldId": "creator",
   *          "copyType": "same"
   *        }
   *      }
   *
   *  *  `sourceFieldId` The ID of the source field.
   *  *  `destinationFieldId` The ID of the destination field.
   *  *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.
   *
   * ##### Create Crucible review workflow function (deprecated) #####
   *
   * A post function that creates a Crucible review for all unreviewed code for the issue.
   *
   *     {
   *          "type": "CreateCrucibleReviewWorkflowFunction"
   *      }
   *
   * **Note:** This post function can be included once in a transition.
   *
   * ##### Set issue security level based on user's project role function #####
   *
   * A post function that sets the issue's security level if the current user has a project role.
   *
   *     {
   *        "type": "SetIssueSecurityFromRoleFunction",
   *        "configuration": {
   *          "projectRole": {
   *              "id":"10002"
   *          },
   *          "issueSecurityLevel": {
   *              "id":"10000"
   *          }
   *        }
   *      }
   *
   *  *  `projectRole` An object containing the ID of the project role.
   *  *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.
   *
   * ##### Trigger a webhook function #####
   *
   * A post function that triggers a webhook.
   *
   *     {
   *        "type": "TriggerWebhookFunction",
   *        "configuration": {
   *          "webhook": {
   *            "id": "1"
   *          }
   *        }
   *      }
   *
   *  *  `webhook` An object containing the ID of the webhook listener to trigger.
   *
   * ##### Update issue custom field function #####
   *
   * A post function that updates the content of an issue custom field.
   *
   *     {
   *        "type": "UpdateIssueCustomFieldPostFunction",
   *        "configuration": {
   *          "mode": "append",
   *          "fieldId": "customfield_10003",
   *          "fieldValue": "yikes"
   *        }
   *      }
   *
   *  *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
   *  *  `fieldId` The ID of the field.
   *  *  `fieldValue` The update content.
   *
   * ##### Update issue field function #####
   *
   * A post function that updates a simple issue field.
   *
   *     {
   *        "type": "UpdateIssueFieldFunction",
   *        "configuration": {
   *          "fieldId": "assignee",
   *          "fieldValue": "5f0c277e70b8a90025a00776"
   *        }
   *      }
   *
   *  *  `fieldId` The ID of the field. Allowed field types:
   *
   *      *  `assignee`
   *      *  `description`
   *      *  `environment`
   *      *  `priority`
   *      *  `resolution`
   *      *  `summary`
   *      *  `timeoriginalestimate`
   *      *  `timeestimate`
   *      *  `timespent`
   *  *  `fieldValue` The update value.
   *  *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
   *
   *      *  an account ID.
   *      *  `automatic`.
   *      *  a blank string, which sets the value to `unassigned`.
   *
   * #### Connect rules ####
   *
   * Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.
   *
   *     {
   *        "type": "appKey__moduleKey",
   *        "configuration": {
   *          "value":"{\"isValid\":\"true\"}"
   *        }
   *      }
   *
   *  *  `type` A Connect rule key in a form of `appKey__moduleKey`.
   *  *  `value` The stringified JSON configuration of a Connect rule.
   *
   * #### Forge rules ####
   *
   * Forge transition rules are not yet supported.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createWorkflow: {
    /** @description The workflow details. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "description": "This is a workflow used for Stories and Tasks",
         *   "name": "Workflow 1",
         *   "statuses": [
         *     {
         *       "id": "1",
         *       "properties": {
         *         "jira.issue.editable": "false"
         *       }
         *     },
         *     {
         *       "id": "2"
         *     },
         *     {
         *       "id": "3"
         *     }
         *   ],
         *   "transitions": [
         *     {
         *       "from": [],
         *       "name": "Created",
         *       "to": "1",
         *       "type": "initial"
         *     },
         *     {
         *       "from": [
         *         "1"
         *       ],
         *       "name": "In progress",
         *       "properties": {
         *         "custom-property": "custom-value"
         *       },
         *       "rules": {
         *         "conditions": {
         *           "conditions": [
         *             {
         *               "type": "RemoteOnlyCondition"
         *             },
         *             {
         *               "configuration": {
         *                 "groups": [
         *                   "developers",
         *                   "qa-testers"
         *                 ]
         *               },
         *               "type": "UserInAnyGroupCondition"
         *             }
         *           ],
         *           "operator": "AND"
         *         },
         *         "postFunctions": [
         *           {
         *             "type": "AssignToCurrentUserFunction"
         *           }
         *         ]
         *       },
         *       "screen": {
         *         "id": "10001"
         *       },
         *       "to": "2",
         *       "type": "directed"
         *     },
         *     {
         *       "name": "Completed",
         *       "rules": {
         *         "postFunctions": [
         *           {
         *             "configuration": {
         *               "fieldId": "assignee"
         *             },
         *             "type": "ClearFieldValuePostFunction"
         *           }
         *         ],
         *         "validators": [
         *           {
         *             "configuration": {
         *               "parentStatuses": [
         *                 {
         *                   "id": "3"
         *                 }
         *               ]
         *             },
         *             "type": "ParentStatusValidator"
         *           },
         *           {
         *             "configuration": {
         *               "permissionKey": "ADMINISTER_PROJECTS"
         *             },
         *             "type": "PermissionValidator"
         *           }
         *         ]
         *       },
         *       "to": "3",
         *       "type": "global"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["CreateWorkflowDetails"];
      };
    };
    responses: {
      /** @description Returned if the workflow is created. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkflowIDs"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if one or more statuses is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get workflow transition rule configurations
   * @description Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
   *
   *  *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
   *  *  matching one or more transition rule keys.
   *
   * Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.
   *
   * Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
   */
  getWorkflowTransitionRuleConfigurations: {
    parameters: {
      query: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The types of the transition rules to return. */
        types: ("postfunction" | "condition" | "validator")[];
        /** @description The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return. */
        keys?: string[];
        /** @description The list of workflow names to filter by. */
        workflowNames?: string[];
        /** @description The list of `tags` to filter by. */
        withTags?: string[];
        /** @description Whether draft or published workflows are returned. If not provided, both workflow types are returned. */
        draft?: boolean;
        /** @description Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanWorkflowTransitionRules"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller is not a Connect or Forge app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if any transition rule type is not supported. */
      404: {
        content: never;
      };
      /** @description Returned if we encounter a problem while trying to access the required data. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Update workflow transition rule configurations
   * @description Updates configuration of workflow transition rules. The following rule types are supported:
   *
   *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
   *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
   *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
   *
   * Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.
   *
   * To assist with app migration, this operation can be used to:
   *
   *  *  Disable a rule.
   *  *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
   *
   * Rules are enabled if the `disabled` parameter is not provided.
   *
   * **[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
   */
  updateWorkflowTransitionRuleConfigurations: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "workflows": [
         *     {
         *       "conditions": [
         *         {
         *           "configuration": {
         *             "disabled": false,
         *             "tag": "Another tag",
         *             "value": "{ \"size\": \"medium\" }"
         *           },
         *           "id": "d663bd873d93-59f5-11e9-8647-b4d6cbdc"
         *         }
         *       ],
         *       "postFunctions": [
         *         {
         *           "configuration": {
         *             "disabled": false,
         *             "tag": "Sample tag",
         *             "value": "{ \"color\": \"red\" }"
         *           },
         *           "id": "b4d6cbdc-59f5-11e9-8647-d663bd873d93"
         *         }
         *       ],
         *       "validators": [
         *         {
         *           "configuration": {
         *             "disabled": false,
         *             "value": "{ \"shape\": \"square\" }"
         *           },
         *           "id": "11e9-59f5-b4d6cbdc-8647-d663bd873d93"
         *         }
         *       ],
         *       "workflowId": {
         *         "draft": false,
         *         "name": "My Workflow name"
         *       }
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowTransitionRulesUpdate"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowTransitionRulesUpdateErrors"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller is not a Connect or Forge app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if we encounter a problem while trying to access the required data. */
      503: {
        content: never;
      };
    };
  };
  /**
   * Delete workflow transition rule configurations
   * @description Deletes workflow transition rules from one or more workflows. These rule types are supported:
   *
   *  *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
   *  *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
   *  *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
   *
   * Only rules created by the calling Connect app can be deleted.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can use this operation.
   */
  deleteWorkflowTransitionRuleConfigurations: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "workflows": [
         *     {
         *       "workflowId": {
         *         "draft": false,
         *         "name": "Internal support workflow"
         *       },
         *       "workflowRuleIds": [
         *         "b4d6cbdc-59f5-11e9-8647-d663bd873d93",
         *         "d663bd873d93-59f5-11e9-8647-b4d6cbdc",
         *         "11e9-59f5-b4d6cbdc-8647-d663bd873d93"
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowsWithTransitionRulesDetails"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowTransitionRulesUpdateErrors"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
      /** @description Returned if the caller is not a Connect app. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get workflows paginated
   * @description Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
   *
   * This operation does not return next-gen workflows.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowsPaginated: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
        /** @description The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`. */
        workflowName?: string[];
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `transitions` For each workflow, returns information about the transitions inside the workflow.
         *  *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
         *  *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
         *  *  `statuses` For each workflow, returns information about the statuses inside the workflow.
         *  *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
         *  *  `default` For each workflow, returns information about whether this is the default workflow.
         *  *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
         *  *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
         *  *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
         *  *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.
         */
        expand?: string;
        /** @description String used to perform a case-insensitive partial match with workflow name. */
        queryString?: string;
        /**
         * @description [Order](#ordering) the results by a field:
         *
         *  *  `name` Sorts by workflow name.
         *  *  `created` Sorts by create time.
         *  *  `updated` Sorts by update time.
         */
        orderBy?: "name" | "-name" | "+name" | "created" | "-created" | "+created" | "updated" | "+updated" | "-updated";
        /** @description Filters active and inactive workflows. */
        isActive?: boolean;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanWorkflow"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorCollection"];
        };
      };
    };
  };
  /**
   * Get workflow transition properties
   * @description Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowTransitionProperties: {
    parameters: {
      query: {
        /** @description Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*. */
        includeReservedKeys?: boolean;
        /** @description The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned. */
        key?: string;
        /** @description The name of the workflow that the transition belongs to. */
        workflowName: string;
        /** @description The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows. */
        workflowMode?: "live" | "draft";
      };
      path: {
        /** @description The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. */
        transitionId: number;
      };
    };
    responses: {
      /** @description 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowTransitionProperty"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have admin permission */
      403: {
        content: never;
      };
      /** @description Returned if the workflow transition or property is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update workflow transition property
   * @description Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateWorkflowTransitionProperty: {
    parameters: {
      query: {
        /** @description The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */
        key: string;
        /** @description The name of the workflow that the transition belongs to. */
        workflowName: string;
        /** @description The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */
        workflowMode?: "live" | "draft";
      };
      path: {
        /** @description The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */
        transitionId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "value": "createissue"
         * }
         */
        "application/json": components["schemas"]["WorkflowTransitionProperty"];
      };
    };
    responses: {
      /** @description 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowTransitionProperty"];
        };
      };
      /** @description Returned if no changes were made by the request. For example, attempting to update a property with its current value. */
      304: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow transition is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create workflow transition property
   * @description Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createWorkflowTransitionProperty: {
    parameters: {
      query: {
        /** @description The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */
        key: string;
        /** @description The name of the workflow that the transition belongs to. */
        workflowName: string;
        /** @description The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited. */
        workflowMode?: "live" | "draft";
      };
      path: {
        /** @description The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */
        transitionId: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "value": "createissue"
         * }
         */
        "application/json": components["schemas"]["WorkflowTransitionProperty"];
      };
    };
    responses: {
      /** @description 200 response */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowTransitionProperty"];
        };
      };
      /** @description Returned if a workflow property with the same key is present on the transition. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow transition is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete workflow transition property
   * @description Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowTransitionProperty: {
    parameters: {
      query: {
        /** @description The name of the transition property to delete, also known as the name of the property. */
        key: string;
        /** @description The name of the workflow that the transition belongs to. */
        workflowName: string;
        /** @description The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */
        workflowMode?: "live" | "draft";
      };
      path: {
        /** @description The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */
        transitionId: number;
      };
    };
    responses: {
      /** @description 200 response */
      200: {
        content: never;
      };
      /** @description Returned if no changes were made by the request. For example, trying to delete a property that cannot be found. */
      304: {
        content: never;
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow transition is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete inactive workflow
   * @description Deletes a workflow.
   *
   * The workflow cannot be deleted if it is:
   *
   *  *  an active workflow.
   *  *  a system workflow.
   *  *  associated with any workflow scheme.
   *  *  associated with any draft workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteInactiveWorkflow: {
    parameters: {
      path: {
        /** @description The entity ID of the workflow. */
        entityId: string;
      };
    };
    responses: {
      /** @description Returned if the workflow is deleted. */
      204: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the workflow is not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Bulk get workflows
   * @description Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* global permission to access all, including project-scoped, workflows
   *  *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows
   */
  readWorkflows: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
         *  *  `statuses.usages` Returns the project and issue types that each status is associated with.
         */
        expand?: string;
        /** @description Return the new fields (`toStatusReference`/`links`) instead of the deprecated fields (`to`/`from`) for workflow transition port mappings. */
        useTransitionLinksFormat?: boolean;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "projectAndIssueTypes": [],
         *   "workflowIds": [],
         *   "workflowNames": [
         *     "Workflow 1",
         *     "Workflow 2"
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowReadRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowReadResponse"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get available workflow capabilities
   * @description Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to access all, including global-scoped, workflows
   *  *  *Administer projects* project permissions to access project-scoped workflows
   *
   * The current list of Atlassian-provided rules:
   *
   * #### Validators ####
   *
   * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
   *
   * ##### Permission validator #####
   *
   * A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
   *
   *     {
   *        "ruleKey": "system:check-permission-validator",
   *        "parameters": {
   *          "permissionKey": "ADMINISTER_PROJECTS"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
   *
   * ##### Parent or child blocking validator #####
   *
   * A validator to block the child issue\\u2019s transition depending on the parent issue\\u2019s status.
   *
   *     {
   *        "ruleKey" : "system:parent-or-child-blocking-validator"
   *        "parameters" : {
   *          "blocker" : "PARENT"
   *          "statusIds" : "1,2,3"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `blocker` currently only supports `PARENT`.
   *  *  `statusIds` a comma-separated list of status IDs.
   *
   * ##### Previous status validator #####
   *
   * A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.
   *
   *     {
   *        "ruleKey": "system:previous-status-validator",
   *        "parameters": {
   *          "previousStatusIds": "10014",
   *          "mostRecentStatusOnly": "true"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
   *  *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
   *
   * ##### Validate a field value #####
   *
   * A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.
   *
   * Depending on the rule type, the result will vary:
   *
   * ###### Field required ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "fieldRequired",
   *          "fieldsRequired": "assignee",
   *          "ignoreContext": "true",
   *          "errorMessage": "An assignee must be set!"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
   *  *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
   *  *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
   *
   * ###### Field changed ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "fieldChanged",
   *          "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
   *          "fieldKey": "versions",
   *          "errorMessage": "Affect versions must be modified before transition"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
   *  *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
   *  *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
   *
   * ###### Field has a single value ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "fieldHasSingleValue",
   *          "fieldKey": "created",
   *          "excludeSubtasks": "true"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
   *  *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.
   *
   * ###### Field matches regular expression ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "fieldMatchesRegularExpression",
   *          "regexp": "[0-9]{4}",
   *          "fieldKey": "description"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `regexp` the regular expression used to validate the field\\u2019s content.
   *  *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
   *
   * ###### Date field comparison ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "dateFieldComparison",
   *          "date1FieldKey": "duedate",
   *          "date2FieldKey": "customfield_10054",
   *          "includeTime": "true",
   *          "conditionSelected": ">="
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
   *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
   *  *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
   *  *  `conditionSelected` the condition to compare with. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
   *
   * ###### Date range comparison ######
   *
   *     {
   *        "ruleKey": "system:validate-field-value",
   *        "parameters": {
   *          "ruleType": "windowDateComparison",
   *          "date1FieldKey": "customfield_10009",
   *          "date2FieldKey": "customfield_10054",
   *          "numberOfDays": "3"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
   *  *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
   *  *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.
   *
   * This rule is composed by aggregating the following legacy rules:
   *
   *  *  FieldRequiredValidator
   *  *  FieldChangedValidator
   *  *  FieldHasSingleValueValidator
   *  *  RegexpFieldValidator
   *  *  DateFieldValidator
   *  *  WindowsDateValidator
   *
   * ##### Proforma: Forms attached validator #####
   *
   * Validates that one or more forms are attached to the issue.
   *
   *     {
   *        "ruleKey" : "system:proforma-forms-attached"
   *        "parameters" : {}
   *      }
   *
   * ##### Proforma: Forms submitted validator #####
   *
   * Validates that all forms attached to the issue have been submitted.
   *
   *     {
   *        "ruleKey" : "system:proforma-forms-submitted"
   *        "parameters" : {}
   *      }
   *
   * #### Conditions ####
   *
   * Conditions enable workflow rules that govern whether a transition can execute.
   *
   * ##### Check field value #####
   *
   * A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.
   *
   *     {
   *        "ruleKey": "system:check-field-value",
   *        "parameters": {
   *          "fieldId": "description",
   *          "fieldValue": "[\"Done\"]",
   *          "comparator": "=",
   *          "comparisonType": "STRING"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
   *  *  `fieldValue` the list of values to check against the field\\u2019s value.
   *  *  `comparator` The comparison logic. Allowed values: `>`, `>=`, `=`, `<=`, `<`, `!=`.
   *  *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.
   *
   * ##### Restrict issue transition #####
   *
   * This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.
   *
   *     {
   *        "ruleKey": "system:restrict-issue-transition",
   *        "parameters": {
   *          "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
   *          "roleIds": "10002,10004",
   *          "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
   *          "permissionKeys": "ADMINISTER_PROJECTS",
   *          "groupCustomFields": "customfield_10028",
   *          "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
   *          "denyUserCustomFields": "customfield_10107"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
   *  *  `roleIds` a comma-separated list of role IDs.
   *  *  `groupIds` a comma-separated list of group IDs.
   *  *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
   *  *  `groupCustomFields` a comma-separated list of group custom field IDs.
   *  *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
   *  *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.
   *
   * This rule is composed by aggregating the following legacy rules:
   *
   *  *  AllowOnlyAssignee
   *  *  AllowOnlyReporter
   *  *  InAnyProjectRoleCondition
   *  *  InProjectRoleCondition
   *  *  UserInAnyGroupCondition
   *  *  UserInGroupCondition
   *  *  PermissionCondtion
   *  *  InGroupCFCondition
   *  *  UserIsInCustomFieldCondition
   *
   * ##### Previous status condition #####
   *
   * A condition that evaluates based on an issue's previous status(es) and specific criteria.
   *
   *     {
   *        "ruleKey" : "system:previous-status-condition"
   *        "parameters" : {
   *          "previousStatusIds" : "10004",
   *          "not": "true",
   *          "mostRecentStatusOnly" : "true",
   *          "includeCurrentStatus": "true",
   *          "ignoreLoopTransitions": "true"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
   *  *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
   *  *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
   *  *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
   *  *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.
   *
   * ##### Parent or child blocking condition #####
   *
   * A condition to block the parent\\u2019s issue transition depending on the child\\u2019s issue status.
   *
   *     {
   *        "ruleKey" : "system:parent-or-child-blocking-condition"
   *        "parameters" : {
   *          "blocker" : "CHILD",
   *          "statusIds" : "1,2,3"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `blocker` currently only supports `CHILD`.
   *  *  `statusIds` a comma-separated list of status IDs.
   *
   * ##### Separation of duties #####
   *
   * A condition preventing the user from performing, if the user has already performed a transition on the issue.
   *
   *     {
   *        "ruleKey": "system:separation-of-duties",
   *        "parameters": {
   *          "fromStatusId": "10161",
   *          "toStatusId": "10160"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
   *  *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.
   *
   * ##### Restrict transitions #####
   *
   * A condition preventing all users from transitioning the issue can also optionally include APIs as well.
   *
   *     {
   *        "ruleKey": "system:restrict-from-all-users",
   *        "parameters": {
   *          "restrictMode": "users"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.
   *
   * ##### Jira Service Management block until approved #####
   *
   * Block an issue transition until approval. Note: This is only supported in team-managed projects.
   *
   *     {
   *        "ruleKey": "system:jsd-approvals-block-until-approved",
   *        "parameters": {
   *          "approvalConfigurationJson": "{"statusExternalUuid...}"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
   *
   * ##### Jira Service Management block until rejected #####
   *
   * Block an issue transition until rejected. Note: This is only supported in team-managed projects.
   *
   *     {
   *        "ruleKey": "system:jsd-approvals-block-until-rejected",
   *        "parameters": {
   *          "approvalConfigurationJson": "{"statusExternalUuid...}"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
   *
   * ##### Block in progress approval #####
   *
   * Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.
   *
   *     {
   *        "ruleKey": "system:block-in-progress-approval",
   *        "parameters": {}
   *      }
   *
   * #### Post functions ####
   *
   * Post functions carry out any additional processing required after a workflow transition is executed.
   *
   * ##### Change assignee #####
   *
   * A post function rule that changes the assignee of an issue after a transition.
   *
   *     {
   *        "ruleKey": "system:change-assignee",
   *        "parameters": {
   *          "type": "to-selected-user",
   *          "accountId": "example-account-id"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
   *  *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.
   *
   * ##### Copy field value #####
   *
   * A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.
   *
   *     {
   *        "ruleKey": "system:copy-value-from-other-field",
   *        "parameters": {
   *          "sourceFieldKey": "description",
   *          "targetFieldKey": "components",
   *          "issueSource": "SAME"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
   *  *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
   *  *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.
   *
   * ##### Update field #####
   *
   * A post function that updates or appends a specific field with the given value.
   *
   *     {
   *        "ruleKey": "system:update-field",
   *        "parameters": {
   *          "field": "customfield_10056",
   *          "value": "asdf",
   *          "mode": "append"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
   *  *  `value` the value to update the field with.
   *  *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.
   *
   * ##### Trigger webhook #####
   *
   * A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.
   *
   *     {
   *        "ruleKey": "system:trigger-webhook",
   *        "parameters": {
   *          "webhookId": "1"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `webhookId` the ID of the webhook.
   *
   * #### Screen ####
   *
   * ##### Remind people to update fields #####
   *
   * A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.
   *
   *     {
   *        "ruleKey": "system:remind-people-to-update-fields",
   *        "params": {
   *          "remindingFieldIds": "assignee,customfield_10025",
   *          "remindingMessage": "The message",
   *          "remindingAlwaysAsk": "true"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
   *  *  `remindingMessage` the message to display when prompting the users to update the fields.
   *  *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.
   *
   * ##### Shared transition screen #####
   *
   * A common screen that is shared between transitions in a workflow.
   *
   *     {
   *        "ruleKey": "system:transition-screen",
   *        "params": {
   *          "screenId": "3"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `screenId` the ID of the screen.
   *
   * #### Connect & Forge ####
   *
   * ##### Connect rules #####
   *
   * Validator/Condition/Post function for Connect app.
   *
   *     {
   *        "ruleKey": "connect:expression-validator",
   *        "parameters": {
   *          "appKey": "com.atlassian.app",
   *          "config": "",
   *          "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
   *          "disabled": "false",
   *          "tag": ""
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
   *  *  `appKey` the reference to the Connect app
   *  *  `config` a JSON payload string describing the configuration
   *  *  `id` the ID of the rule
   *  *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
   *  *  `tag` additional tags for the Connect app
   *
   * ##### Forge rules #####
   *
   * Validator/Condition/Post function for Forge app.
   *
   *     {
   *        "ruleKey": "forge:expression-validator",
   *        "parameters": {
   *          "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
   *          "config": "{"searchString":"workflow validator"}",
   *          "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
   *        }
   *      }
   *
   * Parameters:
   *
   *  *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
   *  *  `key` the identifier for the Forge app
   *  *  `config` the persistent stringified JSON configuration for the Forge rule
   *  *  `id` the ID of the Forge rule
   */
  workflowCapabilities: {
    parameters: {
      query?: {
        workflowId?: string;
        projectId?: string;
        issueTypeId?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowCapabilities"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Bulk create workflows
   * @description Create workflows and related statuses.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
   *  *  *Administer projects* project permissions to create project-scoped workflows
   */
  createWorkflows: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "scope": {
         *     "type": "GLOBAL"
         *   },
         *   "statuses": [
         *     {
         *       "description": "",
         *       "name": "To Do",
         *       "statusCategory": "TODO",
         *       "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *     },
         *     {
         *       "description": "",
         *       "name": "In Progress",
         *       "statusCategory": "IN_PROGRESS",
         *       "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *     },
         *     {
         *       "description": "",
         *       "name": "Done",
         *       "statusCategory": "DONE",
         *       "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *     }
         *   ],
         *   "workflows": [
         *     {
         *       "description": "",
         *       "name": "Software workflow 1",
         *       "startPointLayout": {
         *         "x": -100.00030899047852,
         *         "y": -153.00020599365234
         *       },
         *       "statuses": [
         *         {
         *           "layout": {
         *             "x": 114.99993896484375,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *         },
         *         {
         *           "layout": {
         *             "x": 317.0000915527344,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *         },
         *         {
         *           "layout": {
         *             "x": 508.000244140625,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *         }
         *       ],
         *       "transitions": [
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "1",
         *           "name": "Create",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           "triggers": [],
         *           "type": "INITIAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "11",
         *           "name": "To Do",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "21",
         *           "name": "In Progress",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "31",
         *           "name": "Done",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowCreateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowCreateResponse"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Validate create workflows
   * @description Validate the payload for bulk create workflows.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
   *  *  *Administer projects* project permissions to create project-scoped workflows
   */
  validateCreateWorkflows: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "payload": {
         *     "scope": {
         *       "type": "GLOBAL"
         *     },
         *     "statuses": [
         *       {
         *         "description": "",
         *         "name": "To Do",
         *         "statusCategory": "TODO",
         *         "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *       },
         *       {
         *         "description": "",
         *         "name": "In Progress",
         *         "statusCategory": "IN_PROGRESS",
         *         "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *       },
         *       {
         *         "description": "",
         *         "name": "Done",
         *         "statusCategory": "DONE",
         *         "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *       }
         *     ],
         *     "workflows": [
         *       {
         *         "description": "",
         *         "name": "Software workflow 1",
         *         "startPointLayout": {
         *           "x": -100.00030899047852,
         *           "y": -153.00020599365234
         *         },
         *         "statuses": [
         *           {
         *             "layout": {
         *               "x": 114.99993896484375,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           {
         *             "layout": {
         *               "x": 317.0000915527344,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *           },
         *           {
         *             "layout": {
         *               "x": 508.000244140625,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *           }
         *         ],
         *         "transitions": [
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "1",
         *             "name": "Create",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *             },
         *             "triggers": [],
         *             "type": "INITIAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "11",
         *             "name": "To Do",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "21",
         *             "name": "In Progress",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "31",
         *             "name": "Done",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           }
         *         ]
         *       }
         *     ]
         *   },
         *   "validationOptions": {
         *     "levels": [
         *       "ERROR",
         *       "WARNING"
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["WorkflowCreateValidateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowValidationErrorList"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Bulk update workflows
   * @description Update workflows and related statuses.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
   *  *  *Administer projects* project permissions to create project-scoped workflows
   */
  updateWorkflows: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
         *  *  `statuses.usages` Returns the project and issue types that each status is associated with.
         */
        expand?: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "statuses": [
         *     {
         *       "description": "",
         *       "name": "To Do",
         *       "statusCategory": "TODO",
         *       "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *     },
         *     {
         *       "description": "",
         *       "name": "In Progress",
         *       "statusCategory": "IN_PROGRESS",
         *       "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *     },
         *     {
         *       "description": "",
         *       "name": "Done",
         *       "statusCategory": "DONE",
         *       "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *     }
         *   ],
         *   "workflows": [
         *     {
         *       "defaultStatusMappings": [
         *         {
         *           "newStatusReference": "10011",
         *           "oldStatusReference": "10010"
         *         }
         *       ],
         *       "description": "",
         *       "id": "10001",
         *       "startPointLayout": {
         *         "x": -100.00030899047852,
         *         "y": -153.00020599365234
         *       },
         *       "statusMappings": [
         *         {
         *           "issueTypeId": "10002",
         *           "projectId": "10003",
         *           "statusMigrations": [
         *             {
         *               "newStatusReference": "10011",
         *               "oldStatusReference": "10010"
         *             }
         *           ]
         *         }
         *       ],
         *       "statuses": [
         *         {
         *           "layout": {
         *             "x": 114.99993896484375,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *         },
         *         {
         *           "layout": {
         *             "x": 317.0000915527344,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *         },
         *         {
         *           "layout": {
         *             "x": 508.000244140625,
         *             "y": -16
         *           },
         *           "properties": {},
         *           "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *         }
         *       ],
         *       "transitions": [
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "1",
         *           "name": "Create",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           "triggers": [],
         *           "type": "INITIAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "11",
         *           "name": "To Do",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "21",
         *           "name": "In Progress",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         },
         *         {
         *           "actions": [],
         *           "description": "",
         *           "from": [],
         *           "id": "31",
         *           "name": "Done",
         *           "properties": {},
         *           "to": {
         *             "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *           },
         *           "triggers": [],
         *           "type": "GLOBAL",
         *           "validators": []
         *         }
         *       ],
         *       "version": {
         *         "id": "6f6c988b-2590-4358-90c2-5f7960265592",
         *         "versionNumber": 1
         *       }
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowUpdateResponse"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Validate update workflows
   * @description Validate the payload for bulk update workflows.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to create all, including global-scoped, workflows
   *  *  *Administer projects* project permissions to create project-scoped workflows
   */
  validateUpdateWorkflows: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "payload": {
         *     "statuses": [
         *       {
         *         "description": "",
         *         "name": "To Do",
         *         "statusCategory": "TODO",
         *         "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *       },
         *       {
         *         "description": "",
         *         "name": "In Progress",
         *         "statusCategory": "IN_PROGRESS",
         *         "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *       },
         *       {
         *         "description": "",
         *         "name": "Done",
         *         "statusCategory": "DONE",
         *         "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *       }
         *     ],
         *     "workflows": [
         *       {
         *         "defaultStatusMappings": [
         *           {
         *             "newStatusReference": "10011",
         *             "oldStatusReference": "10010"
         *           }
         *         ],
         *         "description": "",
         *         "id": "10001",
         *         "startPointLayout": {
         *           "x": -100.00030899047852,
         *           "y": -153.00020599365234
         *         },
         *         "statusMappings": [
         *           {
         *             "issueTypeId": "10002",
         *             "projectId": "10003",
         *             "statusMigrations": [
         *               {
         *                 "newStatusReference": "10011",
         *                 "oldStatusReference": "10010"
         *               }
         *             ]
         *           }
         *         ],
         *         "statuses": [
         *           {
         *             "layout": {
         *               "x": 114.99993896484375,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *           },
         *           {
         *             "layout": {
         *               "x": 317.0000915527344,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *           },
         *           {
         *             "layout": {
         *               "x": 508.000244140625,
         *               "y": -16
         *             },
         *             "properties": {},
         *             "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *           }
         *         ],
         *         "transitions": [
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "1",
         *             "name": "Create",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *             },
         *             "triggers": [],
         *             "type": "INITIAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "11",
         *             "name": "To Do",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "f0b24de5-25e7-4fab-ab94-63d81db6c0c0"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "21",
         *             "name": "In Progress",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "c7a35bf0-c127-4aa6-869f-4033730c61d8"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           },
         *           {
         *             "actions": [],
         *             "description": "",
         *             "from": [],
         *             "id": "31",
         *             "name": "Done",
         *             "properties": {},
         *             "to": {
         *               "statusReference": "6b3fc04d-3316-46c5-a257-65751aeb8849"
         *             },
         *             "triggers": [],
         *             "type": "GLOBAL",
         *             "validators": []
         *           }
         *         ],
         *         "version": {
         *           "id": "6f6c988b-2590-4358-90c2-5f7960265592",
         *           "versionNumber": 1
         *         }
         *       }
         *     ]
         *   },
         *   "validationOptions": {
         *     "levels": [
         *       "ERROR",
         *       "WARNING"
         *     ]
         *   }
         * }
         */
        "application/json": components["schemas"]["WorkflowUpdateValidateRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowValidationErrorList"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get all workflow schemes
   * @description Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getAllWorkflowSchemes: {
    parameters: {
      query?: {
        /** @description The index of the first item to return in a page of results (page offset). */
        startAt?: number;
        /** @description The maximum number of items to return per page. */
        maxResults?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PageBeanWorkflowScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Create workflow scheme
   * @description Creates a workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createWorkflowScheme: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultWorkflow": "jira",
         *   "description": "The description of the example workflow scheme.",
         *   "issueTypeMappings": {
         *     "10000": "scrum workflow",
         *     "10001": "builds workflow"
         *   },
         *   "name": "Example workflow scheme"
         * }
         */
        "application/json": components["schemas"]["WorkflowScheme"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get workflow scheme project associations
   * @description Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.
   *
   * If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowSchemeProjectAssociations: {
    parameters: {
      query: {
        /** @description The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`. */
        projectId: number[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ContainerOfWorkflowSchemeAssociations"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Assign workflow scheme to project
   * @description Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.
   *
   * Workflow schemes can only be assigned to classic projects.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  assignSchemeToProject: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "projectId": "10001",
         *   "workflowSchemeId": "10032"
         * }
         */
        "application/json": components["schemas"]["WorkflowSchemeProjectAssociation"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the required permissions. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the workflow scheme or the project are not found. */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Bulk get workflow schemes
   * @description Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
   *  *  *Administer projects* project permissions to access project-scoped workflow schemes
   */
  readWorkflowSchemes: {
    parameters: {
      query?: {
        /**
         * @description Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
         *
         *  *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.
         */
        expand?: string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "projectIds": [
         *     "10047",
         *     "10048"
         *   ],
         *   "workflowSchemeIds": [
         *     "3e59db0f-ed6c-47ce-8d50-80c0c4572677"
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowSchemeReadRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowSchemeReadResponse"][];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Update workflow scheme
   * @description Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
   *  *  *Administer projects* project permission to update project-scoped workflow schemes.
   */
  updateSchemes: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultWorkflowId": "3e59db0f-ed6c-47ce-8d50-80c0c4572677",
         *   "description": "description",
         *   "id": "10000",
         *   "name": "name",
         *   "statusMappingsByIssueTypeOverride": [
         *     {
         *       "issueTypeId": "10001",
         *       "statusMappings": [
         *         {
         *           "newStatusId": "2",
         *           "oldStatusId": "1"
         *         },
         *         {
         *           "newStatusId": "4",
         *           "oldStatusId": "3"
         *         }
         *       ]
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "statusMappings": [
         *         {
         *           "newStatusId": "4",
         *           "oldStatusId": "1"
         *         },
         *         {
         *           "newStatusId": "2",
         *           "oldStatusId": "3"
         *         }
         *       ]
         *     }
         *   ],
         *   "statusMappingsByWorkflows": [
         *     {
         *       "newWorkflowId": "3e59db0f-ed6c-47ce-8d50-80c0c4572677",
         *       "oldWorkflowId": "3e59db0f-ed6c-47ce-8d50-80c0c4572677",
         *       "statusMappings": [
         *         {
         *           "newStatusId": "2",
         *           "oldStatusId": "1"
         *         },
         *         {
         *           "newStatusId": "4",
         *           "oldStatusId": "3"
         *         }
         *       ]
         *     }
         *   ],
         *   "version": {
         *     "id": "527213fc-bc72-400f-aae0-df8d88db2c8a",
         *     "versionNumber": 1
         *   },
         *   "workflowsForIssueTypes": [
         *     {
         *       "issueTypeIds": [
         *         "10000",
         *         "10003"
         *       ],
         *       "workflowId": "3e59db0f-ed6c-47ce-8d50-80c0c4572677"
         *     },
         *     {
         *       "issueTypeIds": [
         *         "10001`",
         *         "10002"
         *       ],
         *       "workflowId": "3f83dg2a-ns2n-56ab-9812-42h5j1461629"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowSchemeUpdateRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful and there is no asynchronous task. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is successful and there is an asynchronous task for the migrations. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get required status mappings for workflow scheme update
   * @description Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.
   *
   * **[Permissions](#permissions) required:**
   *
   *  *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
   *  *  *Administer projects* project permission to update project-scoped workflow schemes.
   */
  updateWorkflowSchemeMappings: {
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultWorkflowId": "10010",
         *   "id": "10001",
         *   "workflowsForIssueTypes": [
         *     {
         *       "issueTypeIds": [
         *         "10010",
         *         "10011"
         *       ],
         *       "workflowId": "10001"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorkflowSchemeUpdateRequiredMappingsRequest"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowSchemeUpdateRequiredMappingsResponse"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing, or the caller doesn't have permissions to perform the operation. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get workflow scheme
   * @description Returns a workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowScheme: {
    parameters: {
      query?: {
        /** @description Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. */
        returnDraftIfExists?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Classic update workflow scheme
   * @description Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateWorkflowScheme: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultWorkflow": "jira",
         *   "description": "The description of the example workflow scheme.",
         *   "issueTypeMappings": {
         *     "10000": "scrum workflow"
         *   },
         *   "name": "Example workflow scheme",
         *   "updateDraftIfNeeded": false
         * }
         */
        "application/json": components["schemas"]["WorkflowScheme"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete workflow scheme
   * @description Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowScheme: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the scheme is active. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Create draft workflow scheme
   * @description Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  createWorkflowSchemeDraftFromParent: {
    parameters: {
      path: {
        /** @description The ID of the active workflow scheme that the draft is created from. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      201: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get default workflow
   * @description Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getDefaultWorkflow: {
    parameters: {
      query?: {
        /** @description Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. */
        returnDraftIfExists?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultWorkflow"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update default workflow
   * @description Sets the default workflow for a workflow scheme.
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateDefaultWorkflow: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    /** @description The new default workflow. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "updateDraftIfNeeded": false,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["DefaultWorkflow"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete default workflow
   * @description Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteDefaultWorkflow: {
    parameters: {
      query?: {
        /** @description Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */
        updateDraftIfNeeded?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the workflow scheme cannot be edited and `updateDraftIfNeeded` is not `true`. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get draft workflow scheme
   * @description Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.
   * Note that:
   *
   *  *  Only active workflow schemes can have draft workflow schemes.
   *  *  An active workflow scheme can only have one draft workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowSchemeDraft: {
    parameters: {
      path: {
        /** @description The ID of the active workflow scheme that the draft was created from. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the original active workflow scheme is not found.
       *  *  the original active workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update draft workflow scheme
   * @description Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateWorkflowSchemeDraft: {
    parameters: {
      path: {
        /** @description The ID of the active workflow scheme that the draft was created from. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "defaultWorkflow": "jira",
         *   "description": "The description of the example workflow scheme.",
         *   "issueTypeMappings": {
         *     "10000": "scrum workflow"
         *   },
         *   "name": "Example workflow scheme",
         *   "updateDraftIfNeeded": false
         * }
         */
        "application/json": components["schemas"]["WorkflowScheme"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the original active workflow scheme is not found.
       *  *  the original active workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete draft workflow scheme
   * @description Deletes a draft workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowSchemeDraft: {
    parameters: {
      path: {
        /** @description The ID of the active workflow scheme that the draft was created from. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission.. */
      403: {
        content: never;
      };
      /**
       * @description Returned if:
       *
       *  *  the original active workflow scheme is not found.
       *  *  the original active workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get draft default workflow
   * @description Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getDraftDefaultWorkflow: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultWorkflow"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission.. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Update draft default workflow
   * @description Sets the default workflow for a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateDraftDefaultWorkflow: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    /** @description The object for the new default workflow. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "updateDraftIfNeeded": false,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["DefaultWorkflow"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete draft default workflow
   * @description Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteDraftDefaultWorkflow: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get workflow for issue type in draft workflow scheme
   * @description Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowSchemeDraftIssueType: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeWorkflowMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set workflow for issue type in draft workflow scheme
   * @description Sets the workflow for an issue type in a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setWorkflowSchemeDraftIssueType: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    /** @description The issue type-project mapping. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueType": "10000",
         *   "updateDraftIfNeeded": false,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["IssueTypeWorkflowMapping"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete workflow for issue type in draft workflow scheme
   * @description Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowSchemeDraftIssueType: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Publish draft workflow scheme
   * @description Publishes a draft workflow scheme.
   *
   * Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.
   *
   * This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  publishDraftWorkflowScheme: {
    parameters: {
      query?: {
        /** @description Whether the request only performs a validation. */
        validateOnly?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    /** @description Details of the status mappings. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "statusMappings": [
         *     {
         *       "issueTypeId": "10001",
         *       "newStatusId": "1",
         *       "statusId": "3"
         *     },
         *     {
         *       "issueTypeId": "10001",
         *       "newStatusId": "2",
         *       "statusId": "2"
         *     },
         *     {
         *       "issueTypeId": "10002",
         *       "newStatusId": "10003",
         *       "statusId": "10005"
         *     },
         *     {
         *       "issueTypeId": "10003",
         *       "newStatusId": "1",
         *       "statusId": "4"
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["PublishDraftWorkflowScheme"];
      };
    };
    responses: {
      /** @description Returned if the request is only for validation and is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the request is successful. */
      303: {
        content: {
          "application/json": components["schemas"]["TaskProgressBeanObject"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of these are true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       *  *  A new status in the draft workflow scheme is not found.
       */
      404: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Get issue types for workflows in draft workflow scheme
   * @description Returns the workflow-issue type mappings for a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getDraftWorkflow: {
    parameters: {
      query?: {
        /** @description The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */
        workflowName?: string;
      };
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypesWorkflowMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if either the workflow scheme or workflow (if specified) is not found. session. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set issue types for workflow in workflow scheme
   * @description Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateDraftWorkflowMapping: {
    parameters: {
      query: {
        /** @description The name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypes": [
         *     "10000"
         *   ],
         *   "updateDraftIfNeeded": true,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["IssueTypesWorkflowMapping"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       *  *  The workflow is not found.
       *  *  The workflow is not specified.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue types for workflow in draft workflow scheme
   * @description Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteDraftWorkflowMapping: {
    parameters: {
      query: {
        /** @description The name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The ID of the workflow scheme that the draft belongs to. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow scheme does not have a draft.
       *  *  The workflow is not found.
       *  *  The workflow is not specified.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get workflow for issue type in workflow scheme
   * @description Returns the issue type-workflow mapping for an issue type in a workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflowSchemeIssueType: {
    parameters: {
      query?: {
        /** @description Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */
        returnDraftIfExists?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypeWorkflowMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set workflow for issue type in workflow scheme
   * @description Sets the workflow for an issue type in a workflow scheme.
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  setWorkflowSchemeIssueType: {
    parameters: {
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    /** @description The issue type-project mapping. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueType": "10000",
         *   "updateDraftIfNeeded": false,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["IssueTypeWorkflowMapping"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete workflow for issue type in workflow scheme
   * @description Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowSchemeIssueType: {
    parameters: {
      query?: {
        /** @description Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. */
        updateDraftIfNeeded?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
        /** @description The ID of the issue type. */
        issueType: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the workflow cannot be edited and `updateDraftIfNeeded` is false. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if the workflow scheme or issue type is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get issue types for workflows in workflow scheme
   * @description Returns the workflow-issue type mappings for a workflow scheme.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  getWorkflow: {
    parameters: {
      query?: {
        /** @description The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */
        workflowName?: string;
        /** @description Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */
        returnDraftIfExists?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["IssueTypesWorkflowMapping"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /** @description Returned if either the workflow scheme or workflow is not found. */
      404: {
        content: never;
      };
    };
  };
  /**
   * Set issue types for workflow in workflow scheme
   * @description Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  updateWorkflowMapping: {
    parameters: {
      query: {
        /** @description The name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "issueTypes": [
         *     "10000"
         *   ],
         *   "updateDraftIfNeeded": true,
         *   "workflow": "jira"
         * }
         */
        "application/json": components["schemas"]["IssueTypesWorkflowMapping"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowScheme"];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow is not found.
       *  *  The workflow is not specified.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Delete issue types for workflow in workflow scheme
   * @description Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
   *
   * Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
   *
   * **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
   */
  deleteWorkflowMapping: {
    parameters: {
      query: {
        /** @description The name of the workflow. */
        workflowName: string;
        /** @description Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */
        updateDraftIfNeeded?: boolean;
      };
      path: {
        /** @description The ID of the workflow scheme. */
        id: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /** @description Returned if the workflow cannot be edited and `updateDraftIfNeeded` is not true. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the user does not have the necessary permission. */
      403: {
        content: never;
      };
      /**
       * @description Returned if any of the following is true:
       *
       *  *  The workflow scheme is not found.
       *  *  The workflow is not found.
       *  *  The workflow is not specified.
       */
      404: {
        content: never;
      };
    };
  };
  /**
   * Get IDs of deleted worklogs
   * @description Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
   *
   * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
   *
   * This resource does not return worklogs deleted during the minute preceding the request.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira.
   */
  getIdsOfWorklogsDeletedSince: {
    parameters: {
      query?: {
        /** @description The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned. */
        since?: number;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ChangedWorklogs"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get worklogs
   * @description Returns worklog details for a list of worklog IDs.
   *
   * The returned list of worklogs is limited to 1000 items.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
   *
   *  *  the worklog is set as *Viewable by All Users*.
   *  *  the user is a member of a project role or group with permission to view the worklog.
   */
  getWorklogsForIds: {
    parameters: {
      query?: {
        /** @description Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */
        expand?: string;
      };
    };
    /** @description A JSON object containing a list of worklog IDs. */
    requestBody: {
      content: {
        /**
         * @example {
         *   "ids": [
         *     1,
         *     2,
         *     5,
         *     10
         *   ]
         * }
         */
        "application/json": components["schemas"]["WorklogIdsRequestBean"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["Worklog"][];
        };
      };
      /** @description Returned if the request contains more than 1000 worklog IDs or is empty. */
      400: {
        content: never;
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get IDs of updated worklogs
   * @description Returns a list of IDs and update timestamps for worklogs updated after a date and time.
   *
   * This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
   *
   * This resource does not return worklogs updated during the minute preceding the request.
   *
   * **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
   *
   *  *  the worklog is set as *Viewable by All Users*.
   *  *  the user is a member of a project role or group with permission to view the worklog.
   */
  getIdsOfWorklogsModifiedSince: {
    parameters: {
      query?: {
        /** @description The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned. */
        since?: number;
        /** @description Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */
        expand?: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ChangedWorklogs"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
    };
  };
  /**
   * Get app properties
   * @description Gets all the properties of an app.
   *
   * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
   * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
   */
  "AddonPropertiesResource.getAddonProperties_get": {
    parameters: {
      path: {
        /** @description The key of the app, as defined in its descriptor. */
        addonKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["PropertyKeys"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
    };
  };
  /**
   * Get app property
   * @description Returns the key and value of an app's property.
   *
   * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
   * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
   */
  "AddonPropertiesResource.getAddonProperty_get": {
    parameters: {
      path: {
        /** @description The key of the app, as defined in its descriptor. */
        addonKey: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["EntityProperty"];
        };
      };
      /** @description Returned if the property key is longer than 127 characters. */
      400: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the property is not found or doesn't belong to the app. */
      404: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
    };
  };
  /**
   * Set app property
   * @description Sets the value of an app's property. Use this resource to store custom data for your app.
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
   * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
   */
  "AddonPropertiesResource.putAddonProperty_put": {
    parameters: {
      path: {
        /** @description The key of the app, as defined in its descriptor. */
        addonKey: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the property is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned is the property is created. */
      201: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /**
       * @description Returned if:
       *   * the property key is longer than 127 characters.
       *   * the value is not valid JSON.
       *   * the value is longer than 32768 characters.
       */
      400: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
    };
  };
  /**
   * Delete app property
   * @description Deletes an app's property.
   *
   * **[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
   * Additionally, Forge apps can access Connect app properties (stored against the same `app.connect.key`).
   */
  "AddonPropertiesResource.deleteAddonProperty_delete": {
    parameters: {
      path: {
        /** @description The key of the app, as defined in its descriptor. */
        addonKey: string;
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the property key is longer than 127 characters. */
      400: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the property is not found or doesn't belong to the app. */
      404: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
    };
  };
  /**
   * Get modules
   * @description Returns all modules registered dynamically by the calling app.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can make this request.
   */
  "DynamicModulesResource.getModules_get": {
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectModules"];
        };
      };
      /** @description Returned if the call is not from a Connect app. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
  /**
   * Register modules
   * @description Registers a list of modules.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can make this request.
   */
  "DynamicModulesResource.registerModules_post": {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConnectModules"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /**
       * @description Returned if:
       * * any of the provided modules is invalid. For example, required properties are missing.
       * * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.
       *
       * Details of the issues encountered are included in the error message.
       */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
      /** @description Returned if the call is not from a Connect app. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
  /**
   * Remove modules
   * @description Remove all or a list of modules registered by the calling app.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can make this request.
   */
  "DynamicModulesResource.removeModules_delete": {
    parameters: {
      query?: {
        /**
         * @description The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
         * For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
         * Nonexistent keys are ignored.
         */
        moduleKey?: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the call is not from a Connect app. */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorMessage"];
        };
      };
    };
  };
  /**
   * Bulk update custom field value
   * @description Updates the value of a custom field added by Connect apps on one or more issues.
   * The values of up to 200 custom fields can be updated.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can make this request
   */
  "AppIssueFieldValueUpdateResource.updateIssueFields_put": {
    parameters: {
      header: {
        /** @description The ID of the transfer. */
        "Atlassian-Transfer-Id": string;
      };
    };
    requestBody: {
      content: {
        /**
         * @example {
         *   "updateValueList": [
         *     {
         *       "_type": "StringIssueField",
         *       "issueID": 10001,
         *       "fieldID": 10076,
         *       "string": "new string value"
         *     },
         *     {
         *       "_type": "TextIssueField",
         *       "issueID": 10002,
         *       "fieldID": 10077,
         *       "text": "new text value"
         *     },
         *     {
         *       "_type": "SingleSelectIssueField",
         *       "issueID": 10003,
         *       "fieldID": 10078,
         *       "optionID": "1"
         *     },
         *     {
         *       "_type": "MultiSelectIssueField",
         *       "issueID": 10004,
         *       "fieldID": 10079,
         *       "optionID": "2"
         *     },
         *     {
         *       "_type": "RichTextIssueField",
         *       "issueID": 10005,
         *       "fieldID": 10080,
         *       "richText": "new rich text value"
         *     },
         *     {
         *       "_type": "NumberIssueField",
         *       "issueID": 10006,
         *       "fieldID": 10082,
         *       "number": 54
         *     }
         *   ]
         * }
         */
        "application/json": components["schemas"]["ConnectCustomFieldValues"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /**
       * @description Returned if:
       * * the transfer ID is not found.
       * * the authorisation credentials are incorrect or missing.
       */
      403: {
        content: never;
      };
    };
  };
  /**
   * Bulk update entity properties
   * @description Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
   */
  "MigrationResource.updateEntityPropertiesValue_put": {
    parameters: {
      header: {
        /** @description The app migration transfer ID. */
        "Atlassian-Transfer-Id": string;
      };
      path: {
        /** @description The type indicating the object that contains the entity properties. */
        entityType: "IssueProperty" | "CommentProperty" | "DashboardItemProperty" | "IssueTypeProperty" | "ProjectProperty" | "UserProperty" | "WorklogProperty" | "BoardProperty" | "SprintProperty";
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EntityPropertyDetails"][];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: never;
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authorisation credentials are incorrect or missing. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Get workflow transition rule configurations
   * @description Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
   */
  "MigrationResource.workflowRuleSearch_post": {
    parameters: {
      header: {
        /** @description The app migration transfer ID. */
        "Atlassian-Transfer-Id": string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowRulesSearch"];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowRulesSearchDetails"];
        };
      };
      /** @description Returned if the request is not valid. */
      400: {
        content: never;
      };
      /** @description Returned if the authorisation credentials are incorrect or missing. */
      403: {
        content: never;
      };
    };
  };
  /**
   * Retrieve the attributes of service registries
   * @description Retrieve the attributes of given service registries.
   *
   * **[Permissions](#permissions) required:** Only Connect apps can make this request and the servicesIds belong to the tenant you are requesting
   */
  "ServiceRegistryResource.services_get": {
    parameters: {
      query: {
        /**
         * @description The ID of the services (the strings starting with "b:" need to be decoded in Base64).
         * @example ["ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000000", "ari:cloud:graph::service/ca075ed7-6ea7-4563-acb3-000000000000/f51d7252-61e0-11ee-b94d-000000000001"]
         */
        serviceIds: string[];
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      200: {
        content: {
          "application/json": components["schemas"]["ServiceRegistry"][];
        };
      };
      /** @description Returned if the request is invalid. */
      400: {
        content: never;
      };
      /** @description The request needs to be authenticated. */
      401: {
        content: never;
      };
      /** @description The request isn't authorized. */
      403: {
        content: never;
      };
      /** @description The endpoint failed internally. */
      500: {
        content: never;
      };
      /** @description The endpoint isn't ready for receiving requests. */
      501: {
        content: never;
      };
      /** @description The upstream service is busy. */
      504: {
        content: never;
      };
    };
  };
  /**
   * Set app property (Forge)
   * @description Sets the value of a Forge app's property.
   * These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
   * through the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).
   *
   * For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).
   *
   * The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
   *
   * **[Permissions](#permissions) required:** Only Forge apps can make this request.
   */
  putForgeAppProperty: {
    parameters: {
      path: {
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    requestBody: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      /** @description Returned if the property is updated. */
      200: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned is the property is created. */
      201: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /**
       * @description Returned if:
       *   * the property key is longer than 127 characters.
       *   * the value isn't valid JSON.
       *   * the value is longer than 32768 characters.
       */
      400: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request isn't made directly by an app or if it's an impersonated request. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /**
   * Delete app property (Forge)
   * @description Deletes a Forge app's property.
   *
   * **[Permissions](#permissions) required:** Only Forge apps can make this request.
   */
  deleteForgeAppProperty: {
    parameters: {
      path: {
        /** @description The key of the property. */
        propertyKey: string;
      };
    };
    responses: {
      /** @description Returned if the request is successful. */
      204: {
        content: never;
      };
      /** @description Returned if the property key is longer than 127 characters. */
      400: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
      /** @description Returned if the authentication credentials are incorrect or missing. */
      401: {
        content: never;
      };
      /** @description Returned if the request isn't made directly by an app or if it's an impersonated request. */
      403: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Returned if the property isn't found or doesn't belong to the app. */
      404: {
        content: {
          "application/json": components["schemas"]["OperationMessage"];
        };
      };
    };
  };
}
